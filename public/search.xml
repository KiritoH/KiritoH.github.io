<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Next搭建起步</title>
    <url>/2020/06/08/%E5%AD%A6%E4%B9%A0/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E8%B5%B7%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><blockquote>
<p>hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。其中的差别，有点意思。<br>hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。</p>
</blockquote>
<p>安装步骤：</p>
<blockquote>
<p>主要参考的是这篇文章：<a href="https://www.cnblogs.com/microxiami/p/12641137.html" target="_blank" rel="noopener">hexo使用教程</a></p>
</blockquote>
<p>具体的安装步骤参考那篇文章即可，再写一遍只是做重复工作，毕竟只是工具。</p>
<p>重点讲一下遇到的一些坑：</p>
<ul>
<li><p>如何显示分类和便签？</p>
<p>  只需要在根目录执行：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure>

<p>  然后在<code>/source/categories/index.md</code>中进行修改：</p>
<p>  加上<code>type: categories</code>即可（记得有空格！），tags同理。</p>
</li>
<li><p>如何多级分类：</p>
<p>  参考一下这个格式:（时间不用放哦！！他会根据文件格式自动生成时间）</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 01 - 安装环境&amp;&amp;实现一个文字扫描仪程序</span><br><span class="line">tags: 计算机视觉</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>学习 </span><br><span class="line"><span class="bullet">- </span>计算机视觉</span><br><span class="line"><span class="bullet">- </span>入门教程</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用hexo命令：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清除缓存，有时候本地和远程不同步，用一下这个，真的有奇效！</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">#生成html文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">#部署到github</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment">#同时进行前面两个操作</span></span><br><span class="line">hexo g -d</span><br><span class="line"><span class="comment">#本地运行</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h5 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h5><blockquote>
<p>next就是hexo的一个主题，很合我的胃口，但是有些坑，弄了很久，有点闹心。。</p>
</blockquote>
<p>部署非常简单，就是将其clone到主题文件夹然后修改配置文件就可以用了。</p>
<p>不过有两个版本的next，以前那个已经没有维护了，这里放出长期维护的那个：</p>
<p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next长期维护版本</a></p>
<p>还有一个坑就是，它的样式主题只能用Muse，其他的github上都无法显示。</p>
<p>哎，对于强迫症而言非常难受，这里起码耗费了3个小时，十分闹心。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.6.7-2020.6.14</title>
    <url>/2020/06/07/%E7%94%9F%E6%B4%BB/%E5%91%A8%E8%AE%B0/2020.6.7-2020.6.14/</url>
    <content><![CDATA[<h1 id="2020-6-7-2020-6-14"><a href="#2020-6-7-2020-6-14" class="headerlink" title="2020.6.7-2020.6.14"></a>2020.6.7-2020.6.14</h1><h4 id="2020-6-7-周日"><a href="#2020-6-7-周日" class="headerlink" title="2020.6.7-周日"></a>2020.6.7-周日</h4><ul>
<li><p>安装opencv环境</p>
</li>
<li><p>边理解边写一个使用opencv实现扫描仪功能的程序—实现了透视转移部分</p>
<p>  具体可见：<a href="https://kiritoh.github.io/2020/06/09/01/">01 - 安装环境&amp;&amp;实现一个文字扫描仪程序</a></p>
</li>
</ul>
<h4 id="2020-6-8-周一"><a href="#2020-6-8-周一" class="headerlink" title="2020.6.8-周一"></a>2020.6.8-周一</h4><ul>
<li><p>边理解边写一个使用opencv实现扫描仪功能的程序—实现了扫描边界以及转换灰度部分</p>
<p>  具体可见：<a href="https://kiritoh.github.io/2020/06/09/01/">01 - 安装环境&amp;&amp;实现一个文字扫描仪程序</a></p>
</li>
<li><p>搭建个人博客，还没彻底弄完（打算把今后学的一些笔记放上去）</p>
</li>
<li><p>练科三</p>
</li>
</ul>
<h4 id="2020-6-9-周二"><a href="#2020-6-9-周二" class="headerlink" title="2020.6.9-周二"></a>2020.6.9-周二</h4><ul>
<li>博客彻底搭建完（遇到了很多坑，折腾了很久）</li>
<li>练科三</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
        <category>周记</category>
      </categories>
      <tags>
        <tag>周记</tag>
      </tags>
  </entry>
  <entry>
    <title>01 - 安装环境&amp;&amp;实现一个文字扫描仪程序</title>
    <url>/2020/06/07/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/01/</url>
    <content><![CDATA[<h1 id="01"><a href="#01" class="headerlink" title="01"></a>01</h1><h4 id="安装必备工具："><a href="#安装必备工具：" class="headerlink" title="安装必备工具："></a>安装必备工具：</h4><p><a href="https://www.pyimagesearch.com/2018/08/17/install-opencv-4-on-macos/" target="_blank" rel="noopener">openCV环境安装–macOS</a></p>
<h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><p>安好之后，其实是相当于在一个虚拟环境使用，所以每次用之前，要先使得虚拟配置生效：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>然后再进入cv虚拟环境：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workon cv</span><br></pre></td></tr></table></figure>



<h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><blockquote>
<p>这个例子相当有趣，完全可以算上是一个完整的程序，而且我还是全部理解了的，果然，慢就是快。</p>
<p>这个例子实现一个扫描仪app，分为两个部分：</p>
</blockquote>
<h5 id="（1）第一部分"><a href="#（1）第一部分" class="headerlink" title="（1）第一部分"></a>（1）第一部分</h5><p>这一部分实现的是「透视转换」，就是把ROI（感兴趣区域）拉成一个长方形展示。</p>
<p>这以部分没能实现边缘的检测（也就是4个点的检测，竟然需要自己手打。。。）</p>
<p>上代码：</p>
<p><code>transform.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此程序用于获得边框的4个顶点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必要的包,numpy用于数值运算,cv2就是opencv的绑定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数作用是将得到的边界坐标以有序的形式(顺时针)输出,有序非常重要!!!!</span></span><br><span class="line"><span class="comment"># 其中的pts参数是长方形的边界4点坐标的数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_points</span><span class="params">(pts)</span>:</span></span><br><span class="line">    <span class="comment"># 先初始化4个坐标,分别是左上,右上,右下,左下(注意是顺时针,绕图形走,不能穿插)</span></span><br><span class="line">    <span class="comment"># 这里函数的意思是初始化一个4x2的数组,32位浮点类型(c++的double是64位,而float是32位,python中的浮点数都是floatXX),且初始化值为0</span></span><br><span class="line">    rect = np.zeros((<span class="number">4</span>, <span class="number">2</span>), dtype = <span class="string">"float32"</span>)</span><br><span class="line">    <span class="comment"># s为pts的x和y相加后得到的数组(4x1),axis指定的是轴,为0是纵轴,为1是横轴(也就是x和y)</span></span><br><span class="line">    s = pts.sum(axis = <span class="number">1</span>) </span><br><span class="line">    <span class="comment"># argmin()是得到最小值的下标,是因为左上的x+y一定是最小的(原点在左上角)----得到左上坐标</span></span><br><span class="line">    rect[<span class="number">0</span>] = pts[np.argmin(s)] </span><br><span class="line">    <span class="comment"># argmax()是得到最大值的下标,是因为右下的x+y一定是最大的(原点在左上角)----得到右下坐标</span></span><br><span class="line">    rect[<span class="number">2</span>] = pts[np.argmax(s)]</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    这里有一个地方我始终没有弄懂,就是如果程序没错的话,这个坐标轴应该是x轴向右,y轴向上(即正常坐标轴)</span></span><br><span class="line"><span class="string">    所以他的top,其实就是图片的下方,而bottom是图片的上方,匪夷所思.....</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 这里的diff是相减即x-y的一维数组(4x1)</span></span><br><span class="line">    diff = np.diff(pts, axis = <span class="number">1</span>)</span><br><span class="line">    rect[<span class="number">1</span>] = pts[np.argmin(diff)] <span class="comment"># 所以右上的x-y最小</span></span><br><span class="line">    rect[<span class="number">3</span>] = pts[np.argmax(diff)] <span class="comment"># 所以左下的x-y最大</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回有序的坐标</span></span><br><span class="line">    <span class="keyword">return</span> rect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#传入两个参数,其中image是需要进行形状转换的图像,pts是包含了4个边界点的坐标列表(即感兴趣区域(ROI--rigion of interest))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">four_point_transform</span><span class="params">(image, pts)</span>:</span></span><br><span class="line">    <span class="comment">#调用前面的函数,使得坐标有序</span></span><br><span class="line">    rect = order_points(pts)</span><br><span class="line">    <span class="comment">#分别定义变量得到4个坐标(解包),这种方式我还是有点匪夷所思hh</span></span><br><span class="line">    (tl, tr, br, bl) = rect</span><br><span class="line"></span><br><span class="line">    <span class="comment">#由于这个4边型不一定规则,先得到上下宽度,取最大的,这里注意要用二维坐标的距离公式求</span></span><br><span class="line">    widthA = np.sqrt(((tl[<span class="number">0</span>] - tr[<span class="number">0</span>])**<span class="number">2</span>) + ((tl[<span class="number">1</span>] - tr[<span class="number">1</span>])**<span class="number">2</span>))</span><br><span class="line">    widthB = np.sqrt(((bl[<span class="number">0</span>] - br[<span class="number">0</span>])**<span class="number">2</span>) + ((bl[<span class="number">1</span>] - br[<span class="number">1</span>])**<span class="number">2</span>))</span><br><span class="line">    maxWidth = max(int(widthA), int(widthB))</span><br><span class="line">    <span class="comment">#再得到左右高度取最大的</span></span><br><span class="line">    higthA = np.sqrt(((tl[<span class="number">0</span>] - bl[<span class="number">0</span>])**<span class="number">2</span>) + ((tl[<span class="number">1</span>] - bl[<span class="number">1</span>])**<span class="number">2</span>))</span><br><span class="line">    higthB = np.sqrt(((tr[<span class="number">0</span>] - br[<span class="number">0</span>])**<span class="number">2</span>) + ((tr[<span class="number">1</span>] - br[<span class="number">1</span>])**<span class="number">2</span>))</span><br><span class="line">    maxHigth = max(int(higthA), int(higthB))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#到此为止我们已经拥有了新图形的尺寸</span></span><br><span class="line">    <span class="comment">#dst用于新建感兴趣区域的四点坐标(即创建新图形的大小)</span></span><br><span class="line">    dst = np.array([</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [maxWidth - <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [maxWidth - <span class="number">1</span>, maxHigth - <span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, maxHigth - <span class="number">1</span>]], dtype = <span class="string">"float32"</span>)</span><br><span class="line">    <span class="comment"># 我可以理解为M是一个处理变量,它设置好了将rect的四点应用到dst四点中</span></span><br><span class="line">    M = cv2.getPerspectiveTransform(rect, dst)</span><br><span class="line">    <span class="comment"># 然后M作为一个参数传入,用于处理一个图片,将图片,透视形状的改变方式以及图像宽度和高度传入,处理得到所需图像</span></span><br><span class="line">    warped = cv2.warpPerspective(image, M, (maxWidth, maxHigth))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回ROI图像</span></span><br><span class="line">    <span class="keyword">return</span> warped</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里面我对于方向的理解非常头痛，我觉得可能是作者认为top,其实就是图片的下方,而bottom是图片的上方,匪夷所思…..</p>
<p>另外图片的坐标轴应该是和数学中常用的坐标轴方向一致</p>
</blockquote>
<p>接着用一个demo来运用这个包：</p>
<p><code>transform_example.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">通常情况下，当使用 import 语句导入模块后，Python 会按照以下顺序查找指定的模块文件：</span></span><br><span class="line"><span class="string">在当前目录，即当前执行的程序文件所在目录下查找；</span></span><br><span class="line"><span class="string">到 PYTHONPATH（环境变量）下的每个目录中查找；</span></span><br><span class="line"><span class="string">到 Python 默认的安装目录下查找。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> transform</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#argparse用于解析命令行参数</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#我可以理解为执行这个py文件时会输入一些附加参数,比如--image代表图像地址,--coords代表4点坐标</span></span><br><span class="line"><span class="comment">#首先解析命令行</span></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line"><span class="comment">#image是我们想转变的图像</span></span><br><span class="line">ap.add_argument(<span class="string">"-i"</span>, <span class="string">"--image"</span>, help = <span class="string">"path to the image file"</span>)</span><br><span class="line"><span class="comment">#coords是我们需要输入的坐标组(4个点)</span></span><br><span class="line">ap.add_argument(<span class="string">"-c"</span>, <span class="string">"--coords"</span>, help = <span class="string">"comma seperated list of source points"</span>)</span><br><span class="line">args = vars(ap.parse_args())</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载图片</span></span><br><span class="line">image = cv2.imread(args[<span class="string">"image"</span>])</span><br><span class="line"><span class="comment">#读取坐标,写入pts,eval可以将元组形式字符串转换为元组</span></span><br><span class="line">pts = np.array(eval(args[<span class="string">"coords"</span>]), dtype = <span class="string">"float32"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用方法,得到转换后的图像</span></span><br><span class="line">warped = transform.four_point_transform(image, pts)</span><br><span class="line"></span><br><span class="line"><span class="comment">#展示图像,对比展示</span></span><br><span class="line">cv2.imshow(<span class="string">"Original"</span>, image)</span><br><span class="line">cv2.imshow(<span class="string">"Warped"</span>, warped)</span><br><span class="line"><span class="comment">#按方向键退出</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>读取命令行的方式还是第一次见，python是真的好用。。</p>
</blockquote>
<p>然后为了使用这个例子，我得运行一下，不得不说太狗了，那个图片下不了，我自己拍了张，但是那个坐标运用了之后，基本啥也没有。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">python transform_example.py --<span class="built_in">image</span> /Users/kirito/学习/CV/<span class="built_in">print</span>/images/<span class="number">1.</span>jpg --coords <span class="string">"[(101, 185), (393, 151), (479, 323), (187, 441)]"</span></span><br></pre></td></tr></table></figure>

<h5 id="（2）第二部分"><a href="#（2）第二部分" class="headerlink" title="（2）第二部分"></a>（2）第二部分</h5><blockquote>
<p>这里才是我想要的部分，能够扫码边框，并且文字增强扫描</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> transform</span><br><span class="line"><span class="comment">#要安装必要的包: pip install --upgrade scikit-image</span></span><br><span class="line"><span class="keyword">from</span> skimage.filters <span class="keyword">import</span> threshold_local</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> imutils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读命令</span></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">"-i"</span>, <span class="string">"--image"</span>, required = <span class="literal">True</span>,</span><br><span class="line">    help = <span class="string">"Path to the image to be scanned"</span>)</span><br><span class="line"><span class="comment">#将命令中的参数以字典形式得出</span></span><br><span class="line">args = vars(ap.parse_args())</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.调整大小,方便检测</span></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">image = cv2.imread(args[<span class="string">"image"</span>])</span><br><span class="line"><span class="comment">#为了加速图片处理进程,同时事边缘检测更加精准,在以下三步中将图像调整为500像素高度</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这里有一个小知识点:</span></span><br><span class="line"><span class="string">image.shape[0], 图片垂直尺寸</span></span><br><span class="line"><span class="string">image.shape[1], 图片水平尺寸</span></span><br><span class="line"><span class="string">image.shape[2], 图片通道数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#这个ratio(比率)即原尺寸与500像素的比率</span></span><br><span class="line">ratio = image.shape[<span class="number">0</span>] / <span class="number">500.0</span></span><br><span class="line"><span class="comment">#复制原图像</span></span><br><span class="line">orig = image.copy()</span><br><span class="line"><span class="comment">#调整大小(500像素)</span></span><br><span class="line">image = imutils.resize(image, height = <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.转换图像为灰阶,模糊化(去噪)</span></span><br><span class="line"><span class="comment">#转换为灰阶</span></span><br><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) </span><br><span class="line"><span class="comment">#模糊化(消除高频噪音),用于辅助之后的轮廓检测</span></span><br><span class="line">gray = cv2.GaussianBlur(gray, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"><span class="comment">#执行边缘检测,会得到一个图片,将检测出的边缘高亮?</span></span><br><span class="line">edged = cv2.Canny(gray, <span class="number">75</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"STEP 1: Edge Detection"</span>)</span><br><span class="line">cv2.imshow(<span class="string">"Image"</span>, image)</span><br><span class="line">cv2.imshow(<span class="string">"Edged"</span>, edged)</span><br><span class="line"><span class="comment">#使用方向键便会退出</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.寻找边缘</span></span><br><span class="line"><span class="comment">#我们假定图像中正好四个点的最大轮廓是要扫描的纸张</span></span><br><span class="line"><span class="comment">#利用灰度图,找到图像轮廓</span></span><br><span class="line">cnts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">cnts = imutils.grab_contours(cnts)</span><br><span class="line"><span class="comment">#按轮廓面积排序(降序),去前5个</span></span><br><span class="line">cnts = sorted(cnts, key = cv2.contourArea, reverse = <span class="literal">True</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历所有轮廓</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cnts:</span><br><span class="line">    <span class="comment">#然后是找所有轮廓的顶点数</span></span><br><span class="line">    peri = cv2.arcLength(c, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#得到顶点集</span></span><br><span class="line">    approx = cv2.approxPolyDP(c, <span class="number">0.02</span> * peri, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#如果是4个顶点就要,直接break</span></span><br><span class="line">    <span class="keyword">if</span> len(approx) == <span class="number">4</span>:</span><br><span class="line">        <span class="comment">#拿到目标值</span></span><br><span class="line">        screenCnt = approx</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"STEP 2: Find contours of paper"</span>)</span><br><span class="line"><span class="comment">#连接点集在原图上画线,线颜色是(0,255,0)</span></span><br><span class="line">cv2.drawContours(image, [screenCnt], <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">"Outline"</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.将之前写的透视转换应用在这里,大小要重新调整回来,因为是应用在原图形上而非那个用于边缘检测的图形</span></span><br><span class="line"><span class="comment">#所以对于坐标要同比例乘ratio</span></span><br><span class="line">warped = transform.four_point_transform(orig, screenCnt.reshape(<span class="number">4</span>, <span class="number">2</span>) * ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将颜色转换为灰度</span></span><br><span class="line">warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment">#调整成黑白颜色,且自适应阈值</span></span><br><span class="line">T = threshold_local(warped, <span class="number">11</span>, offset = <span class="number">10</span>, method = <span class="string">"gaussian"</span>)</span><br><span class="line">warped = (warped &gt; T).astype(<span class="string">"uint8"</span>) * <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#展示图片</span></span><br><span class="line">print(<span class="string">"STEP 3: Apply perspective transform"</span>)</span><br><span class="line">cv2.imshow(<span class="string">"Original"</span>, imutils.resize(orig, height = <span class="number">650</span>))</span><br><span class="line">cv2.imshow(<span class="string">"Scanned"</span>, imutils.resize(warped, height = <span class="number">650</span>))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里面有些细节作者其实没有讲到底什么意思，但是对于初学者而言，就大概知道其作用，已经非常好了，能够学到很多东西</p>
</blockquote>
<p>命令行运行：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python scan.py --image ./images/<span class="number">4.j</span>pg</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 先变灰度去噪（图三），然后利用图三检测边缘套用到原图（图一）：</p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200609204223721.png" alt="image-20200609204223721"></p>
<blockquote>
<p>然后就透视转变，只取ROI区域的图形，然后增强：</p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200609204542583.png" alt="image-20200609204542583"></p>
<blockquote>
<p>效果还不错！</p>
</blockquote>
<blockquote>
<p>接下来是另一个例子：</p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/08/602af20200608190554955.png" alt=""></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>计算机视觉</category>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>1338. 数组大小减半</title>
    <url>/2020/04/13/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/1338.%20%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%8D%8A/</url>
    <content><![CDATA[<h1 id="1338-数组大小减半"><a href="#1338-数组大小减半" class="headerlink" title="1338. 数组大小减半"></a><a href="https://leetcode-cn.com/problems/reduce-array-size-to-the-half/" target="_blank" rel="noopener">1338. 数组大小减半</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200413162740371.png" alt="image-20200413162740371"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSetSize</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//只要统计出了每一个数的数量即可，题目不用输出选择的数是什么</span></span><br><span class="line">        sort(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>()); <span class="comment">//对原数组排序后计数，排序的时间大大减少，计数需要的内存空间减少很多</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nums</span><span class="params">(<span class="built_in">size</span> + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;  <span class="comment">//计数</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] == arr[j]) nums[index]++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[++index]++;</span><br><span class="line">                j = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), cmp);  <span class="comment">//从大往小排</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="built_in">size</span> / <span class="number">2</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                sum += nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1419. 数青蛙</title>
    <url>/2020/04/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/1419.%20%E6%95%B0%E9%9D%92%E8%9B%99/</url>
    <content><![CDATA[<h1 id="1419-数青蛙"><a href="#1419-数青蛙" class="headerlink" title="1419. 数青蛙"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-frogs-croaking/" target="_blank" rel="noopener">1419. 数青蛙</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200422185016366.png" alt="image-20200422185016366"></p>
</blockquote>
<p>实话说，有点难。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberOfFrogs</span><span class="params">(<span class="built_in">string</span> croakOfFrogs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>, r = <span class="number">0</span>, o = <span class="number">0</span>, a = <span class="number">0</span>, k = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; croakOfFrogs.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(croakOfFrogs[i] == <span class="string">'c'</span>) &#123;</span><br><span class="line">                <span class="comment">//每次到c时，如果k&gt;0，意味着有空闲下来的青蛙，分配给一只空闲的青蛙</span></span><br><span class="line">                <span class="comment">//反之，新增一只青蛙来叫</span></span><br><span class="line">                <span class="keyword">if</span>(k &gt; <span class="number">0</span>) k--;</span><br><span class="line">                <span class="keyword">else</span> res++;</span><br><span class="line">                c++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(croakOfFrogs[i] == <span class="string">'r'</span>) &#123;</span><br><span class="line">                c--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(croakOfFrogs[i] == <span class="string">'o'</span>) &#123;</span><br><span class="line">                r--;</span><br><span class="line">                o++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(croakOfFrogs[i] == <span class="string">'a'</span>) &#123;</span><br><span class="line">                o--;</span><br><span class="line">                a++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(croakOfFrogs[i] == <span class="string">'k'</span>) &#123;</span><br><span class="line">                a--;</span><br><span class="line">                k++;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//如果有小于0者，定是顺序不对，无法组成蛙鸣</span></span><br><span class="line">            <span class="keyword">if</span>(c &lt; <span class="number">0</span> || r &lt; <span class="number">0</span> || o &lt; <span class="number">0</span> || a &lt; <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k不用判断，k用于记录空闲青蛙数</span></span><br><span class="line">        <span class="keyword">if</span>(c != <span class="number">0</span> || r != <span class="number">0</span> || o != <span class="number">0</span> || a != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1547-二叉树的深度</title>
    <url>/2020/03/12/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/1547-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="1547-二叉树的深度"><a href="#1547-二叉树的深度" class="headerlink" title="1547-二叉树的深度"></a>1547-二叉树的深度</h1><p><strong>DFS</strong></p>
<p>终于自己做出一道DFS的题目了，太高兴了，果然开始还是要从简单的做起，直接做pat甲级太打击自信了。</p>
<p>不过leetCode的判定方式实在是让我无语，全局变量的设置一定得小心！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>; <span class="comment">//放这里不用重置</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth &gt; ans) &#123;</span><br><span class="line">            ans = depth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为空要停止（递归边界）</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            DFS(root-&gt;left, depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            DFS(root-&gt;right, depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        DFS(root, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当初做法还是太稚嫩了点：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求深度（由最上往下数）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_depth</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth, <span class="keyword">int</span>&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(depth &gt; ans) ans = depth; <span class="comment">//更新</span></span><br><span class="line">        get_depth(root-&gt;left, depth + <span class="number">1</span>, ans);</span><br><span class="line">        get_depth(root-&gt;right, depth + <span class="number">1</span>, ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>看看那些一行代码解决的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//事实上用的是DFS的思路，太强了，但仔细一想，又符合情理</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (!root)?<span class="number">0</span>:<span class="built_in">max</span>(maxDepth(root-&gt;left), maxDepth(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>401.二进制手表</title>
    <url>/2020/03/19/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/401.%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="401-二进制手表"><a href="#401-二进制手表" class="headerlink" title="401.二进制手表"></a>401.二进制手表</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/binary-watch/" target="_blank" rel="noopener">401.二进制手表</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200319221954511.png" alt="image-20200319221954511"></p>
</blockquote>
<p>个人做法：</p>
<blockquote>
<p>等价于一个十位数的二进制数，输出取n位为1的所有情况（去除其中不符合时间表示的情况）<br>可以同样看做一棵树，初始化的二进制序列为“0000000000”，递归传输一个下标index和一个计数器计数目前是放第几个1，代表对某位进行放值操作，放0和放1位两种情况（相当于两颗子树）<br>如果放0，则访问下一个下标，但是计数器计数不变，如果放1，则访问下一个下标，计数器计数+1<br>就像遍历二叉树一样即可<br>然后得到所有的二进制结果后转为十进制结果就行了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//二进制转十进制</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getval</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum = sum &lt;&lt; <span class="number">1</span> | (s[i] - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//又是dfs，一共10位，按照树的遍历得到n位为1的所有情况（叶子结点），保存符合时间规则的</span></span><br><span class="line">    <span class="comment">//ans为传递的答案数组，str为传递进来的字符串(初始为10位0)，now_num为第几个要放的1，n为传递的目标1个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;ans, <span class="built_in">string</span> str, <span class="keyword">int</span> index, <span class="keyword">int</span> now_num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (now_num &gt; n) &#123;</span><br><span class="line">            ans.push_back(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//如果还能放数字</span></span><br><span class="line">        <span class="comment">//一次此位放1</span></span><br><span class="line">        <span class="built_in">string</span> temp = str.substr(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        temp[index] = <span class="string">'1'</span>;</span><br><span class="line">        dfs(ans, temp, index + <span class="number">1</span>, now_num + <span class="number">1</span>, n);</span><br><span class="line">        <span class="comment">//一次此位放0</span></span><br><span class="line">        dfs(ans, str, index + <span class="number">1</span>, now_num, n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将10位二进制数转换为十进制时钟格式</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;ans_b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = ans_b.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> hh = getval(ans_b[i].substr(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">            <span class="keyword">int</span> mm = getval(ans_b[i].substr(<span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">            <span class="keyword">if</span> (hh &gt; <span class="number">11</span> || mm &gt; <span class="number">59</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">                str += to_string(hh);</span><br><span class="line">                str += <span class="string">":"</span>;</span><br><span class="line">                <span class="keyword">if</span>(mm &lt; <span class="number">10</span>) str += <span class="string">"0"</span>;</span><br><span class="line">                str += to_string(mm);</span><br><span class="line">                ans.push_back(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans_b;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) &#123;  <span class="comment">//0做特判</span></span><br><span class="line">            ans_b.push_back(<span class="string">"0:00"</span>);</span><br><span class="line">            <span class="keyword">return</span> ans_b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">"0000000000"</span>;</span><br><span class="line">        dfs(ans_b, str, <span class="number">0</span>, <span class="number">1</span>, num);</span><br><span class="line">        <span class="keyword">return</span> helper(ans_b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>他人做法：</p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>200. 岛屿数量</title>
    <url>/2020/04/25/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/200.%20%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h1 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. 岛屿数量</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200425173155662.png" alt="image-20200425173155662"></p>
</blockquote>
<p>典型的bfs题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//增量数组</span></span><br><span class="line">    <span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m,n;  <span class="comment">//m为行数，n为列数</span></span><br><span class="line">    <span class="comment">//BFS</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Node node, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;&amp; inq, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span></span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">        q.push(node);</span><br><span class="line">        inq[node.x][node.y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            Node top = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="comment">//遍历一层</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                a = top.x + X[i];</span><br><span class="line">                b = top.y + Y[i];</span><br><span class="line">                <span class="comment">//越界</span></span><br><span class="line">                <span class="keyword">if</span>(a &lt; <span class="number">0</span> || a &gt;= m || b &lt; <span class="number">0</span> || b &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(inq[a][b] == <span class="literal">false</span> &amp;&amp; grid[a][b] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    Node temp;</span><br><span class="line">                    temp.x = a, temp.y = b;</span><br><span class="line">                    q.push(temp);</span><br><span class="line">                    inq[a][b] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> ans; <span class="comment">//trick</span></span><br><span class="line">        n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">inq</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>))</span></span>;</span><br><span class="line">        Node node;</span><br><span class="line">        <span class="comment">//相当于BFSTrave</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(inq[i][j] == <span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    <span class="comment">//能进来就证明又发现一个岛屿</span></span><br><span class="line">                    ans++;</span><br><span class="line">                    node.x = i, node.y = j;</span><br><span class="line">                    BFS(node, inq, grid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>455. 分发饼干</title>
    <url>/2020/04/09/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/455.%20%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</url>
    <content><![CDATA[<h1 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode-cn.com/problems/assign-cookies/" target="_blank" rel="noopener">455. 分发饼干</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200409220011549.png" alt="image-20200409220011549"></p>
</blockquote>
<p>从最大的往下走，贪心策略。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//从最大的饼干开始，给胃口最大的孩子吃，然后逐个往下</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; g, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        sort(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> size_g = g.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> size_s = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size_g - <span class="number">1</span>, j = size_s - <span class="number">1</span>; i &gt;=<span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(g[i] &lt;= s[j]) &#123; <span class="comment">//这个孩子可以喂饱</span></span><br><span class="line">                ans++;</span><br><span class="line">                i--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> i--; <span class="comment">//这个孩子没办法喂饱了，抛弃</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>406. 根据身高重建队列</title>
    <url>/2020/04/13/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/406.%20%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="406-根据身高重建队列"><a href="#406-根据身高重建队列" class="headerlink" title="406. 根据身高重建队列"></a><a href="https://leetcode-cn.com/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener">406. 根据身高重建队列</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200413143100540.png" alt="image-20200413143100540"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">reconstructQueue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; people)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        sort(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), </span><br><span class="line">        [](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; l, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; r) &#123;</span><br><span class="line">            <span class="keyword">return</span> l[<span class="number">0</span>] == r[<span class="number">0</span>] ? l[<span class="number">1</span>] &lt; r[<span class="number">1</span>] : l[<span class="number">0</span>] &gt; r[<span class="number">0</span>];  <span class="comment">//身高降序，数量升序</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = people.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">list</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;<span class="comment">//对于当前被遍历的元素而言，其排在前面的人数即该元素在当前队列的插入位置 </span></span><br><span class="line">            <span class="built_in">list</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator pos = tmp.<span class="built_in">begin</span>();</span><br><span class="line">            advance(pos, people[i][<span class="number">1</span>]); <span class="comment">//it 表示某个迭代器，n 为整数。该函数的功能是将 it 迭代器前进或后退 n 个位置。</span></span><br><span class="line">            tmp.insert(pos, people[i]); <span class="comment">//插入，前者为迭代器位置，插入到pos位置，后者是对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重载</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>55. 跳跃游戏</title>
    <url>/2020/04/12/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/55.%20%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200412215237375.png" alt="image-20200412215237375"></p>
</blockquote>
<p>状态：位置</p>
<p>dp数组含义：dp[i]表示能否跳到i号位置</p>
<p>状态转移方程：$dp[i] = \begin{cases} true&amp;\exist k \in [1,i)使得dp[k]==true&amp;&amp;nums[k] + k \geq i  \ fasle&amp;otherwise\end{cases}$</p>
<p>base case: $dp[0] = true$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">size</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">dp</span><span class="params">(<span class="built_in">size</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//状态转移方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;  <span class="comment">//从后往前，可以减低复杂度</span></span><br><span class="line">                <span class="keyword">if</span>(dp[k] == <span class="literal">true</span> &amp;&amp; k + nums[k] &gt;= i) &#123;</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                &#125;<span class="comment">//反之不变</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="built_in">size</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>695.岛屿的最大面积</title>
    <url>/2020/03/15/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/695.%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/</url>
    <content><![CDATA[<h1 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695.岛屿的最大面积"></a>695.岛屿的最大面积</h1><p><code>BFS</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//典型的bfs题</span></span><br><span class="line">    <span class="comment">//增量数组</span></span><br><span class="line">    <span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">bool</span> inq[<span class="number">50</span>][<span class="number">50</span>] = &#123;<span class="literal">false</span>&#125;;  <span class="comment">//访问数组</span></span><br><span class="line">    <span class="comment">//判断是否需要访问</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//越界</span></span><br><span class="line">        <span class="keyword">if</span>(x &gt;= m || y &gt;= n || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(inq[x][y] == <span class="literal">true</span>|| grid[x][y] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//入过队或该点为0都无需访问</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一次BFS可以遍历完一个连通块（全1的）</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> area = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">        Node node;</span><br><span class="line">        node.x = x;</span><br><span class="line">        node.y = y;</span><br><span class="line">        q.push(node);</span><br><span class="line">        area++;</span><br><span class="line">        inq[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            Node top = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="comment">//下一层入队</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> NewX = top.x + X[i], NewY = top.y + Y[i];</span><br><span class="line">                <span class="keyword">if</span>(judge(grid, NewX, NewY)) &#123;</span><br><span class="line">                    node.x = NewX, node.y = NewY;</span><br><span class="line">                    q.push(node);</span><br><span class="line">                    inq[NewX][NewY] = <span class="literal">true</span>;</span><br><span class="line">                    area++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        m = grid.<span class="built_in">size</span>();</span><br><span class="line">        n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="number">2500</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(inq[i][j] == <span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, BFS(grid, i, j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>一道BFS题，现在对于BFS，DFS和DP的题目都有一点点敏感了，明天继续加油，目标是考前300题！</strong></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>763. 划分字母区间</title>
    <url>/2020/04/13/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/763.%20%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/" target="_blank" rel="noopener">763. 划分字母区间</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200413112841937.png" alt="image-20200413112841937"></p>
</blockquote>
<p>存储最大出现位置我想到了，但是怎么用我没能想到</p>
<p>利用最大出现位置的特性，确定区间下标，当下标为尾下标时确定一个区间（这也意味着其中所有的字母都出现了最后一次），对于遍历时那些最后出现次数比尾下标还大时，便更新尾下标。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//用散列存储每个字母的最大出现位置</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">loc</span><span class="params">(<span class="number">26</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) loc[S[i] - <span class="string">'a'</span>] = i; </span><br><span class="line">        <span class="comment">//然后存开始和结束,当遍历的下标等于结束端时</span></span><br><span class="line">        <span class="comment">//便确定了一个片段，如果在遍历时对应字母的最后出现下标比结束端更大，更新结束端</span></span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, e = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(loc[S[i] - <span class="string">'a'</span>] &gt; e) e = loc[S[i] - <span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span>(i == e) &#123;</span><br><span class="line">                ans.push_back(e - s + <span class="number">1</span>);</span><br><span class="line">                s = e + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>784.字母大小写全排列</title>
    <url>/2020/03/19/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h1 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784.字母大小写全排列"></a>784.字母大小写全排列</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/letter-case-permutation/" target="_blank" rel="noopener">字母大小写全排列</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200319113644070.png" alt="image-20200319113644070"></p>
</blockquote>
<p><strong>解题思路</strong></p>
<p>遍历一个字符串的过程其实可以看做遍历一棵树</p>
<p>以“a1b2”为例，头结点为a由于是字母，往下延伸两个子树“a”和“A”</p>
<p>然后分别对”a“和“A”继续操作，由于1为数字，故只进行单个孩子延伸变成“a1”和“A1”</p>
<p>依次类推，到了叶子结点，便是四种情况，这和求一棵树的所有从根到叶子结点的路径很像，这里的叶子结点也相当于路径，</p>
<p>不同的是，在这里的结点时边建立，边遍历（实际遍历的是字符串）的。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCasePermutation</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        dfs(<span class="string">""</span>, <span class="number">0</span>, ans, S);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以后初值为空来传路径，初值为叶，容易出问题，而且麻烦些</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> str, <span class="keyword">int</span> index, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans, <span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//叶结点为目的地</span></span><br><span class="line">        <span class="keyword">if</span>(index == S.length()) &#123;</span><br><span class="line">            ans.push_back(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S[index] &gt;= <span class="string">'0'</span> &amp;&amp; S[index] &lt;= <span class="string">'9'</span>) &#123; <span class="comment">//如果当前为数字</span></span><br><span class="line">            dfs(str + S[index], index + <span class="number">1</span>, ans, S);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果当前是字母</span></span><br><span class="line">            dfs(str + S[index], index + <span class="number">1</span>, ans, S);</span><br><span class="line">            <span class="keyword">if</span>(S[index] &gt;= <span class="string">'A'</span> &amp;&amp; S[index] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">                <span class="comment">//走两边，这是另一边，如果是大写，换小写</span></span><br><span class="line">                <span class="keyword">char</span> a = S[index] - <span class="string">'A'</span> + <span class="string">'a'</span>;</span><br><span class="line">                dfs(str + a, index + <span class="number">1</span>, ans, S);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//小写</span></span><br><span class="line">                <span class="keyword">char</span> a = S[index] - <span class="string">'a'</span> + <span class="string">'A'</span>;</span><br><span class="line">                dfs(str + a, index + <span class="number">1</span>, ans, S);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>860. 柠檬水找零</title>
    <url>/2020/04/08/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/860.%20%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6/</url>
    <content><![CDATA[<h1 id="860-柠檬水找零"><a href="#860-柠檬水找零" class="headerlink" title="860. 柠檬水找零"></a><a href="https://leetcode-cn.com/problems/lemonade-change/" target="_blank" rel="noopener">860. 柠檬水找零</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200409214707773.png" alt="image-20200409214707773"></p>
</blockquote>
<p>贪心的点在于20找零时优先用10块的找。其余的地方由于价格固定，面值固定，所以找钱方式也固定，所以可以以记录数量的方式求解</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">lemonadeChange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bills)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> five = <span class="number">0</span>, ten = <span class="number">0</span>, twenty = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bills.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(bills[i] == <span class="number">5</span>) &#123;</span><br><span class="line">                five++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(bills[i] == <span class="number">10</span>) &#123;</span><br><span class="line">                five--;</span><br><span class="line">                ten++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(bills[i] == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ten &gt; <span class="number">0</span>) &#123;  <span class="comment">//优先10元找零</span></span><br><span class="line">                    ten--;</span><br><span class="line">                    five--;</span><br><span class="line">                    twenty++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    five -= <span class="number">3</span>;</span><br><span class="line">                    twenty++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(five &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>861. 翻转矩阵后的得分</title>
    <url>/2020/04/13/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/861.%20%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5%E5%90%8E%E7%9A%84%E5%BE%97%E5%88%86/</url>
    <content><![CDATA[<h1 id="861-翻转矩阵后的得分"><a href="#861-翻转矩阵后的得分" class="headerlink" title="861. 翻转矩阵后的得分"></a><a href="https://leetcode-cn.com/problems/score-after-flipping-matrix/" target="_blank" rel="noopener">861. 翻转矩阵后的得分</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200413101810868.png" alt="image-20200413101810868"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//第一列（行变换）先全部变1，其他列再以1多来变化（仅列变化）</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">matrixScore</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size_r = A.<span class="built_in">size</span>(); <span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> size_c = A[<span class="number">0</span>].<span class="built_in">size</span>(); <span class="comment">//列数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size_c; j++) &#123;</span><br><span class="line">                    A[i][j] = (A[i][j] == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>); <span class="comment">//取反 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nums</span><span class="params">(size_c, <span class="number">0</span>)</span></span>;  <span class="comment">//记录每一列1的数量</span></span><br><span class="line">        nums[<span class="number">0</span>] = size_r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size_c; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size_r; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(A[j][i] == <span class="number">1</span>) nums[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; size_r - nums[i]) nums[i] = size_r - nums[i];  <span class="comment">//取多数更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_c; i++) &#123;</span><br><span class="line">            ans = ans + nums[i] * <span class="built_in">pow</span>(<span class="number">2</span>, size_c - i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>874. 模拟行走机器人</title>
    <url>/2020/04/11/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/874.%20%E6%A8%A1%E6%8B%9F%E8%A1%8C%E8%B5%B0%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<h1 id="874-模拟行走机器人"><a href="#874-模拟行走机器人" class="headerlink" title="874. 模拟行走机器人"></a><a href="https://leetcode-cn.com/problems/walking-robot-simulation/" target="_blank" rel="noopener">874. 模拟行走机器人</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200411172621772.png" alt="image-20200411172621772"></p>
</blockquote>
<p>用set存数组还能查找，以及dir的变化方式，逆时针一位相当于顺时针一圈少一位。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//我一直有个困惑是不知道如何搜索障碍物坐标，原来可以通过map实现！</span></span><br><span class="line">    <span class="comment">//其次，可以用增量数组来表示方向</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">robotSim</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; commands, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacles)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dd = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;  <span class="comment">//增量数组，0123分别代表北东南西</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>; <span class="comment">//记录答案</span></span><br><span class="line">        <span class="keyword">int</span> dir = <span class="number">0</span>;  <span class="comment">//起始向北</span></span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ob;  <span class="comment">//用set存储障碍物，便可以直接用set找</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = obstacles.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            ob.insert(obstacles[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">size</span> = commands.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;  <span class="comment">//记录位置</span></span><br><span class="line">        <span class="comment">//走路</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(commands[i] == <span class="number">-2</span>) &#123;  <span class="comment">//向左</span></span><br><span class="line">                dir = (dir + <span class="number">3</span>) % <span class="number">4</span>;  <span class="comment">//解释一下，到前面那个，相当于转一圈减一（4-1）</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(commands[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">                dir = (dir + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">//移动</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; commands[i]; j++) &#123;  <span class="comment">//每一步都要看有无障碍物</span></span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = &#123;dd[dir][<span class="number">0</span>] + pos[<span class="number">0</span>], dd[dir][<span class="number">1</span>] + pos[<span class="number">1</span>]&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(ob.count(next) != <span class="number">0</span>) <span class="keyword">break</span>;  <span class="comment">//如果是障碍</span></span><br><span class="line">                    pos = next;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, pos[<span class="number">0</span>] * pos[<span class="number">0</span>] + pos[<span class="number">1</span>] * pos[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>877. 石子游戏</title>
    <url>/2020/04/21/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/877.%20%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="877-石子游戏"><a href="#877-石子游戏" class="headerlink" title="877. 石子游戏"></a><a href="https://leetcode-cn.com/problems/stone-game/" target="_blank" rel="noopener">877. 石子游戏</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200421183438898.png" alt="image-20200421183438898"></p>
</blockquote>
<p>博弈类的题目，如果不看题中的约束条件：</p>
<p>以labuladong大佬的说法来做：</p>
<p>本题参考labuladong大佬的题解，做了简化和排版，便于直接阅读，再次感谢labuladong大佬！</p>
<p><a href="https://leetcode-cn.com/problems/stone-game/solution/jie-jue-bo-yi-wen-ti-de-dong-tai-gui-hua-tong-yong/" target="_blank" rel="noopener">dong佬题解</a></p>
<ul>
<li><p>状态：开始索引；结束索引；当前轮到的人</p>
</li>
<li><p>选择：选最左边，选最右边</p>
</li>
<li><p>dp数组含义：$dp[i][j][fir|sec]$表示i~j堆先手（fir）或后手（sec）的最高分数</p>
</li>
<li><p>状态转移方程：</p>
<p>  $dp[i][j][fir|sec]  \begin{cases} dp[i][j][fir] = max{dp[i+1][j][sec] + piles[i], dp[i][j-1][sec] + piles[j]} \ dp[i][j][sec] = \begin{cases} dp[i+1][j][fir]&amp;先手选择左边 \ dp[i][j-1][fir]&amp; 先手选择右边\end{cases} \end{cases}$</p>
</li>
</ul>
<blockquote>
<p>不得不说，这里有点难理解</p>
<p>对于先手，$dp[i][j][fir] = max{dp[i+1][j][sec] + piles[i], dp[i][j-1][sec] + piles[j]}$</p>
<p>代表两种情况：</p>
<ol>
<li>我作为先手先选左边那堆，然后就是以i + 1 ~ j的后手状态，即$dp[i+1][j][sec]$</li>
<li>我作为先手先选右边那堆，然后就是以i ~ j - 1的后手状态，即$dp[i][j-1][sec]$</li>
</ol>
<p>对于后手，$dp[i][j][sec] = \begin{cases} dp[i+1][j][fir]&amp;先手选择左边 \ dp[i][j-1][fir]&amp; 先手选择右边\end{cases}$</p>
<p>这里相对容易理解：</p>
<ol>
<li>先手选左边那堆，我作为后手相当于以i + 1 ~ j的先手状态，即$dp[i+1][j][fir]$</li>
<li>先手选右边那堆，我作为后手相当于以i ~ j - 1的先手状态，即$dp[i][j-1][fir]$</li>
</ol>
</blockquote>
<ul>
<li><p>base case:</p>
<p>  $dp[i][i][fir] = piles[i],dp[i][i][sec] = 0$</p>
</li>
<li><p>遍历方式：</p>
<p>  在dp结果表中看，base case就是对角线部分，而每一个$dp[i][j]$依赖于$dp[i+1][j]和dp[i][j-1]$,即左边和下面</p>
<p>  所以应该按照对角线来遍历。</p>
</li>
<li><p>代码：</p>
<p>  把上面的东西理清，就可以开始写代码了：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pair</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> fir;</span><br><span class="line">        <span class="keyword">int</span> sec;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">stoneGame</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; piles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = piles.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Pair&gt;&gt; <span class="title">dp</span><span class="params">(<span class="built_in">size</span>, <span class="built_in">vector</span>&lt;Pair&gt;(<span class="built_in">size</span>))</span></span>;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            dp[i][i].fir = piles[i];</span><br><span class="line">            dp[i][i].sec = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; <span class="built_in">size</span>; l++) &#123;<span class="comment">//当前斜列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - l; i++) &#123; <span class="comment">//行号,注意是size-l,不是size-1！！！</span></span><br><span class="line">                <span class="keyword">int</span> j = i + l;<span class="comment">//列号</span></span><br><span class="line">                <span class="keyword">int</span> left = piles[i] + dp[i + <span class="number">1</span>][j].sec;</span><br><span class="line">                <span class="keyword">int</span> right = piles[j] + dp[i][j - <span class="number">1</span>].sec;</span><br><span class="line">                <span class="comment">// 套用状态转移方程</span></span><br><span class="line">                <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">                    dp[i][j].fir = left;</span><br><span class="line">                    dp[i][j].sec = dp[i+<span class="number">1</span>][j].fir;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j].fir = right;</span><br><span class="line">                    dp[i][j].sec = dp[i][j<span class="number">-1</span>].fir;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="built_in">size</span> - <span class="number">1</span>].fir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>921. 使括号有效的最少添加</title>
    <url>/2020/04/13/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/921.%20%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<h1 id="921-使括号有效的最少添加"><a href="#921-使括号有效的最少添加" class="headerlink" title="921. 使括号有效的最少添加"></a><a href="https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid/" target="_blank" rel="noopener">921. 使括号有效的最少添加</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200413104207628.png" alt="image-20200413104207628"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//左括号数记录，每来一个右括号，抵消一个左括号数，如果没有则ans++</span></span><br><span class="line">    <span class="comment">//这其实类似于用栈做，但是由于题目特殊性，用数字记录即可</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minAddToMakeValid</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = S.length();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(S[i] == <span class="string">'('</span>) left++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(left == <span class="number">0</span>) ans++;</span><br><span class="line">                <span class="keyword">else</span> left--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += left;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>993. 二叉树的堂兄弟节点</title>
    <url>/2020/04/07/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/993.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A0%82%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="993-二叉树的堂兄弟节点"><a href="#993-二叉树的堂兄弟节点" class="headerlink" title="993. 二叉树的堂兄弟节点"></a>993. 二叉树的堂兄弟节点</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/" target="_blank" rel="noopener">993. 二叉树的堂兄弟节点</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200407210321383.png" alt="image-20200407210321383">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200407210334459.png" alt="image-20200407210334459"></p>
</blockquote>
<p>最直接的思路就是求出各自高度，以及各自父节点，然后对比判断</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//求深度（由最上往下数）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_depth</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth, <span class="keyword">int</span>&amp; ans, <span class="keyword">int</span> id)</span> </span>&#123;  <span class="comment">//id为目标结点的ID</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(id == root-&gt;val) &#123;  <span class="comment">//到达就收手</span></span><br><span class="line">            ans = depth;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        get_depth(root-&gt;left, depth + <span class="number">1</span>, ans, id);</span><br><span class="line">        get_depth(root-&gt;right, depth + <span class="number">1</span>, ans, id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求父节点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_father</span><span class="params">(TreeNode* root, <span class="keyword">int</span> id, <span class="keyword">int</span>&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">NULL</span> &amp;&amp; root-&gt;left-&gt;val == id) &#123;</span><br><span class="line">            ans = root-&gt;val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right != <span class="literal">NULL</span> &amp;&amp; root-&gt;right-&gt;val == id) &#123;</span><br><span class="line">            ans = root-&gt;val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        get_father(root-&gt;left, id, ans);</span><br><span class="line">        get_father(root-&gt;right, id, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isCousins</span><span class="params">(TreeNode* root, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d_x = <span class="number">0</span>, d_y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> f_x = <span class="number">0</span>, f_y = <span class="number">0</span>;</span><br><span class="line">        get_depth(root, <span class="number">1</span>, d_x, x), get_father(root, x, f_x);</span><br><span class="line">        get_depth(root, <span class="number">1</span>, d_y, y), get_father(root, y, f_y);</span><br><span class="line">        <span class="keyword">if</span>(f_x != f_y &amp;&amp; d_x == d_y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不得不说，它的效率还算可以：4ms，10.9mb</p>
<p>当然，我的主要任务是训练bfs，所以用bfs实现一遍：</p>
<p>其主要难点是判断是否为同一父节点，判断方法在别人那里看到的，可以mark一下：</p>
<blockquote>
<p>如果在某一深度的搜索结果：</p>
<p>x, y都没有找到，则进行下一深度的查找<br>x, y只找到一个，则直接return false<br>x, y两个都找到了，现在需要判断他们出现的位置。<br>如果他们出现的位置之间相隔距离大于1，则可以说明他们的父节点不是同一个<br>如果他们出现的位置刚好等于1，那么只要较大位置索引为偶数即说明他们的父节点不是同一个 //<br>否则 return false</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>994. 腐烂的橘子</title>
    <url>/2020/04/08/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/994.%20%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/</url>
    <content><![CDATA[<h1 id="994-腐烂的橘子"><a href="#994-腐烂的橘子" class="headerlink" title="994. 腐烂的橘子"></a><a href="https://leetcode-cn.com/problems/rotting-oranges/" target="_blank" rel="noopener">994. 腐烂的橘子</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200408170953273.png" alt="image-20200408170953273"></p>
</blockquote>
<p>emm,一道非常标准的BFS题，没啥好讲的，还是多练练手。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//增量数组</span></span><br><span class="line">    <span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num_inq = <span class="number">0</span>;  <span class="comment">//记录入过队的橘子数</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;  <span class="comment">//记录橘子数量</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">inq</span><span class="params">(grid.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(grid[<span class="number">0</span>].<span class="built_in">size</span>(), <span class="literal">false</span>))</span></span>;</span><br><span class="line">        <span class="comment">//先找为所有为2的入队（第一层）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) num++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                    Node node;</span><br><span class="line">                    node.x = i, node.y = j;</span><br><span class="line">                    inq[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(node);</span><br><span class="line">                    num_inq++;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(num_inq == num) <span class="keyword">break</span>;  <span class="comment">//必须特判，因为最后一次虽然所有的都烂了，但队列中仍有要继续遍历，只不过啥都访问不到了</span></span><br><span class="line">            ans++;  <span class="comment">//遍历一层</span></span><br><span class="line">            <span class="comment">//一次一层</span></span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                Node top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="comment">//访问上下左右</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = top.x + X[j];</span><br><span class="line">                    <span class="keyword">int</span> y = top.y + Y[j];</span><br><span class="line">                    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= grid.<span class="built_in">size</span>() || y &lt; <span class="number">0</span> || y &gt;= grid[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">continue</span>;  <span class="comment">//判断是否越界</span></span><br><span class="line">                    <span class="keyword">if</span>(inq[x][y] == <span class="literal">false</span> &amp;&amp; grid[x][y] == <span class="number">1</span>) &#123; <span class="comment">//没访问过，没腐烂</span></span><br><span class="line">                        grid[x][y] = <span class="number">2</span>;</span><br><span class="line">                        inq[x][y] = <span class="literal">true</span>;</span><br><span class="line">                        Node node;</span><br><span class="line">                        node.x = x, node.y = y;</span><br><span class="line">                        q.push(node);</span><br><span class="line">                        num_inq++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num_inq == num) <span class="keyword">return</span> ans;  <span class="comment">//所有橘子都烂了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//并未全烂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>两地调度</title>
    <url>/2020/03/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E4%B8%A4%E5%9C%B0%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="两地调度"><a href="#两地调度" class="headerlink" title="两地调度"></a>两地调度</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/two-city-scheduling/" target="_blank" rel="noopener">两地调度</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200322171245265.png" alt="image-20200322171245265"></p>
</blockquote>
<p>重在对每个元素的A-B排序，又见识sort的新用法。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">twoCitySchedCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Sort by a gain which company has </span></span><br><span class="line">        <span class="comment">// by sending a person to city A and not to city B</span></span><br><span class="line">        sort(<span class="built_in">begin</span>(costs), <span class="built_in">end</span>(costs),</span><br><span class="line">                [](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;o1, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;o2) &#123;</span><br><span class="line">            <span class="keyword">return</span> (o1[<span class="number">0</span>] - o1[<span class="number">1</span>] &lt; o2[<span class="number">0</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = costs.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// To optimize the company expenses,</span></span><br><span class="line">        <span class="comment">// send the first n persons to the city A</span></span><br><span class="line">        <span class="comment">// and the others to the city B</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) total += costs[i][<span class="number">0</span>] + costs[i + n][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>买苹果</title>
    <url>/2020/03/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E4%B9%B0%E8%8B%B9%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="买苹果"><a href="#买苹果" class="headerlink" title="买苹果"></a>买苹果</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/how-many-apples-can-you-put-into-the-basket/" target="_blank" rel="noopener">买苹果</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200322083438343.png" alt="image-20200322083438343"></p>
</blockquote>
<p>太水了。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//贪心策略：每次都放最小的</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxNumberOfApples</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> volume = <span class="number">5000</span>;</span><br><span class="line">        sort(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            volume -= arr[i];</span><br><span class="line">            <span class="keyword">if</span>(volume &gt;= <span class="number">0</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>全排列</title>
    <url>/2020/03/20/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/permutations/submissions/" target="_blank" rel="noopener">全排列</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320181420655.png" alt="image-20200320181420655"></p>
</blockquote>
<p>回溯模板的使用！这里面不用start，记得和幂集里区分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">permute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        dfs(nums, now);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now)</span> </span>&#123; <span class="comment">//不用start参数，因为是求排列，这里用过，那里也可以用</span></span><br><span class="line">        <span class="comment">//叶结点才放</span></span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ans.push_back(now);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//可选择列表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//选择，要原来没有选过才行（也可以用一个vis数组实现）</span></span><br><span class="line">            <span class="comment">//vector没有find函数，依靠algorithm的find函数实现</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(now.<span class="built_in">begin</span>(), now.<span class="built_in">end</span>(), nums[i]) == now.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                now.push_back(nums[i]); <span class="comment">//没找到才加进去</span></span><br><span class="line">                dfs(nums, now);</span><br><span class="line">                <span class="comment">//撤回</span></span><br><span class="line">                now.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>全排列II</title>
    <url>/2020/03/20/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%85%A8%E6%8E%92%E5%88%97II/</url>
    <content><![CDATA[<h1 id="全排列II"><a href="#全排列II" class="headerlink" title="全排列II"></a>全排列II</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/permutations-ii/" target="_blank" rel="noopener">全排列II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320191625582.png" alt="image-20200320191625582"></p>
</blockquote>
<p>重点是它的去重方法，要仔细看清！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">permuteUnique</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我觉得是同理，和那个幂集II，先排序，选的时候，跳过后面相同的</span></span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(nums.<span class="built_in">size</span>(), <span class="number">0</span>)</span></span>;<span class="comment">//需要一个访问数组，因为有重复元素</span></span><br><span class="line">        dfs(nums, now, vis);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == now.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ans.push_back(now);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选择列表</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> r = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i] == <span class="number">0</span>) &#123;<span class="comment">//没用过</span></span><br><span class="line">                <span class="keyword">if</span>(nums[i] != r)&#123;  <span class="comment">//去重</span></span><br><span class="line">                    r = nums[i];   <span class="comment">//比用while循环i++要好！</span></span><br><span class="line">                    now.push_back(nums[i]);</span><br><span class="line">                    vis[i] = <span class="number">1</span>;</span><br><span class="line">                    dfs(nums, now, vis);</span><br><span class="line">                    <span class="comment">//撤销</span></span><br><span class="line">                    now.pop_back();</span><br><span class="line">                    vis[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>分割平衡字符串</title>
    <url>/2020/03/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="分割平衡字符串"><a href="#分割平衡字符串" class="headerlink" title="分割平衡字符串"></a>分割平衡字符串</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/" target="_blank" rel="noopener">分割平衡字符串</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200322081208830.png" alt="image-20200322081208830"></p>
</blockquote>
<p>这题比较简单，没啥好说的，就普通的数学思维便可以想出来</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//要最大的话，每找到一对，就开始分割</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">balancedStringSplit</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> R_nums = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> L_nums = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'R'</span>) &#123;  <span class="comment">//为R</span></span><br><span class="line">                <span class="keyword">if</span>(R_nums + <span class="number">1</span> == L_nums) &#123;</span><br><span class="line">                    R_nums = <span class="number">0</span>;</span><br><span class="line">                    L_nums = <span class="number">0</span>;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    R_nums++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;        <span class="comment">//为L</span></span><br><span class="line">                <span class="keyword">if</span>(R_nums == L_nums + <span class="number">1</span>) &#123;</span><br><span class="line">                    R_nums = <span class="number">0</span>;</span><br><span class="line">                    L_nums = <span class="number">0</span>;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    L_nums++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但是我的解法很啰嗦，看了一个和我思路一致，但是更为简洁的做法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//要最大的话，每找到一对，就开始分割</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">balancedStringSplit</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> balance = <span class="number">0</span>; <span class="comment">//balance为R的个数减L的个数</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'R'</span>) balance++;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'L'</span>) balance--;</span><br><span class="line">            <span class="keyword">if</span>(balance == <span class="number">0</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>删列造序</title>
    <url>/2020/03/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%88%A0%E5%88%97%E9%80%A0%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="删列造序"><a href="#删列造序" class="headerlink" title="删列造序"></a>删列造序</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/delete-columns-to-make-sorted/" target="_blank" rel="noopener">删列造序</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200322154346228.png" alt="image-20200322154346228"></p>
</blockquote>
<p>没啥好说的。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDeletionSize</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A[<span class="number">0</span>].length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = A[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; A.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(A[j][i] &lt; A[j - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) ans++;  <span class="comment">//需要删除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>690. 员工的重要性</title>
    <url>/2020/04/07/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
    <content><![CDATA[<h1 id="员工的重要性"><a href="#员工的重要性" class="headerlink" title="员工的重要性"></a>员工的重要性</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/employee-importance/" target="_blank" rel="noopener">690. 员工的重要性</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200407161753393.png" alt="image-20200407161753393"></p>
</blockquote>
<p>好久没做，还真是有点生疏，不过这题也挺好，一下子复习了DFS，BFS和树的遍历</p>
<p>BFS做法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Employee info</span></span><br><span class="line"><span class="comment">class Employee &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    // It's the unique ID of each node.</span></span><br><span class="line"><span class="comment">    // unique id of this employee</span></span><br><span class="line"><span class="comment">    int id;</span></span><br><span class="line"><span class="comment">    // the importance value of this employee</span></span><br><span class="line"><span class="comment">    int importance;</span></span><br><span class="line"><span class="comment">    // the id of direct subordinates</span></span><br><span class="line"><span class="comment">    vector&lt;int&gt; subordinates;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//是所有下属，并非所有直系下属</span></span><br><span class="line">    <span class="comment">//id也不是序号加1，有可能是其他的，题目有误导成分</span></span><br><span class="line">    <span class="comment">//bfs实现</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(<span class="built_in">vector</span>&lt;Employee*&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先找到对应id</span></span><br><span class="line">        Employee* e;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; employees.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(id == employees[i]-&gt;id) e = employees[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = e-&gt;importance;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(e-&gt;subordinates)</span></span>;</span><br><span class="line">        <span class="comment">//入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sub.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            q.push(sub[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> top = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="comment">//找到该节点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; employees.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(top == employees[i]-&gt;id) e = employees[i];</span><br><span class="line">            &#125;</span><br><span class="line">            ans += e-&gt;importance; <span class="comment">//关键</span></span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(e-&gt;subordinates)</span></span>;</span><br><span class="line">            <span class="comment">//入队</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sub.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                q.push(sub[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>DFS做法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Employee info</span></span><br><span class="line"><span class="comment">class Employee &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    // It's the unique ID of each node.</span></span><br><span class="line"><span class="comment">    // unique id of this employee</span></span><br><span class="line"><span class="comment">    int id;</span></span><br><span class="line"><span class="comment">    // the importance value of this employee</span></span><br><span class="line"><span class="comment">    int importance;</span></span><br><span class="line"><span class="comment">    // the id of direct subordinates</span></span><br><span class="line"><span class="comment">    vector&lt;int&gt; subordinates;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//是所有下属，并非所有直系下属</span></span><br><span class="line">    <span class="comment">//id也不是序号加1，有可能是其他的，题目有误导成分</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">//写法一：</span></span><br><span class="line">    <span class="comment">//实际就是一个多叉树求某父节点的所有子节点及自己的val值之和</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(<span class="built_in">vector</span>&lt;Employee*&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先找到对应id</span></span><br><span class="line">        Employee* e;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; employees.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(id == employees[i]-&gt;id) e = employees[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//累加，就是先序遍历，访问头结点</span></span><br><span class="line">        <span class="keyword">int</span> ans = e-&gt;importance;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(e-&gt;subordinates)</span></span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sub.<span class="built_in">size</span>(); i++) &#123;  </span><br><span class="line">            ans += getImportance(employees, sub[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//写法二：</span></span><br><span class="line">    <span class="comment">//以上的写法不是我的风格，我喜欢无返回值写法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;Employee*&gt;&amp; employees, <span class="keyword">int</span> id, <span class="keyword">int</span>&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先找到对应id</span></span><br><span class="line">        Employee* e;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; employees.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(id == employees[i]-&gt;id) e = employees[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//累加，就是先序遍历，访问头结点</span></span><br><span class="line">        ans += e-&gt;importance;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(e-&gt;subordinates)</span></span>; </span><br><span class="line">        <span class="comment">//然后访问其子节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sub.<span class="built_in">size</span>(); i++) &#123;  </span><br><span class="line">            dfs(employees, sub[i], ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(<span class="built_in">vector</span>&lt;Employee*&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        dfs(employees, id, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>幂集</title>
    <url>/2020/03/20/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%B9%82%E9%9B%86/</url>
    <content><![CDATA[<h1 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/power-set-lcci/" target="_blank" rel="noopener">幂集</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320161703941.png" alt="image-20200320161703941"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//相当于任何一个结点都有一个和其一样的叶孩子结点（分支为选与不选）</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(<span class="built_in">size</span>, <span class="number">0</span>)</span></span>;  <span class="comment">//vector可以动态定义数组大小,这一点好用</span></span><br><span class="line">        dfs(ans, now, vis, nums);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根节点为空集</span></span><br><span class="line">    <span class="comment">//ans为传递的答案，now为当前结点的元素，num为父集</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; ans, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先判断是否满了</span></span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">size</span>() &gt; nums.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//没满添加答案</span></span><br><span class="line">        ans.push_back(now);</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//遍历下一种情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i] == <span class="number">0</span>) &#123; <span class="comment">//未访问</span></span><br><span class="line">                vis[i] = <span class="number">1</span>;    <span class="comment">//这里不用换一个新的vis是因为下一次使用时，该元素不可以再用（&#123;1,2&#125;=&#123;2,1&#125;）</span></span><br><span class="line">                <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">now_temp</span><span class="params">(now)</span></span>;   <span class="comment">//now_temp必须用新的，不然下一个用就是这里使用过的，导致结果不对</span></span><br><span class="line">                now_temp.push_back(nums[i]); </span><br><span class="line">                dfs(ans, now_temp, vis, nums);  <span class="comment">//不断往下</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>做出题目容易，但是更为重要的是改掉那些错误的习惯！</p>
<p>改进算法：</p>
<p>（正宗回溯模板（选与不选））</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;<span class="comment">//似乎他们都不会把答案作为递归参数来传，那么以后也不要那样做了，用一个全局变量!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录走过的路径</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; track;</span><br><span class="line">    backtrack(nums, <span class="number">0</span>, track);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; track)</span> </span>&#123;</span><br><span class="line">    res.push_back(track);</span><br><span class="line">    <span class="comment">// 注意 i 从 start 开始递增</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.push_back(nums[i]);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        backtrack(nums, i + <span class="number">1</span>, track);</span><br><span class="line">        <span class="comment">// 撤销选择，对下一个进行选择或不选择</span></span><br><span class="line">        track.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己默写了一遍。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;  <span class="comment">//以后答案不作为递归参数传参</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        dfs(nums, <span class="number">0</span>, now);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对当前元素选与不选,以start为起始当前序号,now记录当前路径</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now)</span> </span>&#123;</span><br><span class="line">        ans.push_back(now);  <span class="comment">//直接添加</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            now.push_back(nums[i]);</span><br><span class="line">            <span class="comment">//选</span></span><br><span class="line">            dfs(nums, i + <span class="number">1</span>, now);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            now.pop_back();<span class="comment">//撤销选择，即不选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>幂集II</title>
    <url>/2020/03/20/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E5%B9%82%E9%9B%86II/</url>
    <content><![CDATA[<h1 id="幂集II"><a href="#幂集II" class="headerlink" title="幂集II"></a>幂集II</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/subsets-ii/" target="_blank" rel="noopener">幂集II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320163759605.png" alt="image-20200320163759605"></p>
</blockquote>
<p>个人做法：</p>
<p>我在原题目的基础上，每添加一个都看看前面有没有重复的，有重复的边不添加(过于暴力，复杂度极高)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//他人思路：</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    先将nums数组排序</span></span><br><span class="line"><span class="comment">    排序后处理逻辑同题目： 78. 子集， 有略微区别</span></span><br><span class="line"><span class="comment">    当选择某个数的时候，处理方式和题目78相同；当不选择某个数的时候，将后续相等的数字一并跳过。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于任何一个结点都有一个和其一样的叶孩子结点（分支为选与不选）</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsetsWithDup</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(<span class="built_in">size</span>, <span class="number">0</span>)</span></span>;  <span class="comment">//vector可以动态定义数组大小,这一点好用</span></span><br><span class="line">        dfs(ans, now, vis, nums);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根节点为空集</span></span><br><span class="line">    <span class="comment">//ans为传递的答案，now为当前结点的元素，num为父集</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; ans, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先判断是否满了</span></span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">size</span>() &gt; nums.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//唯一想到的办法是添加时判断是否重复，不过复杂度高。。</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = ans.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isSame(ans[i], now)) flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没满且不重复添加答案</span></span><br><span class="line">        <span class="keyword">if</span>(flag) ans.push_back(now);</span><br><span class="line">        <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//遍历下一种情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i] == <span class="number">0</span>) &#123; <span class="comment">//未访问</span></span><br><span class="line">                vis[i] = <span class="number">1</span>;    <span class="comment">//这里不用换一个新的vis是因为下一次使用时，该元素不可以再用（&#123;1,2&#125;=&#123;2,1&#125;）</span></span><br><span class="line">                <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">now_temp</span><span class="params">(now)</span></span>;   <span class="comment">//now_temp必须用新的，不然下一个用就是这里使用过的，导致结果不对</span></span><br><span class="line">                now_temp.push_back(nums[i]); </span><br><span class="line">                dfs(ans, now_temp, vis, nums);  <span class="comment">//不断往下</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSame</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size1 = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> size2 = b.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(size1 != size2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//先排序</span></span><br><span class="line">            sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">            sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size1; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] != b[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>改进：</p>
<p>  先将nums数组排序</p>
<p>  排序后处理逻辑同题目： 78. 子集， 有略微区别</p>
<p>  当选择某个数的时候，处理方式和题目78相同；当不选择某个数的时候，将后续相等的数字一并跳过。</p>
<p>​    看了他的代码后，我才意识到自己原来写的代码并不好理解，我没有很好体现选与不选的概念，进入dfs函数就是选了的情    况，而他的则是在进入dfs函数后决定选和不选，这样不用像我那样设置一个vis数组，也更加方便！</p>
<p>​    我也意识到自己的写法还需要改进！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;  <span class="comment">//以后答案不作为递归参数传参</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsetsWithDup</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        dfs(nums, <span class="number">0</span>, now);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对当前元素选与不选,以start为起始当前序号,now记录当前路径</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now)</span> </span>&#123;</span><br><span class="line">        ans.push_back(now);  <span class="comment">//直接添加</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; <span class="built_in">size</span>; i++) &#123;  <span class="comment">//选择列表</span></span><br><span class="line">            now.push_back(nums[i]);</span><br><span class="line">            <span class="comment">//选</span></span><br><span class="line">            dfs(nums, i + <span class="number">1</span>, now);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            now.pop_back();<span class="comment">//撤销选择，即不选</span></span><br><span class="line">            <span class="comment">//往后相同的数跳过</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; <span class="built_in">size</span> - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>括号</title>
    <url>/2020/03/20/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/bracket-lcci/" target="_blank" rel="noopener">括号</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320114042809.png" alt="image-20200320114042809"></p>
</blockquote>
<p>还是一样，要看做一棵解空间树<br>左边第一个一定是左括号（根节点），然后往下递归遍历时，记录左括号和右括号数，左括号可以直接加（前提是还能放右括号），放右括号前提是左括号数大于当前右括号数且还能放右括号。<br>这里面之所以可以遍历完所有情况是因为在每一个选择时都做了分支（就是所谓的解空间树），叶结点就是所有的结果</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给我的理解，左边第一个一定是左括号，</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        dfs(ans, <span class="string">"("</span>, <span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//left_num为左括号数，right_num为右括号数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans, <span class="built_in">string</span> str, <span class="keyword">int</span> left_num, <span class="keyword">int</span> right_num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left_num + right_num == n*<span class="number">2</span>) &#123;</span><br><span class="line">            ans.push_back(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选择列表</span></span><br><span class="line">        <span class="comment">//放括号</span></span><br><span class="line">        <span class="keyword">if</span>(left_num &lt; n) dfs(ans, str + <span class="string">"("</span>, left_num + <span class="number">1</span>, right_num, n);  <span class="comment">//放左括号</span></span><br><span class="line">        <span class="keyword">if</span>(right_num &lt; n &amp;&amp; left_num &gt; right_num) dfs(ans, str + <span class="string">")"</span>, left_num, right_num + <span class="number">1</span>, n); <span class="comment">//放右括号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>无重复字符串的排列组合</title>
    <url>/2020/03/20/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1 id="无重复字符串的排列组合"><a href="#无重复字符串的排列组合" class="headerlink" title="无重复字符串的排列组合"></a>无重复字符串的排列组合</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/permutation-i-lcci/" target="_blank" rel="noopener">无重复字符串的排列组合</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320105100315.png" alt="image-20200320105100315"></p>
</blockquote>
<p>思路还是那样，用dfs遍历所有的结果树，这张图非常好的阐述了我的思路：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200320105157167.png" alt="image-20200320105157167"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//就是一个全排列问题，dfs可以解决</span></span><br><span class="line">    <span class="comment">//相当于多个解空间树，每个树的根节点是S中的每个元素，然后遍历得到结果</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">permutation</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = S.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123; <span class="comment">//以每个字母为根遍历</span></span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(ans, S.substr(i, <span class="number">1</span>), vis, S);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//str为拼接的字符串，ans为传递的结果，vis是访问数组，确定某个元素是否访问过</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans, <span class="built_in">string</span> str, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis, <span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//满了</span></span><br><span class="line">        <span class="keyword">if</span>(str.length() == S.length()) &#123;</span><br><span class="line">            ans.push_back(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = S.length();</span><br><span class="line">        <span class="comment">//然后是分支选择</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i] == <span class="number">0</span>) &#123;<span class="comment">//未访问过</span></span><br><span class="line">                <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">temp</span><span class="params">(vis)</span></span>; <span class="comment">//不能直接传vis,否则下一个分支会接着这个用，导致结果错误</span></span><br><span class="line">                temp[i] = <span class="number">1</span>;</span><br><span class="line">                dfs(ans, str + S[i], temp, S);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>最后一块石头的重量</title>
    <url>/2020/03/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/</url>
    <content><![CDATA[<h1 id="最后一块石头的重量"><a href="#最后一块石头的重量" class="headerlink" title="最后一块石头的重量"></a>最后一块石头的重量</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/last-stone-weight/" target="_blank" rel="noopener">最后一块石头的重量</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200322163436097.png" alt="image-20200322163436097"></p>
</blockquote>
<p>堆实现（优先队列）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//可以用大根堆来做，速度比排序快些</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stones.<span class="built_in">size</span>(); i++) q.push(stones[i]);</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            y = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            x = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(x != y) q.push(y - x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> q.top();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>排序实现：(要慢一些。。)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//可以用大根堆来做，速度比排序快些</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">while</span>(stones.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            sort(stones.<span class="built_in">begin</span>(), stones.<span class="built_in">end</span>());</span><br><span class="line">            y = stones[stones.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">            stones.pop_back();</span><br><span class="line">            x = stones[stones.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">            stones.pop_back();</span><br><span class="line">            <span class="keyword">if</span>(x != y) stones.push_back(y - x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stones.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> stones[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>玩筹码</title>
    <url>/2020/03/22/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E7%8E%A9%E7%AD%B9%E7%A0%81/</url>
    <content><![CDATA[<h1 id="玩筹码"><a href="#玩筹码" class="headerlink" title="玩筹码"></a>玩筹码</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/play-with-chips/" target="_blank" rel="noopener">玩筹码</a></p>
<p><img src="../../../../image/image-20200322154624893.png" alt="image-20200322154624893"></p>
</blockquote>
<p>思路见注释。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    题挺简单的，但是我做的时候不知道怎么就拐不过弯来（悲）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    在数轴上有一些砝码，输入他们的位置，找到移动的最小代价。</span></span><br><span class="line"><span class="comment">    其中偶数位置的到偶数位置的没有代价，奇数到奇数位置的没有代价（比如位置1到位置3不需要代价，2到4也不需要）</span></span><br><span class="line"><span class="comment">    那么在这个条件下就可以把所有奇数位置的砝码放到一个位置上（比如1,3,5三个位置上有一堆砝码，你可以全部堆在3位置上，反正不需要代价）</span></span><br><span class="line"><span class="comment">    于是在没有代价的情况下，我们就可以把所有偶数位置的砝码和奇数位置的砝码摆到连续的位置上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    其次，奇数到偶数和偶数到奇数的移动一个砝码就需要1代价</span></span><br><span class="line"><span class="comment">    于是再比较两者中谁的数量比较少，少的一侧有多少砝码就是对应的总代价。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    到这里，这个题就转换成了：遍历一次数组，找到其中有多少个奇数和偶数位置的砝码，取其中比较少的，就是答案</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostToMoveChips</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; chips)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums_1 = <span class="number">0</span>;  <span class="comment">//奇数位置个数</span></span><br><span class="line">        <span class="keyword">int</span> nums_2 = <span class="number">0</span>;  <span class="comment">//偶数位置个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chips.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(chips[i] % <span class="number">2</span> == <span class="number">0</span>) nums_2++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nums_1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(nums_1, nums_2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>课程表I&amp;II</title>
    <url>/2020/04/06/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E8%AF%BE%E7%A8%8B%E8%A1%A8I&amp;II/</url>
    <content><![CDATA[<h1 id="课程表I-amp-II"><a href="#课程表I-amp-II" class="headerlink" title="课程表I&amp;II"></a>课程表I&amp;II</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">课程表</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200406221944851.png" alt="image-20200406221944851"></p>
</blockquote>
<p>所谓的边缘列表有点扯，实际就是记录每条边:[end, start]，将其转换成邻接表形式，再用一个队列记录入度，便是套模板了<br>具体看注释。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">G</span><span class="params">(numCourses)</span></span>;  <span class="comment">//邻接表</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inDegree</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;<span class="comment">//记录入度</span></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> s,e;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisites.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            e = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">            s = prerequisites[i][<span class="number">1</span>];</span><br><span class="line">            G[s].push_back(e);</span><br><span class="line">            inDegree[e]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">//判断有无环（也就是可否学完课程）</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="comment">//所有入度为0的入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//核心算法--不断出队，对出队结点的所连结点入度减一，同时为零入队</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;  <span class="comment">//减一操作，同时为零入队</span></span><br><span class="line">                <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">                inDegree[v]--;</span><br><span class="line">                <span class="keyword">if</span>(inDegree[v] == <span class="number">0</span>) q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            G[u].<span class="built_in">clear</span>();  <span class="comment">//消除u的出边</span></span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == numCourses) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>看一下II：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener">课程表II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200406223138474.png" alt="image-20200406223138474"></p>
</blockquote>
<p>和之前做法几乎一致，唯一不同就是要输出顺序罢了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">G</span><span class="params">(numCourses)</span></span>;  <span class="comment">//邻接表</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inDegree</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;<span class="comment">//记录入度</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> s,e;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisites.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            e = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">            s = prerequisites[i][<span class="number">1</span>];</span><br><span class="line">            G[s].push_back(e);</span><br><span class="line">            inDegree[e]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">//判断有无环（也就是可否学完课程）</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="comment">//所有入度为0的入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//核心算法--不断出队，对出队结点的所连结点入度减一，同时为零入队</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            ans.push_back(u);  <span class="comment">//添加</span></span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;  <span class="comment">//减一操作，同时为零入队</span></span><br><span class="line">                <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">                inDegree[v]--;</span><br><span class="line">                <span class="keyword">if</span>(inDegree[v] == <span class="number">0</span>) q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            G[u].<span class="built_in">clear</span>();  <span class="comment">//消除u的出边</span></span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == numCourses) <span class="keyword">return</span> ans;  <span class="comment">//存拓扑序列</span></span><br><span class="line">        <span class="comment">//不存在,清空输出</span></span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 04.03. 特定深度节点链表</title>
    <url>/2020/04/08/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98%2004.03.%20%E7%89%B9%E5%AE%9A%E6%B7%B1%E5%BA%A6%E8%8A%82%E7%82%B9%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="面试题-04-03-特定深度节点链表"><a href="#面试题-04-03-特定深度节点链表" class="headerlink" title="面试题 04.03. 特定深度节点链表"></a><a href="https://leetcode-cn.com/problems/list-of-depth-lcci/" target="_blank" rel="noopener">面试题 04.03. 特定深度节点链表</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200408180545500.png" alt="image-20200408180545500"></p>
</blockquote>
<p>层序遍历思想，但是我犯了一个很小的错误！</p>
<p>创建对象指针时，要申请地址空间（new或malloc！！）</p>
<p>千万别再犯这个错误了！！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// //我觉得就是一个BFS层序遍历罢了</span></span><br><span class="line">    <span class="comment">// //这个虽然速度比下面的做法快，但是代码的特殊判断很不美观，造成代码可读性不好   </span></span><br><span class="line">    <span class="comment">// vector&lt;ListNode*&gt; listOfDepth(TreeNode* tree) &#123;</span></span><br><span class="line">    <span class="comment">//     vector&lt;ListNode*&gt; ans;</span></span><br><span class="line">    <span class="comment">//     queue&lt;TreeNode*&gt; q;</span></span><br><span class="line">    <span class="comment">//     q.push(tree);</span></span><br><span class="line">    <span class="comment">//     while(!q.empty()) &#123;</span></span><br><span class="line">    <span class="comment">//         ListNode* node = new ListNode();  //创建一个对象指针，必须用申请！！！</span></span><br><span class="line">    <span class="comment">//         node-&gt;val = q.front()-&gt;val;</span></span><br><span class="line">    <span class="comment">//         ans.push_back(node);  //提前就放，由于这是一个地址，所以哪怕后面会加，也没有关系，数据会在</span></span><br><span class="line">    <span class="comment">//         int size = q.size() - 1; //之所以减一，是因为第一个已经用了</span></span><br><span class="line">    <span class="comment">//         //第一个的子节点也要入队，但是size要在之前判断，否则不是一层</span></span><br><span class="line">    <span class="comment">//         if(q.front()-&gt;left != NULL) q.push(q.front()-&gt;left);</span></span><br><span class="line">    <span class="comment">//         if(q.front()-&gt;right != NULL) q.push(q.front()-&gt;right);</span></span><br><span class="line">    <span class="comment">//         q.pop();  //第一个拿掉作为头</span></span><br><span class="line">    <span class="comment">//         //一次一层</span></span><br><span class="line">    <span class="comment">//         for(int i = 0; i &lt; size; i++) &#123;</span></span><br><span class="line">    <span class="comment">//             //访问</span></span><br><span class="line">    <span class="comment">//             TreeNode* top = q.front();</span></span><br><span class="line">    <span class="comment">//             q.pop();</span></span><br><span class="line">    <span class="comment">//             ListNode* next = new ListNode();  //创建一个对象指针，必须用申请！！！</span></span><br><span class="line">    <span class="comment">//             next-&gt;val = top-&gt;val;</span></span><br><span class="line">    <span class="comment">//             node-&gt;next = next;</span></span><br><span class="line">    <span class="comment">//             node = node-&gt;next; // 指向下一个</span></span><br><span class="line">    <span class="comment">//             //子节点入队</span></span><br><span class="line">    <span class="comment">//             if(top-&gt;left != NULL) q.push(top-&gt;left);</span></span><br><span class="line">    <span class="comment">//             if(top-&gt;right != NULL) q.push(top-&gt;right);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return ans;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面那版的头结点用法一点都不优雅，其实可以优雅的</span></span><br><span class="line">    <span class="comment">//我觉得就是一个BFS层序遍历罢了</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;ListNode*&gt; <span class="title">listOfDepth</span><span class="params">(TreeNode* tree)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(tree);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="comment">//用一个head记录头结点，只需要浪费第一个地址空间，就可以不用考虑头结点问题</span></span><br><span class="line">            ListNode* node = <span class="keyword">new</span> ListNode(<span class="number">0</span>), *head = node;  <span class="comment">//创建一个对象指针，必须用申请！！！</span></span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">//一次一层</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//访问</span></span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                ListNode* next = <span class="keyword">new</span> ListNode();  <span class="comment">//创建一个对象指针，必须用申请！！！</span></span><br><span class="line">                next-&gt;val = top-&gt;val;</span><br><span class="line">                node-&gt;next = next;</span><br><span class="line">                node = node-&gt;next; <span class="comment">// 指向下一个</span></span><br><span class="line">                <span class="comment">//子节点入队</span></span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left != <span class="literal">NULL</span>) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right != <span class="literal">NULL</span>) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(head-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>小知识点</title>
    <url>/2020/03/03/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/0-%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%81%EF%BC%81/</url>
    <content><![CDATA[<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/count-primes/" target="_blank" rel="noopener">计数素数</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200331172813438.png" alt="image-20200331172813438"></p>
</blockquote>
<p>有一些奇奇怪怪的方法，但是现在没必要，就这样做即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_Prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(is_Prime(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//别暴力啊！</span></span><br><span class="line"><span class="comment">//辗转相除法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><blockquote>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200331173846726.png" alt="image-20200331173846726" style="zoom:50%;" />
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lam</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a / gcd(a, b)) * b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文件流输入输出"><a href="#文件流输入输出" class="headerlink" title="文件流输入输出"></a>文件流输入输出</h3><p>输入输出：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//输入流对象</span></span><br><span class="line">    <span class="function">ofstream <span class="title">writefile</span><span class="params">(<span class="string">"/Users/kirito/Desktop/a.txt"</span>, ios::out)</span></span>;</span><br><span class="line">    writefile&lt;&lt;<span class="string">"第一行"</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//写入</span></span><br><span class="line">    writefile&lt;&lt;<span class="string">"第二行"</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//写入</span></span><br><span class="line">    writefile&lt;&lt;<span class="string">"第三行"</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//写入</span></span><br><span class="line">    writefile.<span class="built_in">close</span>();      <span class="comment">//结束写入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出流对象</span></span><br><span class="line">    ifstream readfile;</span><br><span class="line">    readfile.<span class="built_in">open</span>(<span class="string">"/Users/kirito/Desktop/a.txt"</span>, ios::in); <span class="comment">//选择文件</span></span><br><span class="line">    <span class="keyword">if</span>(!readfile) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"empty!!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="comment">//输出内容,一次一行</span></span><br><span class="line">    <span class="keyword">while</span>(readfile&gt;&gt;s) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="平闰年"><a href="#平闰年" class="headerlink" title="平闰年"></a>平闰年</h3><p>看看这题：</p>
<p>[日期差值](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/codeup/Codeup  1928: 日期差值.md)</p>
<p>还有这题（一样）</p>
<p><a href="https://leetcode-cn.com/problems/number-of-days-between-two-dates/" target="_blank" rel="noopener">日期间隔几天</a></p>
<p>我再实现一遍：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> day_nums[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">28</span>, <span class="number">29</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">30</span>, <span class="number">30</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">30</span>, <span class="number">30</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">30</span>, <span class="number">30</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">30</span>, <span class="number">30</span>&#125;,</span><br><span class="line">                           &#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//判断是否为闰年</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is_peap</span><span class="params">(<span class="keyword">int</span> yy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((yy % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; yy % <span class="number">100</span> != <span class="number">0</span>) || yy % <span class="number">400</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">daysBetweenDates</span><span class="params">(<span class="built_in">string</span> date1, <span class="built_in">string</span> date2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(date1 &gt; date2) &#123;  <span class="comment">//把date1换成小的</span></span><br><span class="line">            swap(date1, date2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先得到两个的日期</span></span><br><span class="line">        <span class="keyword">int</span> yy1, yy2, mm1, mm2, dd1, dd2;</span><br><span class="line">        yy1 = atoi(date1.substr(<span class="number">0</span>, <span class="number">4</span>).c_str());</span><br><span class="line">        yy2 = atoi(date2.substr(<span class="number">0</span>, <span class="number">4</span>).c_str());</span><br><span class="line">        mm1 = atoi(date1.substr(<span class="number">5</span>, <span class="number">2</span>).c_str());</span><br><span class="line">        mm2 = atoi(date2.substr(<span class="number">5</span>, <span class="number">2</span>).c_str());</span><br><span class="line">        dd1 = atoi(date1.substr(<span class="number">8</span>, <span class="number">2</span>).c_str());</span><br><span class="line">        dd2 = atoi(date2.substr(<span class="number">8</span>, <span class="number">2</span>).c_str());</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(yy1 &lt; yy2 || mm1 &lt; mm2 || dd1 &lt; dd2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dd1 &lt; day_nums[mm1][is_peap(yy1)]) &#123;</span><br><span class="line">                dd1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(mm1 &lt; <span class="number">12</span>) &#123;</span><br><span class="line">                dd1 = <span class="number">1</span>;</span><br><span class="line">                mm1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dd1 = <span class="number">1</span>;</span><br><span class="line">                mm1 = <span class="number">1</span>;</span><br><span class="line">                yy1++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>小知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 16.19. 水域大小</title>
    <url>/2020/04/08/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98%2016.19.%20%E6%B0%B4%E5%9F%9F%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h1 id="面试题-16-19-水域大小"><a href="#面试题-16-19-水域大小" class="headerlink" title="面试题 16.19. 水域大小"></a><a href="https://leetcode-cn.com/problems/pond-sizes-lcci/" target="_blank" rel="noopener">面试题 16.19. 水域大小</a></h1><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200408212641385.png" alt="image-20200408212641385"></p>
</blockquote>
<p>遍历连通图问题，用dfs显然更加明了一点：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> X[<span class="number">8</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Y[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//一次dfs可以遍历一个连通图</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; land, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;&amp; vis, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">        vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="comment">//选择</span></span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            a = x + X[i];</span><br><span class="line">            b = y + Y[i];</span><br><span class="line">            <span class="keyword">if</span>(a &lt; <span class="number">0</span> || a &gt;= land.<span class="built_in">size</span>() || b &lt; <span class="number">0</span> || b &gt;= land[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">continue</span>;  <span class="comment">//判断越界</span></span><br><span class="line">            <span class="keyword">if</span>(vis[a][b] == <span class="literal">false</span> &amp;&amp; land[a][b] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(land, vis, a, b, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pondSizes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; land)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">vis</span><span class="params">(land.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(land[<span class="number">0</span>].<span class="built_in">size</span>(), <span class="literal">false</span>))</span></span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; land.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; land[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j] == <span class="literal">false</span> &amp;&amp; land[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">                    dfs(land, vis, i, j, temp);</span><br><span class="line">                    ans.push_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>树-题集</title>
    <url>/2020/03/15/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/1-%E6%A0%91-%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h1 id="树-题集"><a href="#树-题集" class="headerlink" title="树-题集"></a>树-题集</h1><blockquote>
<p>一篇博客说树是最好磨炼个人框架(递归)能力的地方，从今天开始我要怒刷树的题目，此页用于保存框架的领悟和各种方法的收纳</p>
</blockquote>
<h3 id="1-求二叉树的高度-深度"><a href="#1-求二叉树的高度-深度" class="headerlink" title="1. 求二叉树的高度/深度"></a>1. 求二叉树的高度/深度</h3><blockquote>
<p>先弄清楚概念：树的高度和深度各是什么？</p>
<p>树的高度是从最下往上数（想象从下往上看数楼层高度）</p>
<p>树的深度是从最上往下数（想象从上往下看来估量井深）</p>
</blockquote>
<h4 id="高度："><a href="#高度：" class="headerlink" title="高度："></a>高度：</h4><p>要参考树的递推公式：</p>
<p>$$height(p)=\begin{cases} -1&amp;p==NULL \1+max{height(p.right), height(p.left)}&amp;otherwise\end{cases}$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//递归完事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(<span class="built_in">height</span>(root-&gt;right), <span class="built_in">height</span>(root-&gt;left));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h4><p>就是用dfs解决</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求深度（由最上往下数）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_depth</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth, <span class="keyword">int</span>&amp; ans, <span class="keyword">int</span> id)</span> </span>&#123;  <span class="comment">//id为目标结点的ID</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(id == root-&gt;val) &#123;  <span class="comment">//到达就收手</span></span><br><span class="line">        ans = depth;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    get_depth(root-&gt;left, depth + <span class="number">1</span>, ans, id);</span><br><span class="line">    get_depth(root-&gt;right, depth + <span class="number">1</span>, ans, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变种题：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">N叉树的最大深度</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317121934136.png" alt="image-20200317121934136"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = root-&gt;children.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> high = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = maxDepth(root-&gt;children[i]);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; high) high = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> high+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思想一致。</p>
<h3 id="2-判断是否为平衡二叉树（自顶向下）"><a href="#2-判断是否为平衡二叉树（自顶向下）" class="headerlink" title="2. *判断是否为平衡二叉树（自顶向下）"></a>2. *判断是否为平衡二叉树（自顶向下）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归完事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">height</span>(root-&gt;left) - <span class="built_in">height</span>(root-&gt;right)) &lt; <span class="number">2</span> &amp;&amp; isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-最小高度树"><a href="#3-最小高度树" class="headerlink" title="3. 最小高度树"></a>3. 最小高度树</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/minimum-height-tree-lcci/" target="_blank" rel="noopener">最小高度树</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315151701603.png" alt="image-20200315151701603"></p>
</blockquote>
<p><strong>每次拿中点作为根节点，然后递归，核心思想是中序遍历</strong></p>
<p><strong>这一题简直可以作为一个模板用，只要有一个顺序序列，就可以得到一个AVL树，简直无敌！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    TreeNode* node = <span class="keyword">new</span> TreeNode(nums[mid]);   <span class="comment">//根节点，中序遍历性质</span></span><br><span class="line">    node-&gt;left = build(nums, left, mid - <span class="number">1</span>);		<span class="comment">//递归求左孩子</span></span><br><span class="line">    node-&gt;right = build(nums, mid + <span class="number">1</span>, right);	<span class="comment">//递归求右孩子</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-层序遍历（需要记录层号）"><a href="#4-层序遍历（需要记录层号）" class="headerlink" title="4.层序遍历（需要记录层号）"></a>4.层序遍历（需要记录层号）</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">层序遍历</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315163250981.png" alt="image-20200315163250981"></p>
</blockquote>
<p><strong>层序遍历的核心就是BFS</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;  <span class="comment">//为空直接返回</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; each_level;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">//一次的遍历就是一层(BFS思想)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                TreeNode *top = q.front();</span><br><span class="line">                <span class="comment">//记录</span></span><br><span class="line">                each_level.push_back(top-&gt;val);</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left != <span class="literal">NULL</span>) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right != <span class="literal">NULL</span>) q.push(top-&gt;right);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一层读入</span></span><br><span class="line">            ans.push_back(each_level);</span><br><span class="line">            each_level.<span class="built_in">clear</span>();  <span class="comment">//清空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>有一个镜像题目：</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">倒层序遍历</a></p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315163501122.png" alt="image-20200315163501122"></p>
</blockquote>
<p><strong>只需要上题基础上用reverese即可(要记住reverse可以这么用！！！)</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrderBottom</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;  <span class="comment">//为空直接返回</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; each_level;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">//一次的遍历就是一层(BFS思想)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                TreeNode *top = q.front();</span><br><span class="line">                <span class="comment">//记录</span></span><br><span class="line">                each_level.push_back(top-&gt;val);</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left != <span class="literal">NULL</span>) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right != <span class="literal">NULL</span>) q.push(top-&gt;right);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一层读入</span></span><br><span class="line">            ans.push_back(each_level);</span><br><span class="line">            each_level.<span class="built_in">clear</span>();  <span class="comment">//清空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后倒过来</span></span><br><span class="line">        reverse(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看一个变种题：</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/submissions/" target="_blank" rel="noopener">二叉树锯齿形层序遍历</a></p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315181233732.png" alt="image-20200315181233732"></p>
</blockquote>
<p><strong>这道题目同样是一个reverse搞定！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">zigzagLevelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;  <span class="comment">//为空直接返回</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; each_level;</span><br><span class="line">        <span class="keyword">bool</span> helper = <span class="literal">true</span>;  <span class="comment">//为一层顺序的开关，true为左到右，false为右到左</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">//一次的遍历就是一层(BFS思想)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                TreeNode *top = q.front();</span><br><span class="line">                <span class="comment">//记录</span></span><br><span class="line">                each_level.push_back(top-&gt;val);</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left != <span class="literal">NULL</span>) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right != <span class="literal">NULL</span>) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//直接一层后reverse即可</span></span><br><span class="line">            <span class="keyword">if</span>(!helper) reverse(each_level.<span class="built_in">begin</span>(), each_level.<span class="built_in">end</span>());</span><br><span class="line">            helper = !helper;</span><br><span class="line">            <span class="comment">//一层读入</span></span><br><span class="line">            ans.push_back(each_level);</span><br><span class="line">            each_level.<span class="built_in">clear</span>();  <span class="comment">//清空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来一个变种：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">N叉树的层序遍历</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315182718859.png" alt="image-20200315182718859"></p>
</blockquote>
<p><strong>同样的配方，只需在遍历孩子结点时做一下改变</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;  <span class="comment">//为空直接返回</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; each_level;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">//一次的遍历就是一层(BFS思想)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                Node *top = q.front();</span><br><span class="line">                <span class="comment">//记录</span></span><br><span class="line">                each_level.push_back(top-&gt;val);</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Node*&gt;::iterator it = top-&gt;children.<span class="built_in">begin</span>(); it &lt; top-&gt;children.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">                    q.push(*it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一层读入</span></span><br><span class="line">            ans.push_back(each_level);</span><br><span class="line">            each_level.<span class="built_in">clear</span>();  <span class="comment">//清空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="5-将二叉搜索树变平衡"><a href="#5-将二叉搜索树变平衡" class="headerlink" title="5. 将二叉搜索树变平衡"></a>5. 将二叉搜索树变平衡</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/balance-a-binary-search-tree/" target="_blank" rel="noopener">leetCode-将二叉搜索树变平衡</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315180030609.png" alt="image-20200315180030609"></p>
</blockquote>
<p><strong>这题是这周周赛的题目，当时完全没有思路，但是今天学会了那种快速递归出AVL树的方法后，直接秒！！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">        middleOrder(root-&gt;left, a);</span><br><span class="line">        a.push_back(root-&gt;val);</span><br><span class="line">        middleOrder(root-&gt;right, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">balanceBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先得到所有的结点值</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">        middleOrder(root, num);</span><br><span class="line">        <span class="comment">//然后根据数组重新构造</span></span><br><span class="line">        <span class="keyword">return</span> build(num, <span class="number">0</span>, num.<span class="built_in">size</span>() - <span class="number">1</span>);  <span class="comment">//记得减一！</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> TreeNode(num[mid]);</span><br><span class="line">        node-&gt;left = build(num, left, mid - <span class="number">1</span>);</span><br><span class="line">        node-&gt;right = build(num, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="6-二叉树的镜像"><a href="#6-二叉树的镜像" class="headerlink" title="6. 二叉树的镜像"></a>6. 二叉树的镜像</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/" target="_blank" rel="noopener">二叉树的镜像</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315205655950.png" alt="image-20200315205655950"></p>
</blockquote>
<p><strong>开始还有一点懵，但仔细一想，无法就是遍历的时候把孩子结点交换即可，典型的递归，用一种遍历即可，先访问头结点的遍历？那就是先序遍历了！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">mirrorTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    preOrder(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//交换左右的顺序</span></span><br><span class="line">    TreeNode* temp = <span class="keyword">new</span> TreeNode();</span><br><span class="line">    temp = root-&gt;left;</span><br><span class="line">    root-&gt;left = root-&gt;right;</span><br><span class="line">    root-&gt;right = temp;</span><br><span class="line">    preOrder(root-&gt;left);</span><br><span class="line">    preOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-二叉搜索树的范围和"><a href="#7-二叉搜索树的范围和" class="headerlink" title="7.二叉搜索树的范围和"></a>7.二叉搜索树的范围和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/range-sum-of-bst/" target="_blank" rel="noopener">二叉搜索树的范围和</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200316221627645.png" alt="image-20200316221627645"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//遍历然后相加？</span></span><br><span class="line">    <span class="keyword">int</span> Left, Right;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//访问</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt;= Right &amp;&amp; root-&gt;val &gt;= Left) sum += root-&gt;val;</span><br><span class="line">        preOrder(root-&gt;left);</span><br><span class="line">        preOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        Left = L, Right = R;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        preOrder(root);</span><br><span class="line">        <span class="keyword">return</span> sum; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这道题目别想什么新做法，直接遍历搞定</p>
<h3 id="8-合并二叉树"><a href="#8-合并二叉树" class="headerlink" title="8. 合并二叉树"></a>8. 合并二叉树</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">合并二叉树</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317094306702.png" alt="image-20200317094306702"></p>
</blockquote>
<p><strong>同理，这题锻炼的是递归思想，还是要多练</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t1 == <span class="literal">NULL</span>) <span class="keyword">return</span> t2;</span><br><span class="line">    <span class="keyword">if</span>(t2 == <span class="literal">NULL</span>) <span class="keyword">return</span> t1;</span><br><span class="line">    <span class="comment">//直接两棵树同时递归遍历即可</span></span><br><span class="line">    t1-&gt;val += t2-&gt;val;</span><br><span class="line">    t1-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);</span><br><span class="line">    t1-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-二叉树的最大深度"><a href="#9-二叉树的最大深度" class="headerlink" title="9. 二叉树的最大深度"></a>9. 二叉树的最大深度</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">二叉树的最大深度</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317101102578.png" alt="image-20200317101102578"></p>
</blockquote>
<p><strong>其实就是求根节点的高度</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root-&gt;left), maxDepth(root-&gt;right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一个变种题，比这题有意思一些：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">二叉树最小深度</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317103805271.png" alt="image-20200317103805271"></p>
</blockquote>
<p><strong>这题关键在于递归的几个边界条件的思考，还是有点深度，不过自己直接想出来了，倒是有点欣慰，多看看！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//左边为空返回右边+1（即当前节点的高度为右孩子+1，因为左孩子没有）</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span> + minDepth(root-&gt;right);</span><br><span class="line">    <span class="comment">//右边为空返回左边+1（即当前节点的高度为左孩子+1，因为右孩子没有）</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span> + minDepth(root-&gt;left);</span><br><span class="line">    <span class="comment">//两边都不是空，则返回1+左右孩子最小的那个高度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">min</span>(minDepth(root-&gt;left), minDepth(root-&gt;right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-二叉搜索树中的搜索"><a href="#10-二叉搜索树中的搜索" class="headerlink" title="10. 二叉搜索树中的搜索"></a>10. 二叉搜索树中的搜索</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">二叉搜索树中的搜索</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317113254253.png" alt="image-20200317113254253"></p>
</blockquote>
<p>没有难度。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(val == root-&gt;val) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span>(val &gt; root-&gt;val) <span class="keyword">return</span> searchBST(root-&gt;right, val);</span><br><span class="line">    <span class="keyword">if</span>(val &lt; root-&gt;val) <span class="keyword">return</span> searchBST(root-&gt;left, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个变种题：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/closest-binary-search-tree-value/" target="_blank" rel="noopener">最接近的二叉搜索树值</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317113811701.png" alt="image-20200317113811701"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">closestValue</span><span class="params">(TreeNode* root, <span class="keyword">double</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> record = root-&gt;val;</span><br><span class="line">        helper(root, target, record);</span><br><span class="line">        <span class="keyword">return</span> record;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">double</span> target, <span class="keyword">int</span>&amp; record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(record - target) &gt; <span class="built_in">abs</span>(root-&gt;val - target)) record = root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(target == root-&gt;val) record = root-&gt;val;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; root-&gt;val) &#123;</span><br><span class="line">            helper(root-&gt;right, target, record);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; root-&gt;val) &#123;</span><br><span class="line">            helper(root-&gt;left, target, record);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>也就是查找时做做判断</p>
<h3 id="11-二叉搜索树的第k大节点"><a href="#11-二叉搜索树的第k大节点" class="headerlink" title="11. 二叉搜索树的第k大节点"></a>11. 二叉搜索树的第k大节点</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/" target="_blank" rel="noopener">二叉搜索树的第k大节点</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317114515358.png" alt="image-20200317114515358"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//中序遍历记录值，然后得到第k大的值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthLargest</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        helper(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans[ans.<span class="built_in">size</span>()-k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        helper(root-&gt;left, ans);</span><br><span class="line">        ans.push_back(root-&gt;val);</span><br><span class="line">        helper(root-&gt;right, ans);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="12-二叉搜索树的最近公共祖先"><a href="#12-二叉搜索树的最近公共祖先" class="headerlink" title="12. 二叉搜索树的最近公共祖先"></a>12. 二叉搜索树的最近公共祖先</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">二叉搜索树的最近公共祖先</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317145201602.png" alt="image-20200317145201602"></p>
</blockquote>
<p><strong>一道锻炼递归思想的题，要利用二叉搜索树的性质去做，仔细体会！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//利用二叉搜索树的性质可做</span></span><br><span class="line">        <span class="comment">//如果要找的两个都小于root的值</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val &lt; root-&gt;val &amp;&amp; q-&gt;val &lt; root-&gt;val) <span class="keyword">return</span> lowestCommonAncestor(root-&gt;left, p, q);</span><br><span class="line">        <span class="comment">//如果要找的两个都大于root的值</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val &gt; root-&gt;val &amp;&amp; q-&gt;val &gt; root-&gt;val) <span class="keyword">return</span> lowestCommonAncestor(root-&gt;right, p, q);</span><br><span class="line">        <span class="comment">//其他情况则在两边，root就是</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>变种题：（更具有普遍性！！）</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">二叉树的最近公共祖先</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317152725704.png" alt="image-20200317152725704"></p>
</blockquote>
<p>【思路】<br>因为lowestCommonAncestor(root, p, q)的功能是找出以root为根节点的两个节点p和q的最近公共祖先，所以递归体分三种情况讨论：</p>
<ol>
<li>如果p和q分别是root的左右节点，那么root就是我们要找的最近公共祖先</li>
<li>如果p和q都是root的左节点，那么返回lowestCommonAncestor(root.left,p,q)</li>
<li>如果p和q都是root的右节点，那么返回lowestCommonAncestor(root.right,p,q)</li>
</ol>
<p>边界条件讨论：</p>
<ol>
<li>如果root是null，则说明我们已经找到最底了，返回null表示没找到</li>
<li>如果root与p相等或者与q相等，则返回root</li>
<li>如果左子树没找到，递归函数返回null，证明p和q同在root的右侧，那么最终的公共祖先就是右子树找到的结点</li>
<li>如果右子树没找到，递归函数返回null，证明p和q同在root的左侧，那么最终的公共祖先就是左子树找到的结点</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==null || root==p || root==q)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    </span><br><span class="line">    TreeNode leftNode=lowestCommonAncestor(root.left,p,q);</span><br><span class="line">    TreeNode rightNode=lowestCommonAncestor(root.right,p,q);</span><br><span class="line">	<span class="comment">//不在左边，返回右边</span></span><br><span class="line">    <span class="keyword">if</span>(leftNode==null)</span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    <span class="comment">//不在右边返回左边</span></span><br><span class="line">    <span class="keyword">if</span>(rightNode==null)</span><br><span class="line">        <span class="keyword">return</span> leftNode;</span><br><span class="line">	<span class="comment">//走到这一步说明两者都不是空，只有一种情况了root=p=q</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="13-修剪二叉搜索树"><a href="#13-修剪二叉搜索树" class="headerlink" title="13.修剪二叉搜索树"></a>13.修剪二叉搜索树</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/trim-a-binary-search-tree/" target="_blank" rel="noopener">修剪二叉搜索树</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200317201052238.png" alt="image-20200317201052238"></p>
</blockquote>
<p>思路：</p>
<blockquote>
<p><strong>思路</strong></p>
<p>令 trim(node) 作为该节点上的子树的理想答案。我们可以递归地构建该答案。</p>
<p><strong>算法</strong></p>
<p>当 node.val &gt; R，那么修剪后的二叉树必定出现在节点的左边。</p>
<p>类似地，当 node.val &lt; L，那么修剪后的二叉树出现在节点的右边。</p>
<p>否则，我们将会修剪树的两边。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">		<span class="comment">//下面两个if相当于删除不满足要求的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &gt; R) <span class="keyword">return</span> trimBST(root-&gt;left, L, R);<span class="comment">//返回修剪过的右子树。抱有一丝丝期望，希望右子树能够满足要求，因为右子树的值大于当前根节点的值</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt; L) <span class="keyword">return</span> trimBST(root-&gt;right, L, R);<span class="comment">//返回修剪过的左子树，抱有一丝丝期望，希望左子树能够满足要求，因为左子树的值小于当前根节点的值</span></span><br><span class="line">		<span class="comment">//处理正常的节点</span></span><br><span class="line">        root-&gt;left = trimBST(root-&gt;left, L, R);</span><br><span class="line">        root-&gt;right = trimBST(root-&gt;right, L, R);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>说实话不太理解。。多反复一下吧</p>
<h3 id="14-二叉树的所有路径"><a href="#14-二叉树的所有路径" class="headerlink" title="14. 二叉树的所有路径"></a>14. 二叉树的所有路径</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/binary-tree-paths/" target="_blank" rel="noopener">二叉树的所有路径</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200318113759280.png" alt="image-20200318113759280"></p>
</blockquote>
<p>这个递归算法是自己想出来的，很高兴！</p>
<p>大致思路就是先序遍历，每经过一个节点就记录，递归工作栈之间传输的是字符串，每次加上左右节点的值然在再在左右节点转发，当达到叶结点时添加此字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历下去，如果有分支，就另外加一个</span></span><br><span class="line">        <span class="comment">//先序遍历</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        helper(ans, to_string(root-&gt;val), root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans, <span class="built_in">string</span> str, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两者都是空的话，则是叶结点</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ans.push_back(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">NULL</span>) helper(ans, str + <span class="string">"-&gt;"</span> + to_string(root-&gt;left-&gt;val), root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right != <span class="literal">NULL</span>) helper(ans, str + <span class="string">"-&gt;"</span> + to_string(root-&gt;right-&gt;val), root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="15-将二叉搜索树转变为累加树"><a href="#15-将二叉搜索树转变为累加树" class="headerlink" title="15. 将二叉搜索树转变为累加树"></a>15. 将二叉搜索树转变为累加树</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree/" target="_blank" rel="noopener">将二叉搜索树转变为累加树</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200318150609581.png" alt="image-20200318150609581"></p>
</blockquote>
<p>这题的思考很重要，把访问过程当做第一次处理过程，很考验递归思维，尤其是这个反中序遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从最右边开始遍历（逆中序遍历）</span></span><br><span class="line">        <span class="keyword">int</span> acl = <span class="number">0</span>;</span><br><span class="line">        helper(root, acl);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span>&amp; acl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        helper(root-&gt;right, acl);</span><br><span class="line">        <span class="comment">//访问当前节点</span></span><br><span class="line">        root-&gt;val += acl;</span><br><span class="line">        acl = root-&gt;val;</span><br><span class="line">        helper(root-&gt;left, acl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h3 id="16-从根到页的二进制之和"><a href="#16-从根到页的二进制之和" class="headerlink" title="16. 从根到页的二进制之和"></a>16. 从根到页的二进制之和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/sum-of-root-to-leaf-binary-numbers/" target="_blank" rel="noopener">从根到页的二进制之和</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200318154806967.png" alt="image-20200318154806967"></p>
</blockquote>
<p>位运算惊艳到我了！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRootToLeaf</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.得出所有路径的二进制（位运算）（字符串）</span></span><br><span class="line">        <span class="comment">//2.相加        </span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        dfs(ans, root-&gt;val, root);</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = ans.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            sum += ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum % (<span class="number">1000000007</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans, <span class="keyword">int</span> a, TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果是叶结点</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right == <span class="literal">NULL</span> &amp;&amp; root-&gt;left == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ans.push_back(a);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">NULL</span>) dfs(ans, a &lt;&lt; <span class="number">1</span> | root-&gt;left-&gt;val, root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right != <span class="literal">NULL</span>) dfs(ans, a &lt;&lt; <span class="number">1</span> | root-&gt;right-&gt;val, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="17-BiNode"><a href="#17-BiNode" class="headerlink" title="17. BiNode"></a>17. BiNode</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/binode-lcci/" target="_blank" rel="noopener">BiNode</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200318180508863.png" alt="image-20200318180508863"></p>
</blockquote>
<p>整体思路其实不难想，但是由于自己的一个习惯性错误，而导致卡了很久，递归以后不要用来传答案！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* ans = <span class="keyword">new</span> TreeNode();</span><br><span class="line">    TreeNode* last = ans;</span><br><span class="line">    <span class="comment">//这一题给了我一个教训，我每次都用递归传递一个参数去保存答案，这样在传数组时或许没有问题</span></span><br><span class="line">    <span class="comment">//但当传的是指针时就会出问题，因为指针只会代表一个地址，其他的改变，它不会改变，所以以后尽量用全局变量做，而不是传参！！！！！</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBiNode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        dfs(root-&gt;left);</span><br><span class="line">        root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        last-&gt;right = root;</span><br><span class="line">        last = root;</span><br><span class="line">        dfs(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="18-路径总和"><a href="#18-路径总和" class="headerlink" title="18. 路径总和"></a>18. 路径总和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/path-sum-iii/" target="_blank" rel="noopener">路径总和</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200318211507046.png" alt="image-20200318211507046"></p>
</blockquote>
<p>绝对暴力做法，把所有路径都遍历了一遍</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//把所有节点作为根节点进行计算</span></span><br><span class="line">        helper(root, sum);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//纯粹遍历所有节点--先序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        dfs(root, root-&gt;val, sum);</span><br><span class="line">        helper(root-&gt;left, sum); </span><br><span class="line">        helper(root-&gt;right, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以当前节点作为根节点，查找路径</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">NULL</span>) dfs(root-&gt;left, sum + root-&gt;left-&gt;val, target);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right != <span class="literal">NULL</span>) dfs(root-&gt;right, sum + root-&gt;right-&gt;val, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



























]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯法</title>
    <url>/2020/03/19/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/2-%E5%9B%9E%E6%BA%AF-%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h3 id="何为回溯法？"><a href="#何为回溯法？" class="headerlink" title="何为回溯法？"></a>何为回溯法？</h3><p><strong>回溯法的基本思想：</strong></p>
<blockquote>
<p>在包含问题的所有解的<strong>解空间树</strong>中，按照<strong>深度优先搜索</strong>的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。 若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。 而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</p>
</blockquote>
<p><strong>原来回溯法的核心就是dfs，难怪我前面两题都是用dfs做的，虽然发现了相似性，但却没有领悟到回溯法是个什么样的东西，回溯法就是在该结点不包含问题的解，则逐层向其祖先结点回溯。显而易见这就是dfs的原理，所以说dfs是工具，而回溯法只是应用这个工具来解决问题罢了！</strong></p>
<p>认真看看这篇文章！</p>
<p><a href="https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-xiang-jie-by-labuladong-2/" target="_blank" rel="noopener">回溯算法详解</a></p>
<p><strong>回溯算法的实质就是多叉树的遍历，深有体会！</strong></p>
<h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>这下面两题是leetcode关于回溯法的简单难度的两题，一定要掌握那种把解空间转换为树结构的能力，然后在转换为dfs解题</p>
<p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/784.字母大小写全排列.md">字母大小写全排列</a></p>
<p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/401.二进制手表.md">二进制手表</a></p>
<h3 id="逐步练习"><a href="#逐步练习" class="headerlink" title="逐步练习"></a>逐步练习</h3><ul>
<li><p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/无重复字符串的排列组合.md">无重复字符串的排列组合</a></p>
<p>  这题也是类似解法，不过涉及到了一个vis数组的技巧，子分支无非是放任一个没有用过的字母</p>
</li>
<li><p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/括号.md">括号</a></p>
<p>  这题同理，只要能够看清解空间树是什么，就可以用dfs思想套进去，左右分支无非是放左括号还是右括号</p>
</li>
<li><p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/幂集.md">幂集</a></p>
<p>  <del>还是一样的配方，只不过这一次是求子集，元素一样便为一个解，虽要设置一个vis，但是每次递归都会记住上次的状态，以免重复添加（比如{1,2} = {2,1}）</del></p>
<p>  哈哈，还是要掌握模板的使用，不能一味闭门造车，自己的方法有效，但是不够高效，要看看别人的！</p>
</li>
<li><p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/幂集II.md">幂集II</a></p>
<p>  排序后在不做选择时连同后面所有一样的元素都不选</p>
</li>
<li><p><a href="/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/LeetCode/全排列.md">全排列</a></p>
<p>  同理，模板的使用罢了</p>
</li>
</ul>
<p>这里我有一个小小的总结：</p>
<p>==如果输入序列带有重复元素，那么需要排序设r去重==</p>
<p>==如果输入序列要的是排列，则选择时从0到length遍历且需要一个vis数组==</p>
<p>==如果是组合，则传一个start，从start开始==</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>DP-题集</title>
    <url>/2020/03/14/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/3-1-DP-%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h1 id="DP-题集"><a href="#DP-题集" class="headerlink" title="DP-题集"></a>DP-题集</h1><blockquote>
<p>我在做题过程中，最不愿意凭感觉做题，如果一个题目没有固定套路，模板。</p>
<p>无论是数学题还是算法题，肯定有一类框架或是一类模板，那种要考自己完全想出来的新题不是自己力所能及的，但我一定要确保自己所有做过的题仍然会做。</p>
<p>因此，我把遇到的dp题目按照类别，分别写出各自的题目，状态，dp数组代表什么，边界，状态转移方法。</p>
<p>我坚信多练+总结才能达到完美，缺一不可</p>
</blockquote>
<h2 id="DP的基本做法："><a href="#DP的基本做法：" class="headerlink" title="DP的基本做法："></a>DP的基本做法：</h2><p>无非求那么几样东西：</p>
<ul>
<li><p>状态（dp数组代表什么）—<strong>一般是原问题和⼦问题中变化的变量</strong></p>
</li>
<li><p>边界（base case）—-<strong>特殊位置可以取的值</strong></p>
</li>
<li><p>状态转移方程（实际上就是填表的过程，相当于优化了的穷举法）—<strong>有时可以画个表，来看如何遍历可以满足方程中所需的子状态都已经计算出</strong></p>
<p>  另外，状态转移方程是由原问题转换为子问题，所以一般是减的关系</p>
</li>
</ul>
<p>一点领悟：</p>
<ul>
<li>dp数组实际就是递归算法里的备忘录，用于存储状态</li>
</ul>
<h3 id="概念后记"><a href="#概念后记" class="headerlink" title="概念后记"></a>概念后记</h3><h4 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h4><blockquote>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323115811894.png" alt="image-20200323115811894" style="zoom:50%;" />

<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323120026044.png" alt="image-20200323120026044" style="zoom:50%;" />

<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323123445290.png" alt="image-20200323123445290" style="zoom:50%;" />
</blockquote>
<h4 id="dp数组遍历方向"><a href="#dp数组遍历方向" class="headerlink" title="dp数组遍历方向"></a>dp数组遍历方向</h4><blockquote>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323145348239.png" alt="image-20200323145348239" style="zoom:50%;" />

<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323145425601.png" alt="image-20200323145425601" style="zoom:50%;" />

<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323145449857.png" alt="image-20200323145449857" style="zoom:50%;" />

<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323145519501.png" alt="image-20200323145519501" style="zoom:50%;" />
</blockquote>
<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><h3 id="找零钱"><a href="#找零钱" class="headerlink" title="找零钱"></a>找零钱</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">leetcode-零钱兑换</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314195354699.png" alt="image-20200314195354699"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  <strong>dp[i]代表<code>总金额为i</code>时所需的最少硬币个数</strong></p>
<p>  i即状态即总金额</p>
</li>
<li><p>状态转移方程：</p>
<p>  $$dp[i]= \begin{cases} 0&amp;n=0\ -1&amp;n&lt;0 \ min{dp[i-coin]|coin\in coins}&amp;n&gt;0 \end{cases}$$</p>
<p>  其中前两个情况可以视为base case</p>
</li>
<li><p>base case：</p>
<p>  <code>dp[0] = 0</code></p>
</li>
</ul>
<h3 id="最大连续子序列和"><a href="#最大连续子序列和" class="headerlink" title="最大连续子序列和"></a>最大连续子序列和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">leetCode-最大子序和</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314201239358.png" alt="image-20200314201239358"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  <strong>dp[i]表示以<code>nums[i]为末尾</code>的最大连续子序和</strong></p>
<p>  i即状态即结尾数组下标</p>
</li>
<li><p>状态转移方程：</p>
<p>  $dp[i] = max{nums[i],dp[i-1]+nums[i]}$</p>
</li>
<li><p>base case:</p>
<p>  <code>dp[0] = nums[0]</code></p>
</li>
</ul>
<h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><blockquote>
<p> <a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener"> 最长上升子序列</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314201921002.png" alt="image-20200314201921002"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  <strong>dp[i]表示以<code>nums[i]结尾</code>的最长子序列长度</strong></p>
<p>  i即状态即结尾数组下标</p>
</li>
<li><p>状态转移方程：</p>
<p>  $dp[i] = max{1,dp[j]+1|(j&lt;i&amp;&amp;A[j]&lt;A[i])}$</p>
</li>
<li><p>base case:</p>
<p>  <code>dp[0] = 1</code></p>
</li>
</ul>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">LeetCode-最长公共子序列</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314203301474.png" alt="image-20200314203301474"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  <strong>dp[i][j]代表text1的i号位前和text2的j号位前的最长公共子序列长度</strong></p>
<p>  i为text1的i号位前</p>
<p>  j为text2的j号位前</p>
</li>
<li><p>状态转移方程：</p>
<p>  $$dp[i]= \begin{cases}  dp[i-1][j-1]+1&amp;text1[i]==text2[j]\ max{dp[i-1][j],dp[i][j-1]}&amp;text1[i]!=text2[j]   \end{cases}$$</p>
</li>
<li><p>边界：</p>
<p>  $dp[i][0] = dp[0][j] = 0(0\leq i \leq text1.size(),0\leq j \leq text2.size())$</p>
</li>
</ul>
<h3 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313181234916.png" alt="image-20200313181234916"></p>
<p>leetcode有一道类似题，做法一致：</p>
<p><a href="https://leetcode-cn.com/problems/palindromic-substrings/" target="_blank" rel="noopener">回文子串</a></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  <strong>dp[i][j]表示<code>S[i]至S[j]是否为回文子串</code>，是则为1，不是为0</strong></p>
</li>
<li><p>状态转移方程：</p>
<p>  $$dp[i][j]= \begin{cases} dp[i+1][j-1]&amp;S[i] == S[j]\ 0&amp;S[i]!=S[j]\end{cases}$$</p>
</li>
<li><p>边界：</p>
<p>  $dp[i][i] = 1,dp[i][i+1] = (S[i]==S[i+1]?1:0)$</p>
</li>
</ul>
<h3 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">LeetCode-最长回文子序列</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314210124497.png" alt="image-20200314210124497"></p>
<p><strong>要注意子序列和子串的区别！</strong></p>
<p>一篇讲得超级好的题解：</p>
<p><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zi-xu-lie-wen-ti-tong-yong-si-lu-zui-chang-hui-wen/" target="_blank" rel="noopener">题解</a></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  dp[i][j]表示从S[i]到S[j]的最长回文子序列长度</p>
</li>
<li><p>状态转移方程：</p>
<p>  $$dp[i][j]=\begin{cases}  dp[i+1][j-1]+2&amp;s[i]==s[j]\ max{dp[i+1][j],dp[i][j-1]}&amp;s[i]!=s[j]   \end{cases}$$</p>
</li>
<li><p>边界：</p>
<p>  $dp[i][i] = 1，dp[i][j] = 0(i&gt;j)$</p>
</li>
<li><p>遍历方法：</p>
<p>  <strong>一定看一看那个图的画法，其实dp的过程就是填表，依靠已有的数据（边界），把剩下的填满</strong></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315092516592.png" alt="image-20200315092516592"></p>
</li>
</ul>
<h3 id="DAG最长路"><a href="#DAG最长路" class="headerlink" title="DAG最长路"></a>DAG最长路</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314090341649.png" alt="image-20200314090341649"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  dp[i]表示以结点i为起点所拥有的最长路径长度</p>
</li>
<li><p>状态转移方程</p>
<p>  $dp[i] = max{dp[j]+length[i\rightarrow j]|(i,j)\in E}$</p>
</li>
<li><p>边界：</p>
<p>  $dp[k] = 0(k的出度为0)$</p>
<p>  具体实现的话可以把整个dp数组初始化，利用递归实现：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];  <span class="comment">//dp[i]已计算得到</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], DP(j) + G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];  <span class="comment">//返回计算完毕的dp[i];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">leetcode-最小路径和</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315094708489.png" alt="image-20200315094708489"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  dp[i][j]为从左上角到grid[i][j]的最小路径和</p>
</li>
<li><p>状态转移方程：</p>
<p>  $dp[i][j] = min{dp[i-1][j],dp[i][j-1]}+ grid[i][j]$</p>
</li>
<li><p>边界：</p>
<p>  $dp[0][0]=grid[0][0]$</p>
</li>
<li><p>遍历方法：</p>
<p>  从左往右，从上往下（画图感受）</p>
</li>
</ul>
<h3 id="除数博弈"><a href="#除数博弈" class="headerlink" title="除数博弈"></a>除数博弈</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/divisor-game/" target="_blank" rel="noopener">除数博弈</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200315100813053.png" alt="image-20200315100813053"></p>
</blockquote>
<ul>
<li><p>状态：</p>
<p>  dp[i]为黑板数字为i时，爱丽丝输赢情况</p>
<p>  其实可以知道如果dp[i-x]有为输的情况的话（x为i的某个因子），那么dp[i]定是赢（都是最好状态去玩）</p>
</li>
<li><p>状态转移方程：</p>
<p>  $dp[i] = \sum_{x=1}^{i-1} dp<a href="x为i的因子">i-x</a>$</p>
</li>
<li><p>边界：</p>
<p>  $dp[1] = 0,dp[2] = 1$</p>
</li>
</ul>
<h2 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h2><blockquote>
<p>先看这个题解：</p>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/" target="_blank" rel="noopener">巨佬题解</a></p>
</blockquote>
<p>然后一题一题来：</p>
<h3 id="买卖股票的最好时机I"><a href="#买卖股票的最好时机I" class="headerlink" title="买卖股票的最好时机I"></a>买卖股票的最好时机I</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">买卖股票的最好时机I</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200322220641529.png" alt="image-20200322220641529"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//trick..</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>))</span></span>;  <span class="comment">//因为k为1，所以无需k</span></span><br><span class="line">        <span class="comment">//边界：i = 0</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];  <span class="comment">//第0天便买入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);  <span class="comment">//是prices[i]，因为当天卖当天状态才会改</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>],  -prices[i]);  <span class="comment">//注意是-prices[i],没有dp[i-1][0],那是因为这个状态对应的是唯一一次买入，之前定为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>由于当前状态只依赖前一个状态，由此可以节省空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界：i = 0</span></span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = INT_MIN;  <span class="comment">//设成负无穷，这样在prices为空时也不需要特殊判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);  <span class="comment">//是prices[i]，因为当天卖当天状态才会改</span></span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1,  -prices[i]);  <span class="comment">//注意是-prices[i],没有dp[i-1][0],那是因为这个状态对应的是唯一一次买入，之前定为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="买卖股票的最好时机II"><a href="#买卖股票的最好时机II" class="headerlink" title="买卖股票的最好时机II"></a>买卖股票的最好时机II</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">买卖股票的最好时机II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323094447733.png" alt="image-20200323094447733"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//即k为正无穷,那么k无所谓记录与不记录</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//trick..</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>))</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">0</span>];  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>改进：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//即k为正无穷,那么k无所谓记录与不记录</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = INT_MIN; <span class="comment">//设成负无穷，这样在prices为空时也不需要特殊判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1, dp_i_0 - prices[i]);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> dp_i_0;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="买卖股票的最好时机–含冷冻期"><a href="#买卖股票的最好时机–含冷冻期" class="headerlink" title="买卖股票的最好时机–含冷冻期"></a>买卖股票的最好时机–含冷冻期</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">买卖股票的最好时机–含冷冻期</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323100108848.png" alt="image-20200323100108848"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">0</span> || prices.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>))</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(-prices[<span class="number">0</span>], -prices[<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>] + prices[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);           </span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">2</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如你所见，以上为了防止越界，base_case的设定比较麻烦，由于其依赖的值就前两个，所以可以换种写法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">0</span> || prices.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> dp_pre_0 = <span class="number">0</span>; <span class="comment">//代表dp[i-2][0]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);           </span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1, dp_pre_0 - prices[i]);</span><br><span class="line">            dp_pre_0 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h3 id="买卖股票的最好时机–含手续费"><a href="#买卖股票的最好时机–含手续费" class="headerlink" title="买卖股票的最好时机–含手续费"></a>买卖股票的最好时机–含手续费</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">买卖股票的最好时机–含手续费</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323103654593.png" alt="image-20200323103654593"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1, dp_i_0 - prices[i] -fee);  <span class="comment">//这个fee可以在这里减也可以在上面减，不过在上面减可能会int数值越界，所以放在这里更好</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="买卖股票的最好时机III"><a href="#买卖股票的最好时机III" class="headerlink" title="买卖股票的最好时机III"></a>买卖股票的最好时机III</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">买卖股票的最好时机III</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323105402319.png" alt="image-20200323105402319"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max_k = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="title">dp</span><span class="params">(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(max_k + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>)))</span></span>;  <span class="comment">//这个定义真的绕</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> == <span class="number">-1</span>) &#123; </span><br><span class="line">                    <span class="comment">/* 处理 base case */</span></span><br><span class="line">                    dp[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][k][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][k][<span class="number">0</span>], dp[i - <span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][k][<span class="number">1</span>], dp[i - <span class="number">1</span>][k - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>() - <span class="number">1</span>][max_k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h3 id="买卖股票的最好时机IV"><a href="#买卖股票的最好时机IV" class="headerlink" title="买卖股票的最好时机IV"></a>买卖股票的最好时机IV</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">买卖股票的最好时机IV</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323112807854.png" alt="image-20200323112807854"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> max_k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(max_k &gt; prices.<span class="built_in">size</span>()/<span class="number">2</span>) <span class="keyword">return</span> maxProfit_inf(prices);  <span class="comment">//剪枝</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="title">dp</span><span class="params">(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(max_k + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>)))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i - <span class="number">1</span> == <span class="number">-1</span>) &#123;  <span class="comment">//base_case</span></span><br><span class="line">                    dp[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][k][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][k][<span class="number">0</span>], dp[i - <span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][k][<span class="number">1</span>], dp[i - <span class="number">1</span>][k - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>() - <span class="number">1</span>][max_k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//k大于一半的size，直接当做INF处理，重用之前的方法来做</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit_inf</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = INT_MIN; <span class="comment">//设成负无穷，这样在prices为空时也不需要特殊判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1, dp_i_0 - prices[i]);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> dp_i_0;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="个人刷题"><a href="#个人刷题" class="headerlink" title="个人刷题"></a>个人刷题</h2><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">编辑距离</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323163409913.png" alt="image-20200323163409913"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//虽然对dp的遍历是正向遍历，但是对字符串的处理却是反向处理</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="built_in">string</span> word1, <span class="built_in">string</span> word2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j]表示s1[0..i] 和 s2[0..j] 的最小编辑距离，但有可能s1和s2连0都没有，所以多定义一位</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(word1.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(word2.<span class="built_in">size</span>() + <span class="number">1</span>))</span></span>;  <span class="comment">//多定义一位是因为两字符串可能为空</span></span><br><span class="line">        <span class="comment">//边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= word1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= word2.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= word1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= word2.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(word1[i - <span class="number">1</span>] == word2[j - <span class="number">1</span>]) &#123;  <span class="comment">//i-1即第i位，j-1即第j位</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//其中三个分别对应删除，插入，替换操作，要对字符串反向处理来理解</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span>), dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[word1.<span class="built_in">size</span>()][word2.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h3 id="区域与检索–数组不可变"><a href="#区域与检索–数组不可变" class="headerlink" title="区域与检索–数组不可变"></a>区域与检索–数组不可变</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/" target="_blank" rel="noopener">区域与检索–数组不可变</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323211641435.png" alt="image-20200323211641435"></p>
</blockquote>
<p>起初看到这道题目，我是一脸懵逼，这么简单，还要动态规划？？</p>
<p>于是暴力做了一下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        ans = nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">            sum += ans[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray* obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>能过，但是用时挺长的。</p>
<p>思考一下dp做法：</p>
<p>dp[i]表示到前i个的总和</p>
<p>$dp[i] = dp[i - 1] + nums[i-1]$ </p>
<p>要注意这里nums[i-1]表示的实际是第i个</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        dp.resize(nums.<span class="built_in">size</span>() + <span class="number">1</span>);  <span class="comment">//重新定义vector数组大小的方法！</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dp[j + <span class="number">1</span>] - dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray* obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h3 id="粉刷房子I-amp-II"><a href="#粉刷房子I-amp-II" class="headerlink" title="粉刷房子I&amp;II"></a>粉刷房子I&amp;II</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/paint-house/" target="_blank" rel="noopener">粉刷房子</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323221750065.png" alt="image-20200323221750065"></p>
<p><a href="https://leetcode-cn.com/problems/paint-house-ii/" target="_blank" rel="noopener">粉刷房子II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200323223459080.png" alt="image-20200323223459080"></p>
</blockquote>
<p>自己想出来的，值得开心一把！</p>
<p>分析一下：</p>
<ul>
<li><p>状态有：</p>
<ul>
<li>房子</li>
<li>颜色</li>
</ul>
</li>
<li><p>dp数组含义：</p>
<p>  所以设一个二维dp数组dp[i][j]，代表0~i号房子且第i号房子粉刷为j颜色的最小成本其中j取值为0，1，2(粉刷房子II是k个取值)</p>
<p>  所以也可以看做dp[i][1,2,3]</p>
</li>
<li><p>状态转移方程：</p>
<p>  容易想到：</p>
<p>  $dp[i][j] = min{dp[i - 1][r] | r\in[0,k]&amp;r\neq j} + costs[i][j]$</p>
<p>  当然可以写的更加简单一点对于这一题，但是这个方程更有普遍性，对于它的变种题（粉刷房子II）也可以使用。</p>
</li>
<li><p>base case:</p>
<p>  显而易见：$dp[0][j] = costs[0][j](j\in [0,k])$</p>
</li>
</ul>
<p>I的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = costs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">size</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//trick</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(<span class="built_in">size</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>))</span> </span>;</span><br><span class="line">        <span class="comment">//边界</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//第二维只有三个，直接写出来即可，不用循环遍历</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + costs[i][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + costs[i][<span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">2</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + costs[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(dp[<span class="built_in">size</span> - <span class="number">1</span>][<span class="number">0</span>], dp[<span class="built_in">size</span> - <span class="number">1</span>][<span class="number">1</span>]), dp[<span class="built_in">size</span> - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>II的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = costs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">int</span> k = costs[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k))</span> </span>;</span><br><span class="line">        <span class="comment">//边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = costs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = INT_MAX;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; k; q++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q != j) temp = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][q], temp);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = temp + costs[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(dp[n - <span class="number">1</span>][i], ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">判断子序列</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324094846209.png" alt="image-20200324094846209"></p>
</blockquote>
<p>用的dp法做，先写一下dp法的思路：</p>
<p>两个字符串的问题，一般都是二维dp：</p>
<p>状态：s的前i个元素，t的前j个元素位置</p>
<p>dp数组含义：dp[i][j]代表s的前i个元素是否为t的前j个元素的子序列，是则true，否则false</p>
<p>然后是状态转移方程：$$dp[i][j] = \begin{cases}dp[i - 1][j - 1]&amp;s[i] = t[j]\dp[i][j-1]&amp;s[i]\neq t[j] \end{cases}$$</p>
<blockquote>
<p>这里解释一下状态转移方程的得来：</p>
<p>当s[i] == t[j]时，这两个元素就不重要了，取决于dp[i-1][j-1]是什么</p>
<p>当s[i] != t[j]时，那么t[j]就不重要了，取决于dp[i][j-1]是什么</p>
</blockquote>
<p>base case：</p>
<p>容易想到：</p>
<p>$dp[i][j] = false ,i&gt;j$  这一条可以直接在二重循环中体现: <code>int j = i</code></p>
<p>$dp[0][j] = true,j\in [0,n]$</p>
<p>转换为代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubsequence</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = t.length();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">dp</span><span class="params">(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>))</span></span>;  <span class="comment">//dp</span></span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i  = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i - <span class="number">1</span>] == t[j - <span class="number">1</span>]) &#123; <span class="comment">//由于i-1即第i个</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i == m &amp;&amp; dp[i][j] == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//剪枝</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不过很可惜，会超时，哪怕我还做点了剪枝（对true情况有效），再怎么剪就不会了。。。</p>
<p>看了看大家的题解，基本都没有用dp做的。的确，dp是基于穷举的优化，自然不会快。</p>
<p>然后自己参考了一个双指针的做法，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubsequence</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = t.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != t[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++, j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">爬楼梯</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324103528508.png" alt="image-20200324103528508"></p>
</blockquote>
<p>按dp题思路做：</p>
<p>状态：楼梯数</p>
<p>dp数组含义：dp[i]表示i阶楼梯所需的方法数</p>
<p>方程：$dp[i] = dp[i-1] + dp[i-2],i&gt;=2$</p>
<p>这不就是斐波那契数列吗？？</p>
<p>Base case: dp[0] = 0, dp[1] = 1, dp[2] = 2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = <span class="number">1</span>, dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>双一百，done!</p>
<h3 id="使用最小花费爬楼梯"><a href="#使用最小花费爬楼梯" class="headerlink" title="使用最小花费爬楼梯"></a>使用最小花费爬楼梯</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener">使用最小花费爬楼梯</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324111349584.png" alt="image-20200324111349584"></p>
</blockquote>
<p>dp来做：</p>
<p>先分析：</p>
<p>状态：阶梯数</p>
<p>dp数组含义：dp[i]为到第i阶(第0阶是指没有阶梯，而不是有一阶!)的最小花费</p>
<p>方程：$dp[i] = min{dp[i - 1] + costs[i - 2], dp[i - 2] + costs[i - 3]|i&gt;=3}$</p>
<p>这里要注意里面的costs[i-2]代表的是第i-2阶费用</p>
<p>base case: dp[0] = 0, dp[1] = 0, dp[2] = 0;</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(len + <span class="number">2</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = <span class="number">0</span>, dp[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= len + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>] + cost[i - <span class="number">2</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="打家劫舍I-amp-II-amp-III"><a href="#打家劫舍I-amp-II-amp-III" class="headerlink" title="打家劫舍I&amp;II&amp;III"></a>打家劫舍I&amp;II&amp;III</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">打家劫舍</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324161427572.png" alt="image-20200324161427572"></p>
</blockquote>
<p>开始的dp思路有问题，虽然我做出来了：</p>
<p>dp数组含义：dp[i]表示以i号房为尾能偷盗的最多金额</p>
<p>方程：$dp[i]=nums[i-1]+max(dp[j]|j&lt;(i-1))$</p>
<p>base case: dp[0] = 0, dp[1] = A[0], dp[2] = max(A[0], A[1])</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//之前那种简单的间隔思想是错的，比如[1000,1,1,1000]就不适用</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//base case:</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = nums[<span class="number">0</span>], dp[<span class="number">2</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> ans = dp[<span class="number">2</span>];  <span class="comment">//这样ans是前3个最大的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp[i - <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">2</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">                temp = <span class="built_in">max</span>(dp[j], temp);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = nums[i - <span class="number">1</span>] + temp;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324162448046.png" alt="image-20200324162448046"></p>
<p>后来参考别人的代码，这么做会更好：</p>
<p>dp数组含义：dp[i]代表前i号房（包括i号房）可以偷到的最多金额</p>
<p>所以有方程：$dp[i]=max(dp[i-1], dp[i-2] + nums[i-1])$</p>
<p><strong>意思是偷了前一家啥也不做，所以dp[i] == dp[i-1],亦或是要偷这一家，将其与dp[i-2]相加（不能是dp[i-1]是因为无法保证前一家未被偷）</strong></p>
<p>所以有base case: dp[0] = 0, dp[1] =nums[1]</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//之前那种简单的间隔思想是错的，比如[1000,1,1,1000]就不适用</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = nums[<span class="number">0</span>];  <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>显然更快。。</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324163731595.png" alt="image-20200324163731595"></p>
<p>看看二：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">打家劫舍II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200326150722658.png" alt="image-20200326150722658"></p>
</blockquote>
<p>难点在于无法确定之前状态，所以可以以I的方法分别遍历1~n-1和2~n</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//其实就比较1~n-1和2~n两种情况的大小即可(所谓二者择其一)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp_1</span><span class="params">(n + <span class="number">1</span>)</span></span>; <span class="comment">//1~n-1</span></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp_2</span><span class="params">(n + <span class="number">1</span>)</span></span>; <span class="comment">//2~n</span></span><br><span class="line">        dp_1[<span class="number">0</span>] = <span class="number">0</span>; dp_1[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp_1[i] = <span class="built_in">max</span>(dp_1[i - <span class="number">1</span>], dp_1[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp_2[<span class="number">0</span>] = <span class="number">0</span>; dp_2[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp_2[i] = <span class="built_in">max</span>(dp_2[i - <span class="number">1</span>], dp_2[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp_1[n - <span class="number">1</span>], dp_2[n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>来看III：</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">打家劫舍III</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200326151017821.png" alt="image-20200326151017821"></p>
</blockquote>
<p>我一开始觉得很复杂没有想出来，但是仔细一想，实际没有那么复杂，这种树型dp套路同样固定：</p>
<p>以下是两个思路借鉴：</p>
<p>第一种方式我觉得最标准但是无法用代码表示（或者很麻烦）</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200326164225772.png" alt="image-20200326164225772"></p>
</blockquote>
<p>第二种才是可以转换为代码的，这也是树型+dp的套路所在：</p>
<blockquote>
<p>状态转移方程：</p>
<p>如果选当前结点，其最大金额为所有孙子结点的最大值之和加上当前结点的val</p>
<p>如果不选当前结点，其金额为所有孩子结点最大值之和</p>
<p>所以在以上两种方案中选最优，显然的递归</p>
<p>即：$dp[root] = max(dp[root.left]+dp[root.right],dp[root.l.l]+dp[root.l.r]+dp[root.r.l]+dp[root.r.r]+val[root])$</p>
</blockquote>
<p>当然，第二种代码直接递归有重叠子问题，直接放会超时，所以需要一个备忘录(指针情况可以用一个map！技巧！)：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//直接递归会超时。。所以用一个备忘录记录重叠子问题！</span></span><br><span class="line">    <span class="built_in">map</span>&lt;TreeNode*, <span class="keyword">int</span>&gt; memo;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(memo.<span class="built_in">find</span>(root) != memo.<span class="built_in">end</span>()) <span class="keyword">return</span> memo[root];</span><br><span class="line">        <span class="keyword">int</span> money_1 = rob(root-&gt;left) + rob(root-&gt;right);</span><br><span class="line">        <span class="keyword">int</span> money_2 = root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            money_2 += rob(root-&gt;left-&gt;left) + rob(root-&gt;left-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            money_2 += rob(root-&gt;right-&gt;left) + rob(root-&gt;right-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="built_in">max</span>(money_1, money_2);</span><br><span class="line">        memo[root] = <span class="built_in">max</span>(money_1, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>







<h3 id="栅栏涂色"><a href="#栅栏涂色" class="headerlink" title="栅栏涂色"></a>栅栏涂色</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/paint-fence/" target="_blank" rel="noopener">栅栏涂色</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324171816489.png" alt="image-20200324171816489"></p>
</blockquote>
<p>以后先从一维dp想起，实在不行再二维，dp做法：</p>
<p>状态：柱子</p>
<p>dp数组含义：dp[i]表示前i个最多方案数</p>
<p>方程：$dp[i] = dp[i-1]\times (k-1)+dp[i-2]\times (k-1),i &gt; 2$</p>
<p>Base case: $dp[0] = 0, dp[1] = k, dp[2] = k\times k$</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> k;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = k, dp[<span class="number">2</span>] = k*k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] * (k - <span class="number">1</span>) + dp[i - <span class="number">2</span>] * (k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="三步问题"><a href="#三步问题" class="headerlink" title="三步问题"></a>三步问题</h3><blockquote>
<p><a href="">三步问题</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200324174018373.png" alt="image-20200324174018373"></p>
</blockquote>
<p>状态：楼梯数</p>
<p>dp数组含义: dp[i]表示i阶所对应的方法数</p>
<p>方程：$dp[i] = dp[i-1] + dp[i-2] + dp[i-3],i&gt;3$</p>
<p>base case：$dp[0] = 0,dp[1] = 1, dp[2] = 2, dp[3] = 4$</p>
<p>我感觉吧，这题并不是难在写出动态规划写法，而是对于这么大的一个数的处理，须知在每一次处理时便取余和直接对结果取余的答案一致。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waysToStep</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = <span class="number">1</span>, dp[<span class="number">2</span>] = <span class="number">2</span>, dp[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = (dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>] + dp[i - <span class="number">3</span>])%(<span class="number">1000000007</span>);  <span class="comment">//要提前模，否则数据之后存不下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>DP-题集2</title>
    <url>/2020/03/27/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/3-2-DP-%E9%A2%98%E9%9B%862/</url>
    <content><![CDATA[<h1 id="DP-题集2"><a href="#DP-题集2" class="headerlink" title="DP-题集2"></a>DP-题集2</h1><p>由于一个md文档太大的话打开的响应比较慢，所以放一些放这里</p>
<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314114337887.png" alt="image-20200314114337887"></p>
</blockquote>
<ul>
<li>状态：个数，容量</li>
<li>选择：当前物品选或不选</li>
<li>dp数组含义：dp[i][w]表示前i个物品在w大的背包下的最大价值</li>
<li>状态转移方程：$dp[i][w]=max{dp[i-1][w-wt[i-1]]+val[i-1], dp[i-1][w]}$(其实就是选与不选–这里凸显了确定选择的作用！)</li>
<li>base case：$dp[i][0]=0, dp[0][w]=0$</li>
<li>代码：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>(w + <span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="comment">//base case:</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= w; i++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][w] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123;</span><br><span class="line">        dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][w-wt[i<span class="number">-1</span>]] + val[i<span class="number">-1</span>], dp[i - <span class="number">1</span>][w]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="分割等和子集（01背包问题）"><a href="#分割等和子集（01背包问题）" class="headerlink" title="分割等和子集（01背包问题）"></a>分割等和子集（01背包问题）</h3><blockquote>
<p><a href="">分割等和子集</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200327222814550.png" alt="image-20200327222814550"></p>
</blockquote>
<p>分析：</p>
<p>先转换一下问题：此题可以理解为，取出若干个数，使其之和为数组总和的一半（数组总和为奇数直接return false）</p>
<p>于是dp常规分析:</p>
<ul>
<li>状态：元素，总值</li>
<li>选择：当前元素选与不选</li>
<li>dp数组含义：dp[i][j]表示前i个元素可否选出和值恰为j的子集</li>
<li>$dp[i][j]=dp[i-1][j-nums[i-1]]||dp[i-1][j]$（就是选与不选！）</li>
<li>base case: $dp[i][0] = true, dp[0][j] = false(j\neq 0)$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//此题可以理解为，取出若干个数，使其之和为数组总和的一半（数组总和为奇数直接return false）</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = accumulate(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>); <span class="comment">//需要#include&lt;numeric&gt;</span></span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(target + <span class="number">1</span>))</span></span>;</span><br><span class="line">        <span class="comment">//base case:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; i++) dp[<span class="number">0</span>][i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= target; j++) &#123;</span><br><span class="line">                <span class="comment">//不能直接写这句话： dp[i][j] = dp[i - 1][j - nums[i - 1]] || dp[i - 1][j];</span></span><br><span class="line">                <span class="comment">//因为j - nums[i - 1]的值可能小于0</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt;= nums[i - <span class="number">1</span>]) dp[i][j] = dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]] || dp[i - <span class="number">1</span>][j];  <span class="comment">//就是选与不选！</span></span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314163221467.png" alt="image-20200314163221467"></p>
<ul>
<li><p>状态：容量，物品</p>
</li>
<li><p>选择：选或不选当前物品</p>
</li>
<li><p>dp数组含义：dp[i][w]表示前i个物品在w大的背包下的最大价值</p>
</li>
<li><p>状态转移方程：</p>
<p>  $dp[i][w]=max{dp[i][w-wt[i-1]]+val[i-1], dp[i-1][w]}$(其实就是选与不选–这里凸显了确定选择的作用！)</p>
<p>  这里和01背包唯一一点区别是选的情况第一维仍为i，这是因为它每个物品无限，之前还可以选。</p>
</li>
<li><p>base case：$dp[i][0]=0, dp[0][w]=0$</p>
</li>
<li><p>代码：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>(w + <span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="comment">//base case:</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= w; i++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][w] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123;</span><br><span class="line">        dp[i][j] = <span class="built_in">max</span>(dp[i][w-wt[i<span class="number">-1</span>]] + val[i<span class="number">-1</span>], dp[i - <span class="number">1</span>][w]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="零钱兑换II"><a href="#零钱兑换II" class="headerlink" title="零钱兑换II"></a>零钱兑换II</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/coin-change-2/" target="_blank" rel="noopener">零钱兑换II</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200328172759346.png" alt="image-20200328172759346"></p>
</blockquote>
<p>开始我想用回溯做，但发现做不出来，因为这里的求组合方式比较特殊（结果组合不规定长度），无法去重</p>
<p>后来从dp下手做，参考了一下别人的做法，其实就是一个完全背包问题（以完全背包来做就不用担心组合重复的情况，因为只是考虑当前硬币选或不选）：</p>
<p>状态：硬币，金额</p>
<p>选择：当前硬币选或不选</p>
<p>dp数组含义：dp[i][j]表示前i个硬币可以达到j金额的组合数</p>
<p>方程：$dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i-1]]$</p>
<p>（就是不选和选相加，注意选时的硬币下标仍为i，因为硬币个数无限，这个硬币上次仍然可以选—-==也是完全背包和01背包的唯一不同之处==）</p>
<p>base case：$dp[i][0] = 1, dp[0][j]=0,j\neq 0$（第二个可以不写，但我还是写了，反正是比较慢的做法，也不差这个，hh）</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(amount + <span class="number">1</span>))</span></span>;</span><br><span class="line">        <span class="comment">//base case:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j - coins[i - <span class="number">1</span>] &gt;= <span class="number">0</span>) dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - coins[i - <span class="number">1</span>]]; <span class="comment">//完全背包，选的情况仍为i</span></span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="一和零"><a href="#一和零" class="headerlink" title="一和零"></a>一和零</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/" target="_blank" rel="noopener">一和零</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200328182252794.png" alt="image-20200328182252794"></p>
</blockquote>
<p>其实就是0-1背包问题，可以先把每个字符串的01统计下来，然后去填满m个0和n个1.</p>
<p>状态：0的个数，1的个数，字符串</p>
<p>选择：是否选择当前字符串</p>
<p>dp数组含义：dp[k][i][j]表示前k个字符串中，能被i个0，j个1所表示的最大数量</p>
<p>方程：$dp[k][i][j] = max(dp[k - 1][i][j], dp[k - 1][i - nums[k - 1].num_0][j - nums[k - 1].num_1] + 1)$（选与不选）</p>
<p>base case：$dp[k][0][0] = 0, dp[0][i][j] = 0$</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> num_0;</span><br><span class="line">        <span class="keyword">int</span> num_1;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">string</span>&amp; str, Node&amp; node)</span></span>&#123;</span><br><span class="line">        node.num_0 = <span class="number">0</span>;</span><br><span class="line">        node.num_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'0'</span>) node.num_0++;</span><br><span class="line">            <span class="keyword">else</span> node.num_1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先统计各个字符串01个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;Node&gt; <span class="title">nums</span><span class="params">(<span class="built_in">size</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            helper(strs[i], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="title">dp</span><span class="params">(<span class="built_in">size</span> + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>)))</span></span>;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="built_in">size</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i - nums[k - <span class="number">1</span>].num_0 &gt;= <span class="number">0</span> &amp;&amp; j - nums[k - <span class="number">1</span>].num_1 &gt;= <span class="number">0</span>) dp[k][i][j] = <span class="built_in">max</span>(dp[k - <span class="number">1</span>][i][j], dp[k - <span class="number">1</span>][i - nums[k - <span class="number">1</span>].num_0][j - nums[k - <span class="number">1</span>].num_1] + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span> dp[k][i][j] = dp[k - <span class="number">1</span>][i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="built_in">size</span>][m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="比特位计数"><a href="#比特位计数" class="headerlink" title="比特位计数"></a>比特位计数</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/counting-bits/" target="_blank" rel="noopener">比特位计数</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200327210144425.png" alt="image-20200327210144425"></p>
</blockquote>
<p>一开始没能想到用dp怎么做，我就暴力了一下。。</p>
<p>这个思路很容易理解，就是不断除二取余数来获取1个数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//不断除二，根据余数来获取其1的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>) ans++;</span><br><span class="line">            n = n/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            ans.push_back(helper(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>后来看了别人的做法，豁然开朗：</p>
<blockquote>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200327211345819.png" alt="image-20200327211345819" style="zoom:50%;" />
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(num + <span class="number">1</span>)</span></span>;<span class="comment">//dp[i]表示i的1个数</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> dp;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;  <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>) dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;  <span class="comment">//奇数</span></span><br><span class="line">            <span class="keyword">else</span>&#123; dp[i] = dp[i/<span class="number">2</span>];&#125; <span class="comment">//偶数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>二分-题集</title>
    <url>/2020/06/09/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/5-2-%E4%BA%8C%E5%88%86-%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h1 id="二分-题集"><a href="#二分-题集" class="headerlink" title="二分-题集"></a>二分-题集</h1><h3 id="统计有序矩阵中的负数"><a href="#统计有序矩阵中的负数" class="headerlink" title="统计有序矩阵中的负数"></a>统计有序矩阵中的负数</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix/" target="_blank" rel="noopener">统计有序矩阵中的负数</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200329213609290.png" alt="image-20200329213609290"></p>
</blockquote>
<p>这题重在使用二分法做，用来理解二分法的那些细枝末节，而不是玄学编程。</p>
<p>东哥的那篇文章讲的太好了，看完基本就可以彻底理解！</p>
<p>具体不写了，思路见注释</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//找到第一个小于0的数即可</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == <span class="number">0</span>) &#123;  <span class="comment">//每个都写条件，便于理清思路</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= nums.<span class="built_in">size</span>()) <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> left;  <span class="comment">//由于是返回第一个小于0的索引,所以不是返回right(right是为最后一个为0的索引)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countNegatives</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            ans += (grid[i].<span class="built_in">size</span>() - binary_search(grid[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="山脉数组的峰顶索引"><a href="#山脉数组的峰顶索引" class="headerlink" title="山脉数组的峰顶索引"></a>山脉数组的峰顶索引</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/" target="_blank" rel="noopener">山脉数组的峰顶索引</a></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200329225904049.png" alt="image-20200329225904049"></p>
</blockquote>
<p>二分查，但是我疑惑的是为何不会越界？</p>
<p>而且为何速度比我顺序还慢？？？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = A.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[mid] &gt; A[mid - <span class="number">1</span>] &amp;&amp; A[mid] &gt; A[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(A[mid] &gt; A[mid - <span class="number">1</span>] &amp;&amp; A[mid] &lt; A[mid + <span class="number">1</span>]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(A[mid] &lt; A[mid - <span class="number">1</span>] &amp;&amp; A[mid] &gt; A[mid + <span class="number">1</span>]) right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>二分-思想</title>
    <url>/2020/03/27/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/5-1-%E4%BA%8C%E5%88%86-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>其实当时学完二分，题目还是不会做。。</p>
<p>算法笔记这本书吧，很多东西说实在的没有教会我，倒是leetcode上的题解教会了我很多东西</p>
<p>同样的，这里我参考labuladong大神的文章来学一下概念</p>
</blockquote>
<p>==我这里强调一个重点！！！==</p>
<p>==以下的左边界和右边界函数均是求target的左右边界，也就是第一个为target的下标和最后一个为target的下标，如果要返回第一个大于target的值的下标或者第一个小于值的下标，均要在return处下文章！！==</p>
<p>就是这题：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">在排序数组中查找元素的第一个和最后一个位置</a></p>
<h3 id="零、框架"><a href="#零、框架" class="headerlink" title="零、框架"></a>零、框架</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">//为了防止计算left+right时溢出，这么写如果数据太大也不会溢出</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==分析二分查找的一个技巧是：不要出现 else，而是把所有情况用 else if 写清楚，这样可以清楚地展现所有细节==。本文都会使用 else if，旨在讲清楚，读者理解后可自行简化。</p>
<p>其中<code>...</code>标记的部分，就是可能出现细节问题的地方，当你见到一个二分查找的代码时，首先注意这几个地方。后文用实例分析这些地方能有什么样的变化。</p>
<p>另外声明一下，计算 mid 时需要防止溢出，代码中<code>left + (right - left) / 2</code>就和<code>(left + right) / 2</code>的结果相同，但是有效防止了<code>left</code>和<code>right</code>太大直接相加导致溢出。</p>
<h3 id="一、寻找一个数"><a href="#一、寻找一个数" class="headerlink" title="一、寻找一个数"></a>一、寻找一个数</h3><blockquote>
<p>这个场景是最简单的，可能也是大家最熟悉的，即搜索一个数，如果存在，返回其索引，否则返回 -1。</p>
</blockquote>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;  <span class="comment">//注意！</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123; <span class="comment">//注意！</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">//为了防止计算left+right时溢出，这么写如果数据太大也不会溢出</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">//注意！</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">//注意！</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//注意！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、为什么 while 循环的条件中是 &lt;=，而不是 &lt;？</p>
<p>答：因为初始化<code>right</code>的赋值是<code>nums.length - 1</code>，即最后一个元素的索引，而不是<code>nums.length</code>。</p>
<p>这二者可能出现在不同功能的二分查找中，区别是：==前者相当于两端都闭区间<code>[left, right]</code>==，后者相当于左闭右开区间<code>[left, right)</code>，因为索引大小为<code>nums.length</code>是越界的。</p>
<p>==我们这个算法中使用的是前者<code>[left, right]</code>两端都闭的区间。这个区间其实就是每次进行搜索的区间。==</p>
<p>什么时候应该停止搜索呢？当然，找到了目标值的时候可以终止：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">	<span class="keyword">return</span> mid;</span><br></pre></td></tr></table></figure>

<p>但如果没找到，就需要 while 循环终止，然后返回 -1。那 while 循环什么时候应该终止？==搜索区间为空的时候应该终止，意味着你没得找了，就等于没找到嘛。==</p>
<p><code>while(left &lt;= right)</code>的终止条件是<code>left == right + 1</code>，写成区间的形式就是<code>[right + 1, right]</code>，或者带个具体的数字进去<code>[3, 2]</code>，==可见这时候区间为空==，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p>
<p>==<code>while(left &lt; right)</code>的终止条件是<code>left == right</code>，写成区间的形式就是<code>[left, right]</code>，或者带个具体的数字进去<code>[2, 2]</code>，这时候区间非空，还有一个数 2，但此时 while 循环终止了。也就是说这区间<code>[2, 2]</code>被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。==</p>
<p>当然，如果你非要用<code>while(left &lt; right)</code>也可以，我们已经知道了出错的原因，就打个补丁好了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[left] == target ? left : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<p>2、为什么<code>left = mid + 1</code>，<code>right = mid - 1</code>？我看有的代码是<code>right = mid</code>或者<code>left = mid</code>，没有这些加加减减，到底怎么回事，怎么判断？</p>
<p>答：这也是二分查找的一个难点，不过只要你能理解前面的内容，就能够很容易判断。</p>
<p>刚才明确了「搜索区间」这个概念，而且本算法的搜索区间是两端都闭的，即<code>[left, right]</code>。那么当我们发现索引<code>mid</code>不是要找的<code>target</code>时，下一步应该去搜索哪里呢？</p>
<p>当然是去搜索<code>[left, mid-1]</code>或者<code>[mid+1, right]</code>对不对？因为<code>mid</code>已经搜索过，应该从搜索区间中去除。</p>
<p>3、此算法有什么缺陷？</p>
<p>答：至此，你应该已经掌握了该算法的所有细节，以及这样处理的原因。但是，这个算法存在局限性。</p>
<p>比如说给你有序数组<code>nums = [1,2,2,2,3]</code>，<code>target</code>为 2，此算法返回的索引是 2，没错。但是如果我想得到<code>target</code>的左侧边界，即索引 1，或者我想得到<code>target</code>的右侧边界，即索引 3，这样的话此算法是无法处理的。</p>
<p>这样的需求很常见，你也许会说，找到一个 target，然后向左或向右线性搜索不行吗？可以，但是不好，因为这样难以保证二分查找对数级的复杂度了。</p>
<p>我们后续的算法就来讨论这两种二分查找的算法。</p>
<h3 id="二、寻找左侧边界的二分搜索"><a href="#二、寻找左侧边界的二分搜索" class="headerlink" title="二、寻找左侧边界的二分搜索"></a>二、寻找左侧边界的二分搜索</h3><blockquote>
<p>即得到第一个等于目标值的索引</p>
</blockquote>
<p>以下是最常见的代码形式，其中的标记是需要注意的细节：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length();  <span class="comment">//注意</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;  <span class="comment">//注意</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            right = mid; <span class="comment">//注意！！不是立刻返回，而是继续缩小 ，精髓所在！</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">//小于并非大于等于关系，直接跳过</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;   <span class="comment">//这个数有可能满足，所以不能跳过</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;  <span class="comment">//注意！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、为什么 while 中是<code>&lt;</code>而不是<code>&lt;=</code>?</p>
<p>答：用相同的方法分析，因为<code>right = nums.length</code>而不是<code>nums.length - 1</code>。因此每次循环的「搜索区间」是<code>[left, right)</code>左闭右开。</p>
<p><code>while(left &lt; right)</code>终止的条件是<code>left == right</code>，此时搜索区间<code>[left, left)</code>为空，所以可以正确终止。</p>
<p>PS：这里先要说一个搜索左右边界和上面这个算法的一个区别，也是很多读者问的：刚才的<code>right</code>不是<code>nums.length - 1</code>吗，为啥这里非要写成<code>nums.length</code>使得「搜索区间」变成左闭右开呢？</p>
<p>因为对于搜索左右侧边界的二分查找，这种写法比较普遍，我就拿这种写法举例了，保证你以后看到这类代码可以理解。其实你非要用两端都闭的写法反而更简单，我会在后面写相关的代码，把三种二分搜索都用一种两端都闭的写法统一起来，你耐心往后看就行了。</p>
<p>2、为什么没有返回 -1 的操作？如果<code>nums</code>中不存在<code>target</code>这个值，怎么办？</p>
<p>答：因为要一步一步来，先理解一下这个「左侧边界」有什么特殊含义：</p>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200329173848199.png" alt="image-20200329173848199" style="zoom:50%;" />

<p>对于这个数组，算法会返回 1。这个 1 的含义可以这样解读：==<code>nums</code>中小于 2 的元素有 1 个。==</p>
<p>比如对于有序数组<code>nums = [2,3,5,7]</code>,<code>target = 1</code>，算法会返回 0，含义是：<code>nums</code>中小于 1 的元素有 0 个。</p>
<p>再比如说<code>nums = [2,3,5,7], target = 8</code>，算法会返回 4，含义是：<code>nums</code>中小于 8 的元素有 4 个。</p>
<p>综上可以看出，函数的返回值（即<code>left</code>变量的值）取值区间是闭区间<code>[0, nums.length]</code>，所以我们简单添加两行代码就能在正确的时候 return -1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// target 比所有数都大</span></span><br><span class="line"><span class="keyword">if</span> (left == nums.length()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 类似之前算法的处理方式</span></span><br><span class="line"><span class="keyword">return</span> nums[left] == target ? left : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<p>3、为什么<code>left = mid + 1</code>，<code>right = mid</code>？和之前的算法不一样？</p>
<p>答：这个很好解释，因为我们的「搜索区间」是<code>[left, right)</code>左闭右开，==所以当<code>nums[mid]</code>被检测之后，下一步的搜索区间应该去掉<code>mid</code>分割成两个区间，即<code>[left, mid)</code>或<code>[mid + 1, right)</code>。==</p>
<p>4、为什么该算法能够搜索左侧边界？</p>
<p>答：关键在于对于<code>nums[mid] == target</code>这种情况的处理：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">    right = mid;</span><br></pre></td></tr></table></figure>

<p>可见，==找到 target 时不要立即返回，而是缩小「搜索区间」的上界<code>right</code>，在区间<code>[left, mid)</code>中继续搜索，即不断向左收缩，达到锁定左侧边界的目的。==</p>
<p>5、为什么返回<code>left</code>而不是<code>right</code>？</p>
<p>答：==都是一样的，因为 while 终止的条件是<code>left == right</code>。==</p>
<p>6、能不能想办法把<code>right</code>变成<code>nums.length - 1</code>，也就是继续使用两边都闭的「搜索区间」？这样就可以和第一种二分搜索在某种程度上统一起来了。</p>
<p>答：当然可以，只要你明白了「搜索区间」这个概念，就能有效避免漏掉元素，随便你怎么改都行。下面我们严格根据逻辑来修改：</p>
<p>因为你非要让搜索区间两端都闭，所以<code>right</code>应该初始化为<code>nums.length - 1</code>，while 的终止条件应该是<code>left == right + 1</code>，也就是其中应该用<code>&lt;=</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 搜索区间为 [left, right]</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// if else ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>因为搜索区间是两端都闭的，且现在是搜索左侧边界，所以<code>left</code>和<code>right</code>的更新逻辑如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">    <span class="comment">// 搜索区间变为 [mid+1, right]</span></span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">    <span class="comment">// 搜索区间变为 [left, mid-1]</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">    <span class="comment">// 收缩右侧边界</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 while 的退出条件是<code>left == right + 1</code>，所以当<code>target</code>比<code>nums</code>中所有元素都大时，会存在以下情况使得索引越界：</p>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200329175219688.png" alt="image-20200329175219688" style="zoom:50%;" />

<p>因此，最后返回结果的代码应该检查越界情况：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>

<p>至此，整个算法就写完了，完整代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length() - <span class="number">1</span>;  <span class="comment">//[left, right]</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">//搜索区间变为[left, mid - 1]---mid检测过了，所以要去掉mid</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;   <span class="comment">//搜索区间变为[mid + 1, right]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">//搜索区间变为[left, mid - 1]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查出界情况</span></span><br><span class="line">    <span class="keyword">if</span>(left &gt;= nums.length() || nums[left] != target) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//没有符合条件的或是不等于</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就和第一种二分搜索算法统一了，都是两端都闭的「搜索区间」，而且最后返回的也是<code>left</code>变量的值。只要把住二分搜索的逻辑，两种形式大家看自己喜欢哪种记哪种吧。</p>
<h3 id="三、寻找右侧边界的二分查找"><a href="#三、寻找右侧边界的二分查找" class="headerlink" title="三、寻找右侧边界的二分查找"></a>三、寻找右侧边界的二分查找</h3><blockquote>
<p>就是找到最后一个等于该数的元素，返回其下标</p>
</blockquote>
<p>类似寻找左侧边界的算法，这里也会提供两种写法，还是先写常见的左闭右开的写法，只有两处和搜索左侧边界不同，已标注：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length();</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">//注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、为什么这个算法能够找到右侧边界？</p>
<p>答：类似地，关键点还是这里：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>当<code>nums[mid] == target</code>时，不要立即返回，而是增大「搜索区间」的下界<code>left</code>，使得区间不断向右收缩，达到锁定右侧边界的目的。</p>
<p>2、为什么最后返回<code>left - 1</code>而不像左侧边界的函数，返回<code>left</code>？而且我觉得这里既然是搜索右侧边界，应该返回<code>right</code>才对。</p>
<p>答：首先，while 循环的终止条件是<code>left == right</code>，所以<code>left</code>和<code>right</code>是一样的，你非要体现右侧的特点，返回<code>right - 1</code>好了。</p>
<p>至于为什么要减一，这是搜索右侧边界的一个特殊点，关键在这个条件判断：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 这样想: mid = left - 1</span></span><br></pre></td></tr></table></figure>

<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200329181016477.png" alt="image-20200329181016477" style="zoom:50%;" />

<p>因为我们对<code>left</code>的更新必须是<code>left = mid + 1</code>，就是说 while 循环结束时，<code>nums[left]</code>一定不等于<code>target</code>了，而<code>nums[left-1]</code>可能是<code>target</code>。</p>
<p>至于为什么<code>left</code>的更新必须是<code>left = mid + 1</code>，同左侧边界搜索，就不再赘述。</p>
<p>3、为什么没有返回 -1 的操作？如果<code>nums</code>中不存在<code>target</code>这个值，怎么办？</p>
<p>答：类似之前的左侧边界搜索，因为 while 的终止条件是<code>left == right</code>，就是说<code>left</code>的取值范围是<code>[0, nums.length]</code>，所以可以添加两行代码，正确地返回 -1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> nums[left<span class="number">-1</span>] == target ? (left<span class="number">-1</span>) : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<p>4、是否也可以把这个算法的「搜索区间」也统一成两端都闭的形式呢？这样这三个写法就完全统一了，以后就可以闭着眼睛写出来了。</p>
<p>答：当然可以，类似搜索左侧边界的统一写法，其实只要改两个地方就行了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= rigth) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止越界</span></span><br><span class="line">    <span class="keyword">if</span>(right &lt; <span class="number">0</span> || nums[right] != target) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当<code>target</code>比所有元素都小时，<code>right</code>会被减到 -1，所以需要在最后防止越界：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200329182629065.png" alt="image-20200329182629065"></p>
<p>至此，搜索右侧边界的二分查找的两种写法也完成了，其实将「搜索区间」统一成两端都闭反而更容易记忆，你说是吧？</p>
<h3 id="四、逻辑统一"><a href="#四、逻辑统一" class="headerlink" title="四、逻辑统一"></a>四、逻辑统一</h3><p>来梳理一下这些细节差异的因果逻辑：</p>
<p>第一个，最基本的二分查找算法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">因为我们初始化 right = nums.length - <span class="number">1</span></span><br><span class="line">所以决定了我们的「搜索区间」是 [left, right]</span><br><span class="line">所以决定了 <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">同时也决定了 left = mid+<span class="number">1</span> 和 right = mid<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">因为我们只需找到一个 target 的索引即可</span><br><span class="line">所以当 nums[mid] == target 时可以立即返回</span><br></pre></td></tr></table></figure>

<p>第二个，寻找左侧边界的二分查找：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">因为我们初始化 right = nums.length</span><br><span class="line">所以决定了我们的「搜索区间」是 [left, right)</span><br><span class="line">所以决定了 <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">同时也决定了 left = mid + <span class="number">1</span> 和 right = mid</span><br><span class="line"></span><br><span class="line">因为我们需找到 target 的最左侧索引</span><br><span class="line">所以当 nums[mid] == target 时不要立即返回</span><br><span class="line">而要收紧右侧边界以锁定左侧边界</span><br></pre></td></tr></table></figure>

<p>第三个，寻找右侧边界的二分查找：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">因为我们初始化 right = nums.length</span><br><span class="line">所以决定了我们的「搜索区间」是 [left, right)</span><br><span class="line">所以决定了 <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">同时也决定了 left = mid + <span class="number">1</span> 和 right = mid</span><br><span class="line"></span><br><span class="line">因为我们需找到 target 的最右侧索引</span><br><span class="line">所以当 nums[mid] == target 时不要立即返回</span><br><span class="line">而要收紧左侧边界以锁定右侧边界</span><br><span class="line"></span><br><span class="line">又因为收紧左侧边界时必须 left = mid + <span class="number">1</span></span><br><span class="line">所以最后无论返回 left 还是 right，必须减一</span><br></pre></td></tr></table></figure>

<p>对于寻找左右边界的二分搜索，常见的手法是使用左闭右开的「搜索区间」，我们还根据逻辑将「搜索区间」全都统一成了两端都闭，便于记忆，只要修改两处即可变化出三种写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;  <span class="comment">//注意！</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123; <span class="comment">//注意！</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">//为了防止计算left+right时溢出，这么写如果数据太大也不会溢出</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">//注意！</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">//注意！</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//注意！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即得到第一个等于目标值的索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length() - <span class="number">1</span>;  <span class="comment">//[left, right]</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">//搜索区间变为[left, mid - 1]---mid检测过了，所以要去掉mid</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;   <span class="comment">//搜索区间变为[mid + 1, right]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">//搜索区间变为[left, mid - 1]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查出界情况</span></span><br><span class="line">    <span class="keyword">if</span>(left &gt;= nums.length() || nums[left] != target) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//没有符合条件的或是不等于</span></span><br><span class="line">    <span class="keyword">return</span> left;  <span class="comment">//左边界</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//即得到最后一个等于目标值的索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">//由等于情况可以推出返回什么-&gt; mid = left - 1-&gt; return left - 1;或return right;</span></span><br><span class="line">            left = mid + <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止越界</span></span><br><span class="line">    <span class="keyword">if</span>(right &lt; <span class="number">0</span> || nums[right] != target) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> right;  <span class="comment">//右边界</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果以上内容你都能理解，那么恭喜你，二分查找算法的细节不过如此。</p>
<p>通过本文，你学会了：</p>
<p>1、分析二分查找代码时，不要出现 else，全部展开成 else if 方便理解。</p>
<p>2、注意「搜索区间」和 while 的终止条件，如果存在漏掉的元素，记得在最后检查。</p>
<p>3、如需定义左闭右开的「搜索区间」搜索左右边界，只要在<code>nums[mid] == target</code>时做修改即可，搜索右侧时需要减一。</p>
<p>4、如果将「搜索区间」全都统一成两端都闭，好记，只要稍改<code>nums[mid] == target</code>条件处的代码和返回的逻辑即可，推荐拿小本本记下，作为二分搜索模板。</p>
<h3 id="还有一点！"><a href="#还有一点！" class="headerlink" title="还有一点！"></a>还有一点！</h3><p>return的值如何确定：</p>
<p>dong佬没有提及，但是我看出来了，关键在于判断等于情况：</p>
<p>比如：left_bound中等于情况为 right = mid - 1;</p>
<p>​            由此推导：mid = right + 1; </p>
<p>​            而退出循环时left = right + 1; 所以返回left(返回right + 1也一样)</p>
<p>其他同理！</p>
<p>==哪个if满足条件，便return 什么，检查什么！==</p>
<p>==还有一点，结果偏向哪边，检查哪边==</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>c++语法快速回顾</title>
    <url>/2020/01/05/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/c++%E8%AF%AD%E6%B3%95%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="c-语法快速回顾"><a href="#c-语法快速回顾" class="headerlink" title="c++语法快速回顾"></a>c++语法快速回顾</h1><p>准备研究生复试，刷算法题前看了看书前的语法快速入门<br>本着随便看看的态度来看的，但还是发现了很多以前的盲点，我列举如下</p>
<ol>
<li><p>c++的cout和cin看似简单许多，且不用填写类型，可实际上运行起来极为耗时，所以c与c++混用时，不应偷懒用cout，cin，而是要用scanf和printf</p>
</li>
<li><p>建议使用.cpp文件进行编辑</p>
</li>
<li><p>浮点数优先double类型，因为其精度更高</p>
</li>
<li><p>scanf对于double是“%lf”，而printf对于double是“%f”</p>
</li>
<li><p>字符是“%c”，字符串是“%s”</p>
</li>
<li><p>一般的常量定义用const而不是#define，如果用#define，尽量只用于常量定义，如果硬是要用来实现类似函数的功能，括号千万别忘</p>
</li>
<li><p>三目运算符 ？：</p>
</li>
<li><p>^是位异或</p>
</li>
<li><p>long long才是长整型其对应的为“%lld”</p>
</li>
<li><p>在scanf中要加&amp;（表地址），char数组（也即字符串）例外【因为数组的名称即地址】</p>
</li>
<li><p>几种实用的输出格式</p>
<ol>
<li>%md<br> m位右对齐输出（对齐的位补 <em>空格</em> ），超出m位则原样</li>
<li>%0md<br> m位右对齐输出（对齐的位补 <em>0</em> ），超出m位则原样</li>
<li>%.mf<br> 即保留小数点后m位（此类题目即用该表示方法！）</li>
</ol>
</li>
<li><p>常用的math函数<br>首先要加一个&lt;math.h&gt;的头文件</p>
<ol>
<li><p><code>fabs(double x)</code>绝对值</p>
</li>
<li><p><code>floor(double x)</code>–向下取整,<code>ceil(double x)</code>–向上取整</p>
</li>
<li><p><code>pow(double r,double p)</code>，次幂，返回值为r^p</p>
</li>
<li><p><code>sqrt(double x)</code> 返回算术平方根</p>
</li>
<li><p><code>log(double x)</code> 即lnx，如果要计算以非e为底数的对数，应该用换底公式：<br> (log(a)B)=log(B)/log(a)</p>
</li>
<li><p><code>sin(double x)</code>、<code>cos(double x)</code>、<code>tan(double x)</code></p>
<p> <strong>注意这三个函数的参数是弧度制！</strong><br> 所以一般用法是：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const double pi &#x3D; acos(-1.0) &#x2F;&#x2F;可以表示pi的大致精准值</span><br><span class="line">double db1 &#x3D; sin(pi * 45 &#x2F;180)&#x2F;&#x2F;表示四分之pi</span><br></pre></td></tr></table></figure></li>
<li><p><code>asin(double x)</code>、<code>acos(double x)</code>、<code>atan(double x)</code> 反正弦函数</p>
</li>
<li><p><code>round(double x)</code>对变量四舍五入</p>
</li>
</ol>
</li>
<li><p>对于<code>for</code>循环，c语言不允许在表达式第一部分定义变量，即<code>for(int i = 0;;)</code>非法，而c++允许，所以后缀是cpp很重要</p>
</li>
<li><p>定义数组时的数组大小应为整数常量，不可以是变量，即<code>int n = 10; int a[n]</code>错误</p>
</li>
<li><p>数组初始化时如果想全赋值为0有两个办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;有大括号便给没有赋值的数默认赋值0</span><br><span class="line">int a[10] &#x3D; &#123;&#125;;</span><br><span class="line">&#x2F;&#x2F;但是更加推荐使用memset函数</span><br><span class="line">int b[10];</span><br><span class="line">memset(b,0,sizeof(b));&#x2F;&#x2F;这里千万要注意第二个参数，只推荐用0或-1，因为它的作用是补码全为某值，如果是1，对于一个int类型而言，那就是“11111111 11111111 11111111 11111111”</span><br></pre></td></tr></table></figure></li>
<li><p>字符数组的初始化才允许用一个字符串赋值，其他情况不允许</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char str[10] &#x3D; &quot;good story&quot;;&#x2F;&#x2F;right</span><br><span class="line">char str1[10];</span><br><span class="line">str1 &#x3D; &quot;sad story&quot; &#x2F;&#x2F;wrong</span><br></pre></td></tr></table></figure></li>
<li><p><code>scanf()</code>和<code>gets()</code>都会自动添加<code>\0</code>作为结尾，所以用这两个函数输入的时候要注意数组大小，比如说：一个大小为10的数组，那么就只能放9个字符，最后一个用来结尾<br>另外，<code>scanf()</code>以空格和换行作为输入结束，而<code>gets()</code>只以换行作为输入结束，<br>所以输入”link start“对<code>scanf()</code>而言是”link“，对<code>gets()</code>而言是“link start”<br>还有一点就是，<code>scanf()</code>和<code>gets()</code>各有千秋，要视情况而用</p>
</li>
<li><p><code>&lt;string.h&gt;</code>头文件</p>
<ol>
<li><p><code>strlen(char str[])</code> 即数组长度</p>
</li>
<li><p><code>strcmp(char str1[],char str2[])</code> 按字典序比较两个字符串的大小</p>
<p> str1 &lt; str2 则返回负整数（不一定-1）<br> str1 = str2 则返回0<br> str1 &gt; str2 则返回正整数（不一定+1）</p>
</li>
<li><p><code>strcpy(char str1[],char str2[])</code>把str2复制给str1（包括了结束字符）</p>
</li>
<li><p><code>strcat(char str1[],char str2[])</code>把str2接到str1后面</p>
</li>
</ol>
</li>
<li><p><code>sscanf()</code>和<code>sprintf()</code><br>sscanf()可以使得屏幕输入变成字符数组输入，即把一个字符数组的值输入到某个变量中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int n;</span><br><span class="line">char str[100] &#x3D; &quot;123&quot;;</span><br><span class="line">sscanf(str,&quot;%d&quot;,&amp;n); &#x2F;&#x2F;可以做到字符串和整型的类型转换</span><br></pre></td></tr></table></figure>
<p>sprinf()则是同理，可以使得屏幕输出变成输出到字符串中<br>如此则可以实现其他类型到字符串类型的转换</p>
</li>
<li><p>结构体里面可以定义除了自己本身以外地任何数据类型。不过虽然不可以定义自己本身，但可以定义自身类型的指针变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">    node n;&#x2F;&#x2F;wrong</span><br><span class="line">    node* next;&#x2F;&#x2F;right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>浮点数比较时的精度修正（5种情况）<br>所用方法是引进一个极小数，用偏差与其比较即可</p>
<ol>
<li>==</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const double eps &#x3D; 1e-8 &#x2F;&#x2F;即10的负8次方</span><br><span class="line">#define Equ(a,b) ((fabs((a)-(b)))&lt;(eps))</span><br><span class="line">&#x2F;&#x2F;功能段</span><br><span class="line">if(Equ(a,b)) return true;</span><br><span class="line">else return false;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><blockquote>
</blockquote>
<code>#define More(a,b) (((a)-(b))&gt;(eps))</code></li>
<li>&lt;<br><code>#define Less(a,b) (((a)-(b))&lt;(-eps))</code></li>
<li><blockquote>
<p>=<br><code>#define MoreEqu(a,b) (((a)-(b))&gt;(-eps))</code></p>
</blockquote>
</li>
<li>&lt;=<br><code>#define LessEqu(a,b) (((a)-(b))&lt;(eps))</code></li>
</ol>
</li>
</ol>
<p>22.单点测试和多点测试</p>
<blockquote>
<p>单点测试就是把你的程序执行多次来测试<br>    多点测试是你的程序支持多次输入<br>    重点谈多点测试：<br>    有几种类型：<br>    1. while…EOF型<br>    题目没有给出输入的结束条件<br>    <code>while(scanf(&quot;%d&quot;,&amp;n) != EOF){...}//Ctrl+Z可退出</code><br>    2. while…break型<br>    当要求输入数据满足某个条件时停止输入<br>    <code>while(scanf(&quot;%d&quot;,&amp;n) != EOF){if(n = 0) break;....}</code><br>    3. while(T–)型<br>    题目说明会给定组数<br>    <code>scanf(&quot;%d&quot;,&amp;T);</code><br>    <code>while(T--){....}</code></p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL使用</title>
    <url>/2020/03/01/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/STL%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="STL使用"><a href="#STL使用" class="headerlink" title="STL使用"></a>STL使用</h1><h2 id="一、vector的常见用法详解"><a href="#一、vector的常见用法详解" class="headerlink" title="一、vector的常见用法详解"></a>一、vector的常见用法详解</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302082204702.png" alt="image-20200302082204702"></p>
</blockquote>
<ol>
<li><p>vector的定义</p>
<p> <code>verctor&lt;typename&gt; name;</code></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302083031890.png" alt="image-20200302083031890"></p>
<p> <code>vector&lt;int&gt; name;</code></p>
<p> <code>vector&lt;double&gt; name;</code></p>
<p> <code>vector&lt;char&gt; name;</code></p>
<p> <code>vector&lt;node&gt; name;</code></p>
<p> 如果typename是vect，就这样定义：</p>
<p> <code>vector&lt;vector&lt;int&gt; &gt; //注意空格</code></p>
<p> <strong>以上是一种vector二维数组的写法，不过两维都可以拓展</strong></p>
<p> 另一种二维写法是：</p>
<p> <code>vector&lt;typename&gt; Arrayname[arraySize];</code></p>
<p> <strong>但是这种写法一维长度固定不变</strong></p>
</li>
<li><p>vector容器内元素的访问</p>
<p> 两种访问方式：下标或者迭代器</p>
<ul>
<li><p>下标访问：</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302085846392.png" alt="image-20200302085846392"></p>
</li>
<li><p>迭代器访问：</p>
<p>  迭代器（iterator）可以理解为一种类似于<strong>指针</strong>的东西，定义：</p>
<p>  <code>vector&lt;typename&gt;::iterator it;</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302090501793.png" alt="image-20200302090501793"></p>
<p>  <code>vector&lt;int&gt;::iterator it;</code></p>
<p>  <code>vector&lt;double&gt;::iterator it;</code></p>
<p>  这样就得到了迭代器<code>it</code>，并可以通过<code>*it</code>访问<code>vector</code>里的元素。</p>
<p>  例如，有这样定义的一个vecotr容器：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">  	vi.push_vack(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  可以通过类似下标和指针访问数组的方式来访问容器内的元素：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> namspace <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">      	vi.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//vi.begin()为取vi的首元素地址，而it1指向这个地址</span></span><br><span class="line">  	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = vi.<span class="built_in">begin</span>();</span><br><span class="line">	  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">	      <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(it + i)); <span class="comment">//输出vi[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  输出结果：</p>
<p>  <code>1 2 3 4 5</code></p>
<p>  这里可以看出<code>vi[i]</code>和<code>*(vi.begin+i)</code>等价</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302091556261.png" alt="image-20200302091556261"></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> namspace <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">      	vi.push_back(i);</span><br><span class="line">     &#125;</span><br><span class="line">  	<span class="comment">//vi.begin()为取vi的首元素地址，而it1指向这个地址</span></span><br><span class="line">  	</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = vi.<span class="built_in">begin</span>(); it != vi.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">	      <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(it + i)); <span class="comment">//输出vi[i]</span></span><br><span class="line">     &#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  最后需要指出，在常用的STL容器中，制作在<code>vector</code>和<code>string</code>中，才允许使用<code>vi.begin()+3</code>这种迭代器加上整数的写法。</p>
</li>
</ul>
</li>
<li><p>vector常用函数实例解析</p>
<ul>
<li><p><code>push_back()</code> —-在vector后面添加一个元素x，时间复杂度为O(1)</p>
</li>
<li><p><code>pop_back()</code>—-删除vector的尾元素，时间复杂度为O(1)</p>
</li>
<li><p><code>size()</code>—-元素个数，O(1)，返回的是unsigned类型</p>
</li>
<li><p><code>clear()</code>—-清空vector中所有的元素，时间复杂度为O(N)</p>
</li>
<li><p><code>insert()</code>—-<code>insert(it,x)</code>用来向<code>vector</code>的任意迭代器<code>it</code>（可看做是某个位置的指针）处插入一个元素<code>x</code>，时间复杂度O(N)。</p>
</li>
<li><p><code>erase()</code>—-它有两种用法：</p>
<ul>
<li><p>删除单个元素。</p>
<p>  <code>erase(it)</code>即删除迭代器为it处的元素。</p>
</li>
<li><p>删除一个区间内的所有元素。</p>
<p>  <code>erase(first, last)</code>即删除$[first,last)$内的所有元素。</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302095425614.png" alt="image-20200302095425614"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>vector的常见用途</p>
<ul>
<li><p>存储数据</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302095503708.png" alt="image-20200302095503708"></p>
</li>
<li><p>用邻接表存储图</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302095543244.png" alt="image-20200302095543244"></p>
</li>
</ul>
</li>
</ol>
<h2 id="二、set的常见用法详解"><a href="#二、set的常见用法详解" class="headerlink" title="二、set的常见用法详解"></a>二、set的常见用法详解</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302100034556.png" alt="image-20200302100034556"></p>
</blockquote>
<ol>
<li><p>set的定义</p>
<p> <code>set&lt;typename&gt; name</code></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302100145064.png" alt="image-20200302100145064"></p>
</li>
<li><p>set容器内元素的访问</p>
<p> set中能通过迭代器（iterator）访问：</p>
<p> <code>set&lt;typename&gt;::iterator it;</code></p>
<p> 这样就得到了迭代器<code>it</code>，并且可以通过<code>*it</code>来访问<code>set</code>里的元素。</p>
<p> <strong>由于除开<code>vector</code>和<code>string</code>以外的容器都不支持<code>*(it+i)</code>的访问方式，因此只能按如下方式枚举</strong></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">	st.insert(<span class="number">3</span>);</span><br><span class="line">  	st.insert(<span class="number">5</span>);</span><br><span class="line">  	st.insert(<span class="number">2</span>);</span><br><span class="line">  	st.insert(<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">      	<span class="built_in">printf</span>(<span class="string">"%d"</span>, *it);</span><br><span class="line">    &#125;</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 结果：<code>2 3 5</code></p>
<p> 可以发现，set内的元素自动递增排序，且自动去除了重复元素。</p>
</li>
<li><p>set常用函数实例解析</p>
<ul>
<li><p><code>insert()</code>—-<code>insert(x)</code>可将x插入<code>set</code>容器中,并且自动递增排序和驱虫，时间复杂度O(logN)</p>
</li>
<li><p><code>find()</code>—-<code>find(value)</code>返回set中对应值为value的迭代器，时间复杂度为O(logN)，N为set内元素个数</p>
</li>
<li><p><code>erase()</code>—-有两种用法：</p>
<ul>
<li><p>删除单个元素：</p>
<ul>
<li><p>以迭代器删除</p>
<p><code>st.erase(it)</code>其中it为所需要删除元素的迭代器，O(1)</p>
</li>
<li><p>以元素值删除</p>
<p><code>st.erase(value)</code>其中value为所需要删除元素的值,O(logN)</p>
</li>
</ul>
</li>
<li><p>删除一个区间内的元素</p>
<p>  <code>sr.erase(first, last)</code>可以删除一个区间内的所有元素，其中first为所需要删除区间的起始迭代器，而last则为所需要闪出去见的末尾迭代器的下一个地址，也即为删除$[first,last)$，时间复杂度为O(last-first)。</p>
</li>
</ul>
</li>
<li><p><code>size()</code> —-获得元素个数，O(1)</p>
</li>
<li><p><code>clear()</code>—-清空set中的所有元素，复杂度为O(N)，其中N为set内元素的个数</p>
</li>
</ul>
</li>
<li><p>set的常见用途</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302102647272.png" alt="image-20200302102647272"></p>
</li>
</ol>
<h2 id="三、string的常见用法详解"><a href="#三、string的常见用法详解" class="headerlink" title="三、string的常见用法详解"></a>三、string的常见用法详解</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302103535383.png" alt="image-20200302103535383"></p>
</blockquote>
<ol>
<li><p><code>string</code>的定义</p>
<p> 定义<code>string</code>的方式跟基本数据类型相同，只需要在<code>string</code>后跟上变量名即可</p>
<p> <code>string str;</code></p>
<p> 如果要初始化，可以直接给<code>string</code>类型变量进行赋值:</p>
<p> <code>string str = &quot;abcd&quot;;</code></p>
</li>
<li><p><code>string</code>中内容的访问</p>
<ul>
<li><p>通过下标访问</p>
<p>  <code>str[i]</code></p>
<p>  注意：如果要读入或输入整个字符串，则只能用<code>cin</code>和<code>cout</code></p>
<p>  但是，还是有办法用<code>printf</code>输出<code>string</code>的，即用<code>c_str()</code>将<code>string</code>类型转换为字符串数组进行输出：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="built_in">string</span> str = <span class="string">"abcd"</span>;</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">"%s"</span>, str.c_str()); <span class="comment">//将string型str使用c_str()变为字符数组</span></span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<pre><code>* 通过迭代器访问

    ![image-20200302104323357](https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302104323357.png)

    `string::iterator it;`

    如此就得到了迭代器`it`，并且可以通过`*it`来访问`string`里的每一位：

    ![image-20200302105142217](https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302105142217.png)

    最后指出：**`string`和`vector`一样，支持直接对迭代器进行加减某个数字**，如`str.begin()+3`这个写法是可行的。</code></pre><ol start="3">
<li><p>string常用函数实例解析</p>
<p> 事实上，string的函数有很多，但是有些函数并不常用，因此下面就几个常用函数举例：</p>
<ul>
<li><p><code>operator+=</code></p>
<p>  <code>string</code>的加法，可以将两个string<strong>直接拼接</strong>起来</p>
</li>
<li><p><code>compare operator</code></p>
<p>  两个<code>string</code>类型可以直接使用<code>==,!=,&lt;,&lt;=,&gt;,&gt;=</code>比较大小，比较规则是字典序</p>
</li>
<li><p><code>length()/size()</code></p>
<p>  返回长度，两者基本一样，O(1)</p>
</li>
<li><p><code>insert()</code></p>
<p>  <code>string</code>的<code>insert()</code>函数有很多写法，这里给几个常用写法</p>
<ul>
<li><p><code>insert(pos,string)</code>,在<code>pos</code>好位置插入字符串<code>string</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302110712387.png" alt="image-20200302110712387"></p>
</li>
<li><p><code>insert(it,it2,it3)</code>,it为原字符传的欲插入位置，it2和it3位待插字符串的首尾迭代器，用来表示串$[it2,it3)$将被插在it的位置上。</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302110659526.png" alt="image-20200302110659526"></p>
</li>
<li><p><code>erase()</code></p>
<p>  两种用法：（均为O(N)）</p>
<ul>
<li><p>删除单个元素。</p>
<p>  str.erase(it)用于删除单个元素，it为需要删除的元素的迭代器。</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302110910541.png" alt="image-20200302110910541"></p>
</li>
<li><p>删除一个区间内的所有元素。</p>
<p>  删除一个区间内所有元素有两种方法：</p>
<ul>
<li><p><code>str.erase(first,last)</code>，其中first为需要删除的区间的其实迭代器，而last则为需要删除的区间的末尾迭代器的下一个地址，也即为删除$[first,last)$。</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302112709963.png" alt="image-20200302112709963"></p>
</li>
<li><p><code>str.erase(pos,length)</code>，其中pos为需要删除的起始位置，length为删除的字符个数</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>clear()</code></p>
<p>  <code>clear()</code>用以清空string中的数据，O(1)</p>
</li>
<li><p><code>substr()</code></p>
<p>  <code>substr(pos,len)</code>返回从pos位开始、长度为len的子串，复杂度为O(len)</p>
</li>
<li><p><code>string::npos</code></p>
<p>  <code>string::npos</code>是一个常数，其本身的值是-1，但由于是<code>unsigned_int</code>类型，因此实际上可以认为是<code>unsigned_int</code>类型的最大值。<code>string::npos</code>用以作为<code>find</code>失配时的返回值。例如下面实例可以认为<code>string::npos</code>等于-1或者429497295</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302150629465.png" alt="image-20200302150629465"></p>
</li>
<li><p><code>find()</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302150724243.png" alt="image-20200302150724243"></p>
<p>  示例：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302150746685.png" alt="image-20200302150746685"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302150756646.png" alt="image-20200302150756646"></p>
</blockquote>
</li>
<li><p><code>replace()</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302150840024.png" alt="image-20200302150840024"></p>
<p>  示例：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200302150901829.png" alt="image-20200302150901829"></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="四、map的常见用法详解"><a href="#四、map的常见用法详解" class="headerlink" title="四、map的常见用法详解"></a>四、map的常见用法详解</h2><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303083146626.png" alt="image-20200303083146626"></p>
<ol>
<li><p>定义</p>
<p> 单独定义一个map:</p>
<p> <code>map&lt;typename1, typename2&gt;mp;</code></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303083301750.png" alt="image-20200303083301750"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303083613017.png" alt="image-20200303083613017"></p>
</li>
<li><p>map容器内元素的访问</p>
<p> 两种方式：</p>
<ul>
<li><p>通过下标访问</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303083753619.png" alt="image-20200303083753619"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303083818844.png" alt="image-20200303083818844"></p>
</li>
<li><p>通过迭代器访问</p>
<p>  map迭代器的定义和其他STL容器的迭代器定义的方式相同：</p>
<p>  <code>map&lt;typename1, typename2&gt;::iterator it;</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303084029304.png" alt="image-20200303084029304"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303084335981.png" alt="image-20200303084335981"></p>
</li>
</ul>
</li>
<li><p>map实用函数解析</p>
<ul>
<li><p><code>find()</code></p>
<p>  <code>find(key)</code>返回键为key映射的迭代器，时间复杂度为O(logN)，N为map的映射个数。</p>
<p>  示例：</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303084815715.png" alt="image-20200303084815715"></p>
</li>
<li><p><code>erase()</code></p>
<ul>
<li><p>删除单元素有两种用法：</p>
<ul>
<li><p><code>mp.erase(it)</code>，it为所需要删除元素的迭代器，O(1)</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303085008575.png" alt="image-20200303085008575"></p>
</li>
<li><p><code>mp.erase(key)</code>，key为欲删除的映射的键。O(logN)</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303085122464.png" alt="image-20200303085122464"></p>
</li>
</ul>
</li>
<li><p>删除一个区间的元素</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303085229954.png" alt="image-20200303085229954">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303085240556.png" alt="image-20200303085240556"></p>
</li>
</ul>
</li>
<li><p><code>size()</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303085300297.png" alt="image-20200303085300297"></p>
</li>
<li><p><code>clear()</code></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303085324695.png" alt="image-20200303085324695"></p>
</li>
</ul>
</li>
<li><p>map常见用途：</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303084627952.png" alt="image-20200303084627952">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303084638724.png" alt="image-20200303084638724"></p>
</li>
</ol>
<h2 id="五、queue的常见用法详解"><a href="#五、queue的常见用法详解" class="headerlink" title="五、queue的常见用法详解"></a>五、queue的常见用法详解</h2><p>queue翻译为队列，在STL中主要实现了一个先进先出的容器。</p>
<ol>
<li><p>queue的定义</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303093835456.png" alt="image-20200303093835456"></p>
</li>
<li><p>queue容器内元素的访问</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303093910871.png" alt="image-20200303093910871"></p>
</li>
<li><p>queue常用函数实例解析</p>
<ul>
<li><code>push()</code>—-尾进</li>
<li><code>front()</code>,<code>back()</code></li>
<li><code>pop()</code>—-头出</li>
<li><code>empty()</code>—-判空</li>
<li><code>size()</code></li>
</ul>
</li>
<li><p>queue的常见用途</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303094111273.png" alt="image-20200303094111273"></p>
</li>
</ol>
<h2 id="六、priority-queue的常见用法详解"><a href="#六、priority-queue的常见用法详解" class="headerlink" title="六、priority_queue的常见用法详解"></a>六、priority_queue的常见用法详解</h2><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303101229252.png" alt="image-20200303101229252"></p>
<ol>
<li><p>定义</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303101313694.png" alt="image-20200303101313694"></p>
</li>
<li><p>元素访问</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303101424718.png" alt="image-20200303101424718"></p>
</li>
<li><p>常用函数实例解析</p>
<ul>
<li><code>push()</code></li>
<li><code>top()</code></li>
<li><code>pop()</code></li>
<li><code>empty()</code></li>
<li><code>size()</code></li>
</ul>
</li>
<li><p>元素优先级设置</p>
<p> 如何定义优先队列内元素优先级是运用好优先队列的关键，下面分别介绍基本数据类型（例如int、double、char）与结构体类型的优先级设置方法</p>
<ul>
<li><p>基本数据类型的优先级设置</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303102808910.png" alt="image-20200303102808910"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303102831111.png" alt="image-20200303102831111"></p>
</li>
<li><p>结构体的优先级设置</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103106538.png" alt="image-20200303103106538">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103121368.png" alt="image-20200303103121368"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103143389.png" alt="image-20200303103143389"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103258549.png" alt="image-20200303103258549"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103345339.png" alt="image-20200303103345339"></p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103457475.png" alt="image-20200303103457475"></p>
</li>
</ul>
</li>
<li><p>常见用途</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103632151.png" alt="image-20200303103632151"></p>
</li>
</ol>
<h2 id="七、stack的常见用法详解"><a href="#七、stack的常见用法详解" class="headerlink" title="七、stack的常见用法详解"></a>七、stack的常见用法详解</h2><p>stack翻译为栈，是STL中实现的一个后进先出的容器。</p>
<ol>
<li><p>stack定义</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103728035.png" alt="image-20200303103728035"></p>
</blockquote>
</li>
<li><p>元素的访问</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103751791.png" alt="image-20200303103751791"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103802958.png" alt="image-20200303103802958"></p>
</li>
<li><p>常用函数实例解析</p>
<ul>
<li><code>push()</code></li>
<li><code>top()</code></li>
<li><code>pop()</code></li>
<li><code>empty()</code></li>
<li><code>size()</code></li>
</ul>
</li>
<li><p>stack的常见用途</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303103930880.png" alt="image-20200303103930880"></p>
</li>
</ol>
<h2 id="八、pair的常见用法详解"><a href="#八、pair的常见用法详解" class="headerlink" title="八、pair的常见用法详解"></a>八、pair的常见用法详解</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104041584.png" alt="image-20200303104041584"></p>
</blockquote>
<ol>
<li><p>定义：</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104221741.png" alt="image-20200303104221741"></p>
</li>
<li><p>元素的访问</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104253999.png" alt="image-20200303104253999"></p>
<p> <strong>ps:感觉pair像是map里的单个元素。。</strong></p>
</li>
<li><p>常用函数实例解析</p>
<p> <strong>比较操作数</strong></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104401053.png" alt="image-20200303104401053"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104410708.png" alt="image-20200303104410708"></p>
</li>
<li><p>pair的常见用途</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104439424.png" alt="image-20200303104439424"></p>
</li>
</ol>
<h2 id="九、algorithm头文件下的常用函数"><a href="#九、algorithm头文件下的常用函数" class="headerlink" title="九、algorithm头文件下的常用函数"></a>九、algorithm头文件下的常用函数</h2><ol>
<li><p><code>max(),min()和abs（）</code></p>
</li>
<li><p><code>swap()</code></p>
</li>
<li><p><code>reverse()</code></p>
<p> <code>reverse(it, it2)</code>可以将数组指针$[it,it2)$之间的元素或容器的迭代器在$[it,it2)$范围内的元素进行反转</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104948707.png" alt="image-20200303104948707">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303104959669.png" alt="image-20200303104959669"></p>
</li>
<li><p><code>next_permutation()</code></p>
<p> <code>next_permutation()</code>给出一个序列在全排列中的下一个序列</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303105143485.png" alt="image-20200303105143485">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303105156053.png" alt="image-20200303105156053"></p>
</li>
<li><p><code>fill()</code></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303105351897.png" alt="image-20200303105351897"></p>
</li>
<li><p><code>sort()</code></p>
</li>
<li><p><code>lower_bound()</code>和<code>upper_bound()</code></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303105506392.png" alt="image-20200303105506392"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303105526995.png" alt="image-20200303105526995">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303105537337.png" alt="image-20200303105537337"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划概念</title>
    <url>/2020/03/03/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="一、动态规划的递归写法和递推写法"><a href="#一、动态规划的递归写法和递推写法" class="headerlink" title="一、动态规划的递归写法和递推写法"></a>一、动态规划的递归写法和递推写法</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312170348868.png" alt="image-20200312170348868"></p>
</blockquote>
<h3 id="1-什么是动态规划"><a href="#1-什么是动态规划" class="headerlink" title="1.什么是动态规划"></a>1.什么是动态规划</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312170543303.png" alt="image-20200312170543303"></p>
<h3 id="2-动态规划的递归写法"><a href="#2-动态规划的递归写法" class="headerlink" title="2. 动态规划的递归写法"></a>2. 动态规划的递归写法</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312171237730.png" alt="image-20200312171237730"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312171403013.png" alt="image-20200312171403013"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//递归边界</span></span><br><span class="line">    <span class="keyword">if</span>(dp[n] != <span class="number">-1</span>) <span class="keyword">return</span> dp[n];  <span class="comment">//已经计算过，直接返回结果，不再重复计算</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">        dp[n] = F(n<span class="number">-1</span>) + F(n<span class="number">-2</span>);  <span class="comment">//计算F(n)，并保存到dp[n]</span></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312171931968.png" alt="image-20200312171931968"></p>
<h3 id="3-动态规划的递归写法"><a href="#3-动态规划的递归写法" class="headerlink" title="3. 动态规划的递归写法"></a>3. 动态规划的递归写法</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312172155405.png" alt="image-20200312172155405"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312172810467.png" alt="image-20200312172810467"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstido&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn], dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;f[i][j]);  <span class="comment">//输入数塔</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">   	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        dp[n][j] = f[n][j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">        	dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j + <span class="number">1</span>]) + f[i][j];    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][<span class="number">1</span>]);  <span class="comment">//dp[1][1]就是所需的答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312173616960.png" alt="image-20200312173616960"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312173740177.png" alt="image-20200312173740177"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312174302536.png" alt="image-20200312174302536"></p>
<h2 id="二、最大连续子序列和"><a href="#二、最大连续子序列和" class="headerlink" title="二、最大连续子序列和"></a>二、最大连续子序列和</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312174440727.png" alt="image-20200312174440727"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312175524163.png" alt="image-20200312175524163"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, A[maxn], dp[maxn];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求dp数组（以A[i]结尾的连续序列的最大和）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//状态转移方程</span></span><br><span class="line">        dp[i] = <span class="built_in">max</span>(A[i], dp[i - <span class="number">1</span>] + A[i]);</span><br><span class="line">        <span class="keyword">if</span>(dp[i] &gt; dp[k]) k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312181007723.png" alt="image-20200312181007723"></p>
<h2 id="三、最长不下降子序列"><a href="#三、最长不下降子序列" class="headerlink" title="三、最长不下降子序列"></a>三、最长不下降子序列</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313102855043.png" alt="image-20200313102855043"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313104734801.png" alt="image-20200313104734801"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313105607079.png" alt="image-20200313105607079">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313105641284.png" alt="image-20200313105641284"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//dp[i]是以A[i]为末尾的最大不下降子序列</span></span><br><span class="line">    <span class="keyword">int</span> A[maxn],dp[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">//边界初始条件</span></span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt;= A[j] &amp;&amp; (dp[j] + <span class="number">1</span> &gt; dp[i]))</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、最长公共子序列"><a href="#四、最长公共子序列" class="headerlink" title="四、最长公共子序列"></a>四、最长公共子序列</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313170942417.png" alt="image-20200313170942417"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313171428121.png" alt="image-20200313171428121"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313172111859.png" alt="image-20200313172111859">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313172146666.png" alt="image-20200313172146666"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> A[N], B[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    gets(A + <span class="number">1</span>);  <span class="comment">//从下标为1开始读入</span></span><br><span class="line">    gets(B + <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">int</span> lenA = <span class="built_in">strlen</span>(A + <span class="number">1</span>);  <span class="comment">//由于读入时下标从1开始，因此读取长度也从+1开始</span></span><br><span class="line">    <span class="keyword">int</span> lenB = <span class="built_in">strlen</span>(B + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lenA; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= lenB; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态转移方程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenA; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=lenB; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] == B[j]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[lenA][lenB]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、最长回文子串"><a href="#五、最长回文子串" class="headerlink" title="五、最长回文子串"></a>五、最长回文子串</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313181234916.png" alt="image-20200313181234916"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313193158038.png" alt="image-20200313193158038"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313193352063.png" alt="image-20200313193352063"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313193433278.png" alt="image-20200313193433278"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200313194222876.png" alt="image-20200313194222876"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">char</span> S[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gets(S);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(S), ans = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp)); <span class="comment">//dp数组初始化为0</span></span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(S[i] == S[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                ans = <span class="number">2</span>;  <span class="comment">//初始化时注意当前最长回文子串长度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态转移方程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> L = <span class="number">3</span>; L &lt;= len; L++) &#123;  <span class="comment">//枚举子串的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span> &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + L - <span class="number">1</span>;  <span class="comment">//i~j就代表了区间长度</span></span><br><span class="line">            <span class="keyword">if</span>(S[i] == S[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                ans = L;  <span class="comment">//更新最长回文子串长度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、DAG最长路"><a href="#六、DAG最长路" class="headerlink" title="六、DAG最长路"></a>六、DAG最长路</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314090341649.png" alt="image-20200314090341649"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314090645876.png" alt="image-20200314090645876"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314093105309.png" alt="image-20200314093105309"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];  <span class="comment">//dp[i]已计算得到</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], DP(j) + G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];  <span class="comment">//返回计算完毕的dp[i];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314094126975.png" alt="image-20200314094126975"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];  <span class="comment">//dp[i]已计算得到</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; dp[i]) &#123;</span><br><span class="line">                choice[i] = j;  <span class="comment">//choice存后续顶点</span></span><br><span class="line">            	dp[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];  <span class="comment">//返回计算完毕的dp[i];</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得最大路径，先要得到最大的dp[i],然后i作为起点传入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfPath</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">    <span class="keyword">while</span>(choice[i] != <span class="number">-1</span>) &#123;  <span class="comment">//choice数组初始化为-1</span></span><br><span class="line">        i = choice[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-&gt;%d"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314095009237.png" alt="image-20200314095009237"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314095558964.png" alt="image-20200314095558964"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化：</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn] = &#123;INF&#125;;</span><br><span class="line">dp[T] = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[i]) <span class="keyword">return</span> dp[i];</span><br><span class="line">    vis[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], DP(j) + G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];  <span class="comment">//返回计算完毕的dp[i];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314100101954.png" alt="image-20200314100101954"></p>
<p><strong>最短路径：</strong></p>
<p>由上面的做法启发：</p>
<p>问题：从i到T结点的最短路径？（T固定）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[i]) <span class="keyword">return</span> dp[i];</span><br><span class="line">    vis[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i], dp[j] + G[i][j])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时我还刷了一道leetcode的题目：</p>
<p><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">leetCode-最小路径</a></p>
<h2 id="七、背包问题"><a href="#七、背包问题" class="headerlink" title="七、背包问题"></a>七、背包问题</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314113131956.png" alt="image-20200314113131956"></p>
</blockquote>
<h3 id="1-多阶段动态规划问题"><a href="#1-多阶段动态规划问题" class="headerlink" title="1. 多阶段动态规划问题"></a>1. 多阶段动态规划问题</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314113938311.png" alt="image-20200314113938311"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314114027348.png" alt="image-20200314114027348"></p>
<h3 id="2-01背包问题"><a href="#2-01背包问题" class="headerlink" title="2. 01背包问题"></a>2. 01背包问题</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314114337887.png" alt="image-20200314114337887"></p>
</blockquote>
<p>关键在于<code>放</code>与<code>不放</code>：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314115333306.png" alt="image-20200314115333306"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = w[i]; v &lt;= V; v++) &#123;</span><br><span class="line">        dp[i][v] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][v], dp[i - <span class="number">1</span>][v - w[i]] + c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看看这篇文章，01背包，写的更好：</p>
<p><a href="https://www.cnblogs.com/Christal-R/p/Dynamic_programming.html" target="_blank" rel="noopener">csdn-0-1背包</a></p>
<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindMax</span><span class="params">()</span> </span>&#123;<span class="comment">//动态规划</span></span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line">    <span class="comment">//边界：</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++) &#123;  <span class="comment">//没有物品，任何大小容量，总价都是0</span></span><br><span class="line">        dp[<span class="number">0</span>][v] = <span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;  <span class="comment">//没有容量，任前几件，总价都是0</span></span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = w[i]; v &lt;= V; v++) &#123;</span><br><span class="line">            dp[i][v] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][v], dp[i - <span class="number">1</span>][v - w[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i][v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314120032512.png" alt="image-20200314120032512"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314160541692.png" alt="image-20200314160541692"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314160606991.png" alt="image-20200314160606991">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314160616412.png" alt="image-20200314160616412"></p>
<h3 id="3-完全背包问题"><a href="#3-完全背包问题" class="headerlink" title="3. 完全背包问题"></a>3. 完全背包问题</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314163221467.png" alt="image-20200314163221467"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314163508236.png" alt="image-20200314163508236"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314163527213.png" alt="image-20200314163527213">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314163534212.png" alt="image-20200314163534212"></p>
<h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314120446866.png" alt="image-20200314120446866"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200314120607095.png" alt="image-20200314120607095"></p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/2020/05/23/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><h4 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h4><p>一个快（2步）一个慢（1步），如果两个指针最终相见，则有环</p>
<h4 id="判断链表的环起点位置"><a href="#判断链表的环起点位置" class="headerlink" title="判断链表的环起点位置"></a>判断链表的环起点位置</h4><p>当快慢指针相遇时，让其中任⼀个指针指向头节点，然后让它俩 以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。</p>
<h4 id="寻找链表中点"><a href="#寻找链表中点" class="headerlink" title="寻找链表中点"></a>寻找链表中点</h4><p>快慢指针，当快指针到达终点时，慢指针就到了中间点。</p>
<h4 id="寻找倒数第k个元素"><a href="#寻找倒数第k个元素" class="headerlink" title="寻找倒数第k个元素"></a>寻找倒数第k个元素</h4><p>快慢指针，快指针先走k步，然后两者同速走，快指针到达终点时，慢指针也指向了倒数第k个元素</p>
<h2 id="左右指针"><a href="#左右指针" class="headerlink" title="左右指针"></a>左右指针</h2><blockquote>
<p>左右指针在数组中实际是指两个索引值，⼀般初始化为 left = 0, right = nums.length - 1 。</p>
</blockquote>
<h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>不多加赘述，数组有序就应该想到二分查找法。！！！！！</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>技巧总结</title>
    <url>/2020/03/18/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="技巧总结"><a href="#技巧总结" class="headerlink" title="技巧总结"></a>技巧总结</h1><h3 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h3><p>利用位运算可以将二进制转换为十进制(而且效率极高)：（不过仅仅是2to10）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把二进制1010转为十进制</span></span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;</span><br><span class="line">        res = res &lt;&lt; <span class="number">1</span> | item;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果res: 10</span></span><br></pre></td></tr></table></figure>

<h3 id="2-任意进制转十进制"><a href="#2-任意进制转十进制" class="headerlink" title="2. 任意进制转十进制"></a>2. 任意进制转十进制</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_num</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        sum = sum*<span class="number">8</span> + (str[i] - <span class="string">'0'</span>);   <span class="comment">//假设是8进制</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-递归尽量不要把结果放在参数里传，可以设一个全局变量！！（教训！）"><a href="#3-递归尽量不要把结果放在参数里传，可以设一个全局变量！！（教训！）" class="headerlink" title="3. 递归尽量不要把结果放在参数里传，可以设一个全局变量！！（教训！）"></a>3. 递归尽量不要把结果放在参数里传，可以设一个全局变量！！（教训！）</h3><h3 id="4-vector的一些操作"><a href="#4-vector的一些操作" class="headerlink" title="4. vector的一些操作"></a>4. vector的一些操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="built_in">find</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), nums[i]) == nums.<span class="built_in">end</span>();</span><br><span class="line"><span class="comment">//定义大小</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">dp.resize(n);</span><br><span class="line"><span class="comment">//也可以初始化定义</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="comment">//值也可以定义</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="5-回文字符串判断"><a href="#5-回文字符串判断" class="headerlink" title="5. 回文字符串判断"></a>5. 回文字符串判断</h3><p>如果一个字符串可以组成一个回文串，那么：(1) 如果它的长度为偶数，那么每个字符都必须出现偶数次；(2) 如果它的长度为奇数，那么除了一个字符出现奇数次以外，其它的字符都必须出现偶数次。因此可以总结得到，如果一个字符串可以组成一个回文串，那么出现奇数次的字符的数量不能超过 1。</p>
<h3 id="6-贪心和动态规划的区别"><a href="#6-贪心和动态规划的区别" class="headerlink" title="6. 贪心和动态规划的区别"></a>6. 贪心和动态规划的区别</h3><p>贪心算法就是优化过后的dp算法，所以一切的贪心算法可以解决的问题，dp都可以解决，它们的本质都是搜索，一旦贪心策略正确，那么贪心算法一定是非常优雅的算法，不过贪心的证明比想出贪心算法更难，考试时不一定能够想出来，所以只有两种途径：</p>
<ul>
<li>多见识贪心的题目，从题目中总结一些比较好用的贪心策略</li>
<li>练好dp，直接dp解决</li>
</ul>
<h3 id="7-递归问题如果超时可以加一个备忘录"><a href="#7-递归问题如果超时可以加一个备忘录" class="headerlink" title="7. 递归问题如果超时可以加一个备忘录"></a>7. 递归问题如果超时可以加一个备忘录</h3><h3 id="8-int与string的互转"><a href="#8-int与string的互转" class="headerlink" title="8. int与string的互转"></a>8. int与string的互转</h3><ul>
<li><p>int转string：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> str = to_string(a);  <span class="comment">//需要include&lt;string&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>string转int：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> a = atoi(str.c_str());<span class="comment">//要换成c的字符数组才能用  需要include&lt;stdlib.h&gt;头文件</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="9-DFS"><a href="#9-DFS" class="headerlink" title="9. DFS"></a>9. DFS</h3><ul>
<li>树的DFS不用创建访问数组，但图的DFS要创建，因为树从头往下走，绝不会有回路，但图可能会有</li>
<li>一般为空时DFS的递归边界</li>
<li>图还有一个不一样之处，它有一个DFS和一个个DFSTrave函数，前一个是遍历一个连通块，后一个是遍历所有连通块</li>
</ul>
<h3 id="10-累加"><a href="#10-累加" class="headerlink" title="10.累加"></a>10.累加</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = accumulate(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>); <span class="comment">//需要#include&lt;numeric&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="11-判断子串"><a href="#11-判断子串" class="headerlink" title="11. 判断子串"></a>11. 判断子串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> a = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="built_in">string</span> b = <span class="string">"efg"</span>;</span><br><span class="line"><span class="built_in">string</span>::size_type idx;</span><br><span class="line">idx = a.<span class="built_in">find</span>(b);</span><br><span class="line"><span class="keyword">if</span>(idx == <span class="built_in">string</span>::npos) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不存在</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//存在</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索专题</title>
    <url>/2020/03/03/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="搜索专题"><a href="#搜索专题" class="headerlink" title="搜索专题"></a>搜索专题</h1><h2 id="一、深度搜索专题"><a href="#一、深度搜索专题" class="headerlink" title="一、深度搜索专题"></a>一、深度搜索专题</h2><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305151048654.png" alt="image-20200305151048654">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305151458973.png" alt="image-20200305151458973"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305151941476.png" alt="image-20200305151941476"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305152028041.png" alt="image-20200305152028041"></p>
<p><code>一个例子</code></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305160831874.png" alt="image-20200305160831874"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305161213432.png" alt="image-20200305161213432"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n, V, maxValue = <span class="number">0</span>;  <span class="comment">//物品件数n，背包容量V，最大价值maxValue</span></span><br><span class="line"><span class="keyword">int</span> w[maxn], c[maxn];  <span class="comment">//w[i]为每件物品的重量，c[i]为每件物品的价值</span></span><br><span class="line"><span class="comment">//DFS,index为当前处理的物品编号</span></span><br><span class="line"><span class="comment">//sumW和sumC分别为当前总重量和当前总价值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> sumW, <span class="keyword">int</span> sumC)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(index == n) &#123;  <span class="comment">//已经完成对n件物品的选择（死胡同）</span></span><br><span class="line">      	<span class="keyword">if</span>(sumW &lt;= V &amp;&amp; sumC &gt; maxValue)&#123;</span><br><span class="line">          	maxValue = sumC;  <span class="comment">//不超过背包容量时更新最大价值maxValue</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> ；</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//岔道口</span></span><br><span class="line">  	DFS(index + <span class="number">1</span>, sumW, sumC); <span class="comment">//不选第index件物品</span></span><br><span class="line">  	DFS(index + <span class="number">1</span>, sum + w[index], sumC + c[index]);  <span class="comment">//选第index件物品</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我个人的理解是遍历了所有情况，以求得最大</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;V);</span><br><span class="line">	  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      	scnaf(<span class="string">"%d"</span>, &amp;w[i]);  <span class="comment">//每件物品的重量</span></span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i])  <span class="comment">//每件物品的价值</span></span><br><span class="line">    &#125;</span><br><span class="line">  	DFS(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">//初始时为第0件物品，当前总重量和总价值均为0</span></span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxValue);</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305163044476.png" alt="image-20200305163044476"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305163054863.png" alt="image-20200305163054863"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> sumW, <span class="keyword">int</span> sumC)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(index == n)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;  <span class="comment">//已经完成对n件物品的选择</span></span><br><span class="line">    &#125;</span><br><span class="line">    DFS(index + <span class="number">1</span>, sumW, sumC);  <span class="comment">//不选第index件物品</span></span><br><span class="line">    <span class="comment">//只有加入第index件物品后未超过容量V才能继续</span></span><br><span class="line">    <span class="keyword">if</span>(sumW + w[index] &lt;= V)&#123;</span><br><span class="line">		<span class="keyword">if</span>(sumC + c[index] &gt; ans)&#123;</span><br><span class="line">            ans = sumC + c[index];  <span class="comment">//更新最大价值maxValue</span></span><br><span class="line">        &#125;        </span><br><span class="line">        DFS(index + <span class="number">1</span>, sumW + w[index], sumC + c[index]); <span class="comment">//选第index件物品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305164732911.png" alt="image-20200305164732911"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305164930235.png" alt="image-20200305164930235"></p>
<p><code>另一个例子</code></p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305165848776.png" alt="image-20200305165848776"></p>
<p>平时看书还是不联网比较好。。</p>
<p>联网太容易分心了。</p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305170347772.png" alt="image-20200305170347772"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列A中n个数选k个数使得和为x，最大平方和为maxSumSqu</span></span><br><span class="line"><span class="keyword">int</span> n, k, x, maxSumSqu = <span class="number">-1</span>, A[maxn];</span><br><span class="line"><span class="comment">//temp存放临时方案，ans存放平方和最大方案</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp, ans;</span><br><span class="line"><span class="comment">//当前处理index号整数，当前已选整数个数为nowK</span></span><br><span class="line"><span class="comment">//当前已选整数之和为sum，当前已选整数平方和为sumSqu</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> nowK, <span class="keyword">int</span> sum, <span class="keyword">int</span> sumSqu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nowK == k &amp;&amp; sum ==x)&#123;  <span class="comment">//如果找到k个数的和为x</span></span><br><span class="line">        <span class="keyword">if</span>(sumSqu &gt; maxSumSqu)&#123; <span class="comment">//如果比当前找到的更优</span></span><br><span class="line">            maxSumSqu = sumSqu; <span class="comment">// 更新最大平方和</span></span><br><span class="line">            ans = temp; <span class="comment">//更新最优方案</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//已经处理完n个数，或者超过k个数，或者和超过x，返回</span></span><br><span class="line">    <span class="keyword">if</span>(index = n || nowK &gt; k || sum &gt; x) <span class="keyword">return</span>;</span><br><span class="line">    temp.push_back(A[index]);</span><br><span class="line">    DFS(index + <span class="number">1</span>, nowK + <span class="number">1</span>, sum + A[index], sumSqu + A[index] * A[index]);</span><br><span class="line">    temp.pop_back();</span><br><span class="line">    <span class="comment">//不选index号数</span></span><br><span class="line">    DFS(index + <span class="number">1</span>, nowK, sum, sumSqu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305171401401.png" alt="image-20200305171401401"></p>
<h2 id="二、广度搜索专题"><a href="#二、广度搜索专题" class="headerlink" title="二、广度搜索专题"></a>二、广度搜索专题</h2><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305172441063.png" alt="image-20200305172441063"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305172552045.png" alt="image-20200305172552045"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305172626396.png" alt="image-20200305172626396">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305172924522.png" alt="image-20200305172924522"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        取出队首元素top;</span><br><span class="line">        访问队首元素top;</span><br><span class="line">        将队首元素出队;</span><br><span class="line">        将top的下一层节点中未曾入队的节点全部入队，并设置为已入队;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305173224979.png" alt="image-20200305173224979"></p>
<p><code>一个例子：</code></p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305173250463.png" alt="image-20200305173250463"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305173400816.png" alt="image-20200305173400816"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200306090905647.png" alt="image-20200306090905647"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> X[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;<span class="comment">//上面对应下面来看</span></span><br></pre></td></tr></table></figure>

<p>这样就可以使用for循环来枚举4个方向，以确定与当前坐标(nowX, nowY)相邻的4个位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">    newX = nowX + X[i];</span><br><span class="line">    newY = nowY + Y[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面给出此例的代码，要尝试独立重写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;  <span class="comment">//位置(x,y)</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">int</span> n,m; <span class="comment">//矩阵大小为n*m</span></span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];  <span class="comment">//01矩阵</span></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//记录位置(x,y)是否已入过队</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;  <span class="comment">//判断坐标(x,y)是否需要访问</span></span><br><span class="line">    <span class="comment">//越界返回false</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt;= n || x &lt; <span class="number">0</span> || y &gt;= m || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//当前位置为0，或(x, y)已入过队，返回false</span></span><br><span class="line">    <span class="keyword">if</span>(matrix[x][y] == <span class="number">0</span> || inq[x][y] == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//以上都不满足，返回true；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BFS函数访问位置(x,y)所在的块，将该块中所有“1”的inq都设置为true</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; Q;   <span class="comment">//定义队列</span></span><br><span class="line">    Node.x = x, Node.y = y;  <span class="comment">//当前节点的坐标为(x, y)</span></span><br><span class="line">    Q.push(Node);  <span class="comment">//将节点Node入队</span></span><br><span class="line">    inq[x][y] = <span class="literal">true</span>;  <span class="comment">//设置(x,y)已入过队</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty)&#123;</span><br><span class="line">        node top = Q.front(); <span class="comment">//取出队首元素</span></span><br><span class="line">        Q.pop();   <span class="comment">//队首元素出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;  <span class="comment">//循环4次得到4个相邻位置</span></span><br><span class="line">            <span class="keyword">int</span> newX = top.x + X[i];</span><br><span class="line">            <span class="keyword">int</span> newY = top.y + Y[i];</span><br><span class="line">            <span class="keyword">if</span>(judge(newX, newY))&#123;  <span class="comment">//如果新位置(newX,newY)需要访问</span></span><br><span class="line">                Node.x = newX, Node.y = newY;  <span class="comment">//相当于把周围一层入队</span></span><br><span class="line">                Q.push(Node);  <span class="comment">//将节点Node加入队列</span></span><br><span class="line">                inq[newX][newY] = <span class="literal">true</span>;  <span class="comment">//设置位置(newX, newY)已入过队</span></span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; n; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; m; y++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matricx[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>; <span class="comment">//存放块数</span></span><br><span class="line">    <span class="comment">//枚举每一个位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; n; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; m; y++)&#123;</span><br><span class="line">            <span class="comment">//如果元素为1，且未入过队</span></span><br><span class="line">            <span class="keyword">if</span>(matrix[x][y] == <span class="number">1</span> &amp;&amp; inq[x][y] == <span class="literal">false</span>)&#123;</span><br><span class="line">                ans++;	<span class="comment">//块数加一</span></span><br><span class="line">                BFS(x,y) <span class="comment">//访问整个块</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>再来一个类似的例子</code></p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307093411031.png" alt="image-20200307093411031"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307093420797.png" alt="image-20200307093420797"></p>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307093527338.png" alt="image-20200307093527338"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>; <span class="comment">//step为从起点S到达该位置的最少步数</span></span><br><span class="line">&#125;S, T, Node;  <span class="comment">//S为起点，T为终点，Node为临时终点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m; <span class="comment">//n为行，m为列</span></span><br><span class="line"><span class="keyword">char</span> maze[maxn][maxn];  <span class="comment">//迷宫信息</span></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn] = &#123;<span class="literal">false</span>&#125;; <span class="comment">// 记录位置(x, y)是否已经入过队</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;  <span class="comment">//增量数组</span></span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//检测位置(x, y)是否有效</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= n || x &lt; <span class="number">0</span> || y &gt;= m || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//超过边界</span></span><br><span class="line">    <span class="keyword">if</span>(maze[x][y] == <span class="string">'*'</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//墙壁</span></span><br><span class="line">    <span class="keyword">if</span>(inq[x][y] == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//已入过队</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//有效位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;  <span class="comment">//定义队列</span></span><br><span class="line">    q.push(S); <span class="comment">//将起点S入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node top = q.front(); <span class="comment">//取出队首元素</span></span><br><span class="line">        q.pop();  <span class="comment">//队首元素出队</span></span><br><span class="line">        <span class="keyword">if</span>(top.x == T.x &amp;&amp; top.y == T.y) &#123;</span><br><span class="line">            <span class="keyword">return</span> top.<span class="built_in">step</span>; <span class="comment">//终点，直接返回最少步数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123; <span class="comment">//循环4次，得到4个相邻位置</span></span><br><span class="line">            <span class="keyword">int</span> newX = top.x + X[i];</span><br><span class="line">            <span class="keyword">int</span> newY = top.y + Y[i];</span><br><span class="line">            <span class="keyword">if</span>(test(newX, newY))&#123;  <span class="comment">//位置(newX, newY)有效</span></span><br><span class="line">                <span class="comment">//设置Node的坐标为(newX, newY)</span></span><br><span class="line">                Node.x = newX, Node.y = newY;</span><br><span class="line">                Node.<span class="built_in">step</span> = top.<span class="built_in">step</span> + <span class="number">1</span>;  <span class="comment">//Node层数为</span></span><br><span class="line">                q.push(Node);  <span class="comment">//将节点Node加入队列</span></span><br><span class="line">                inq[newX][newY] = <span class="literal">true</span>; <span class="comment">//设置位置(newX, newY)已入过队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//无法到达终点T时返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        getchar();  <span class="comment">// 过滤掉每行后面的换行符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            maze[i][j] = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        maze[i][m + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;S.x, &amp;S.y, &amp;T.x, &amp;T.y);  <span class="comment">//起点和终点的坐标</span></span><br><span class="line">    S.<span class="built_in">step</span>= <span class="number">0</span>;  <span class="comment">//初始化起点的层数为0， 即S到S的最少步数为0；</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, BFS());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307103808989.png" alt="image-20200307103808989">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307103820867.png" alt="image-20200307103820867"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307103954103.png" alt="image-20200307103954103"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307104553639.png" alt="image-20200307104553639"></p>
<p>​    这就是说，当需要对队列中的元素进行修改而不仅仅是访问时，队列中存放的元素最好不要是元素本身，而是他们的<strong>编号</strong>（如果数组的话则是<strong>下标</strong>）。</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307104808970.png" alt="image-20200307104808970"></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2020/03/10/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%93%E9%A2%98--%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="一、图的定义和相关术语"><a href="#一、图的定义和相关术语" class="headerlink" title="一、图的定义和相关术语"></a>一、图的定义和相关术语</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310163414497.png" alt="image-20200310163414497">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310163423047.png" alt="image-20200310163423047"></p>
</blockquote>
<h2 id="二、图的存储"><a href="#二、图的存储" class="headerlink" title="二、图的存储"></a>二、图的存储</h2><p>图的存储有两种方式：</p>
<h3 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1. 邻接矩阵"></a>1. 邻接矩阵</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310163522779.png" alt="image-20200310163522779"></p>
<h3 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2. 邻接表"></a>2. 邻接表</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310163706260.png" alt="image-20200310163706260"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310164102384.png" alt="image-20200310164102384"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310164149481.png" alt="image-20200310164149481"></p>
<h2 id="三、图的遍历"><a href="#三、图的遍历" class="headerlink" title="三、图的遍历"></a>三、图的遍历</h2><p>图的遍历方法一般两种：DFS和BFS</p>
<h3 id="1-采用DFS法遍历图"><a href="#1-采用DFS法遍历图" class="headerlink" title="1. 采用DFS法遍历图"></a>1. 采用DFS法遍历图</h3><ol>
<li><p>用DFS遍历图</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310165639764.png" alt="image-20200310165639764"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310165727389.png" alt="image-20200310165727389"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310165835746.png" alt="image-20200310165835746"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310174953002.png" alt="image-20200310174953002"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DFS(u)&#123;  <span class="comment">//访问顶点u</span></span><br><span class="line">    vis[u] = <span class="literal">true</span>;  <span class="comment">//设置u已被访问</span></span><br><span class="line">    <span class="keyword">for</span>(从u出发能到达的所有顶点v) &#123;  <span class="comment">//枚举从u出发可以到达的所有顶点v</span></span><br><span class="line">        <span class="keyword">if</span>(vis[v] == <span class="literal">false</span>)&#123;   <span class="comment">//如果v未被访问</span></span><br><span class="line">            DFS[v];  <span class="comment">//递归访问v</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">DFSTrave(G) &#123; <span class="comment">//遍历图G</span></span><br><span class="line">    <span class="keyword">for</span>(G的所有顶点u) &#123;<span class="comment">//对G的所有顶点u</span></span><br><span class="line">        <span class="keyword">if</span>(vis[u] == <span class="literal">false</span>)&#123; <span class="comment">//如果u未被访问</span></span><br><span class="line">            DFS(u); <span class="comment">//访问u所在的连通块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310180154466.png" alt="image-20200310180154466"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1000</span>;  <span class="comment">//最大顶点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10000000000</span>;  <span class="comment">//设INF为一个很大的数</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>邻接矩阵版</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, G[MAXV][MAXV];  <span class="comment">//n为顶点数，MAXV为最大顶点数</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;  <span class="comment">//如果顶点i已被访问，则vis[i] == true.初值为false</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> depth)</span> </span>&#123;  <span class="comment">//u为当前访问的顶点标号，depth为深度</span></span><br><span class="line">    vis[u] = <span class="literal">true</span>;  <span class="comment">//设置u已被访问</span></span><br><span class="line">    <span class="comment">//如果需要对u进行一些操作，可以在这里进行</span></span><br><span class="line">    对u的一些操作。。。;</span><br><span class="line">    <span class="comment">//下面对所有从u出发能到达的分支顶点进行枚举</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;  <span class="comment">//对每个顶点v</span></span><br><span class="line">        <span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;  <span class="comment">//如果v未被访问，且u可到达</span></span><br><span class="line">            DFS(v, depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[u] == <span class="literal">false</span>) &#123;</span><br><span class="line">            DFS(u, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>邻接表版</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[MAXV];  <span class="comment">//图G的邻接表</span></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//n为顶点数，MAXV为最大顶点数</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//如果需要对u进行一些操作，可以在这里进行</span></span><br><span class="line">    对u的一些操作。。。;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[v] == <span class="literal">false</span>) &#123;</span><br><span class="line">            DFS(v, depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[u] == <span class="literal">false</span>) &#123;</span><br><span class="line">            DFS(u, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处一例题：</p>
<p>[1034 Head of a Gang (30分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1034 Head of a Gang (30分).md)</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-采用BFS法遍历图"><a href="#2-采用BFS法遍历图" class="headerlink" title="2. 采用BFS法遍历图"></a>2. 采用BFS法遍历图</h3><ol>
<li><p>用BFS遍历图</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312093557799.png" alt="image-20200312093557799"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312093615464.png" alt="image-20200312093615464"></p>
</li>
<li><p>BFS的具体实现</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312093641261.png" alt="image-20200312093641261"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BFS(u) &#123;  <span class="comment">//遍历u所在的连通块</span></span><br><span class="line">    <span class="built_in">queue</span> q;  <span class="comment">//定义队列q</span></span><br><span class="line">    将u入队;</span><br><span class="line">    inq[u] = <span class="literal">true</span>;   <span class="comment">//设置u已被加入过队列</span></span><br><span class="line">    <span class="keyword">while</span>(q非空) &#123;  <span class="comment">//只要队列非空</span></span><br><span class="line">        取出q的队首元素u进行访问;</span><br><span class="line">        <span class="keyword">for</span>(从u出发可达的所有顶点v) &#123;  <span class="comment">//枚举从u能直接到达的顶点v</span></span><br><span class="line">            <span class="keyword">if</span>(inq[v] == <span class="literal">false</span>) &#123;  <span class="comment">//如果v未曾加入过队列</span></span><br><span class="line">                将v入队;</span><br><span class="line">                inq[v] = <span class="literal">true</span>;  <span class="comment">//设置v已被加入过队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">BFSTrave(G)&#123;  <span class="comment">//遍历图G</span></span><br><span class="line">    <span class="keyword">for</span>(G的所有顶点u) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inq[u] == <span class="literal">false</span>) &#123;</span><br><span class="line">            BFS(u);  <span class="comment">//遍历u所在的连通块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 两种实现方式：</p>
<ul>
<li><p>邻接矩阵版</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, G[MAXV][MAXV];  <span class="comment">//n为顶点数， MAXV为最大顶点数</span></span><br><span class="line"><span class="keyword">bool</span> inq[MAXV] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//其实就是vis</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;  </span><br><span class="line">    q.push(u);</span><br><span class="line">    inq[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">            <span class="comment">//未曾加入队列，且连通</span></span><br><span class="line">            <span class="keyword">if</span>(inq[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">                q.push(v);  <span class="comment">//将v入队</span></span><br><span class="line">                inq[v] = <span class="literal">true</span>;  <span class="comment">//标记v为已被加入过队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTrave</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inq[u] == <span class="literal">false</span>) &#123;</span><br><span class="line">            BFS(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<pre><code>* 邻接表

    <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[MAXV];  </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> inq[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;  <span class="comment">//定义队列q</span></span><br><span class="line">    q.push(u);</span><br><span class="line">    inq[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">            <span class="keyword">if</span>(inq[v] == <span class="literal">false</span>) &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                inq[v] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTrave</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inq[u] == <span class="literal">false</span>)&#123;</span><br><span class="line">            BFS(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    ![image-20200312102731338](https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312102731338.png)

    ![image-20200312102747593](https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200312102747593.png)

    <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    Node start;</span><br><span class="line">    start.v = s;</span><br><span class="line">    start.layer = <span class="number">0</span>;</span><br><span class="line">    q.push(start);</span><br><span class="line">    inq[start.v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node topNode = q.front();<span class="comment">//得到队首</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = topNode.v;  <span class="comment">//得到队首编号</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            Node next = Adj[u][i];</span><br><span class="line">            next.laryer = topNode.layer + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(inq[next.v] == <span class="literal">false</span>) &#123;</span><br><span class="line">                q.push(next);</span><br><span class="line">                inq[next.v] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    见一例题

    [1076 Forwards on Weibo (30分)](/Users/kirito/Documents/Typora--markdown笔记/笔记/复试/机试/PAT刷题/A组/1076 Forwards on Weibo (30分).md)</code></pre>]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>树-1</title>
    <url>/2020/03/03/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%93%E9%A2%98--%E6%A0%91-1/</url>
    <content><![CDATA[<h1 id="树-1"><a href="#树-1" class="headerlink" title="树-1"></a>树-1</h1><h2 id="一、树与二叉树"><a href="#一、树与二叉树" class="headerlink" title="一、树与二叉树"></a>一、树与二叉树</h2><h3 id="1-树的定义和性质"><a href="#1-树的定义和性质" class="headerlink" title="1. 树的定义和性质"></a>1. 树的定义和性质</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307105024070.png" alt="image-20200307105024070"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307105106847.png" alt="image-20200307105106847"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307105314904.png" alt="image-20200307105314904"></p>
<h3 id="2-二叉树的递归定义"><a href="#2-二叉树的递归定义" class="headerlink" title="2. 二叉树的递归定义"></a>2. 二叉树的递归定义</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307110319958.png" alt="image-20200307110319958"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307110406775.png" alt="image-20200307110406775">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307110454250.png" alt="image-20200307110454250"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307110629517.png" alt="image-20200307110629517"></p>
<h3 id="3-二叉树的存储和基本操作"><a href="#3-二叉树的存储和基本操作" class="headerlink" title="3. 二叉树的存储和基本操作"></a>3. 二叉树的存储和基本操作</h3><ol>
<li><p>二叉树的存储结构</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307111019446.png" alt="image-20200307111019446"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">typename</span> data;  <span class="comment">//数据域</span></span><br><span class="line">    node* lchild;   <span class="comment">//指向左子树根节点的指针</span></span><br><span class="line">    node* rchild;   <span class="comment">//指向右子树根节点的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> 由于在二叉树建树前根节点不存在，因此期地址一般设为NULL</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node* root = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p> 而如果需要新建节点(例如往二叉树中插入节点的时候，就可以使用下面的函数)：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    node* Node = <span class="keyword">new</span> node;</span><br><span class="line">    Node-&gt;data = v; <span class="comment">//结点权值为v</span></span><br><span class="line">    Node-&gt;lchild = Node-&gt;rchild = <span class="literal">NULL</span>;  <span class="comment">//初始状态下没有左右孩子</span></span><br><span class="line">    <span class="keyword">return</span> Node;  <span class="comment">//返回新建结点的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307111752207.png" alt="image-20200307111752207"></p>
<ol start="2">
<li><p>二叉树的查找、修改</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307111913551.png" alt="image-20200307111913551"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node* root, <span class="keyword">int</span> x, <span class="keyword">int</span> newdata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">//空树，死胡同（递归边界）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data == x)&#123; <span class="comment">//找到数据域为x的节点，把它修改成newdata</span></span><br><span class="line">        root-&gt;data = newdata;</span><br><span class="line">    &#125;</span><br><span class="line">    search(root-&gt;lchild, x, newdata);</span><br><span class="line">    search(root-&gt;rchild, x, newdata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二叉树的插入</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307112530340.png" alt="image-20200307112530340"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//insert函数将二叉树中插入一个数据域为x的新结点</span></span><br><span class="line"><span class="comment">//注意根节点指针root要使用引用，否则插入不会成功</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123; <span class="comment">// 空树，说明查找失败，也即插入位置（递归边界）</span></span><br><span class="line">        root = <span class="keyword">new</span> node(x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(由二叉树性质，x应该插在左子树) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);  <span class="comment">//往左子树搜索（递归式）</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);  <span class="comment">//往右子树搜索（递归式）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307115751291.png" alt="image-20200307115751291"></p>
</li>
<li><p>二叉树的创建</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307115851662.png" alt="image-20200307115851662"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉树的建立</span></span><br><span class="line"><span class="function">node* <span class="title">Create</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    node* root = <span class="literal">NULL</span>; <span class="comment">//新建空根结点root</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        insert(root, data[i]);  <span class="comment">//将data[0]-data[n-1]插入二叉树中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二叉树存储结构图示</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307142717840.png" alt="image-20200307142717840"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307143823787.png" alt="image-20200307143823787"></p>
</li>
<li><p>完全二叉树的存储结构</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307144248272.png" alt="image-20200307144248272"></p>
</li>
</ol>
</li>
</ol>
<h2 id="二、二叉树的遍历"><a href="#二、二叉树的遍历" class="headerlink" title="二、二叉树的遍历"></a>二、二叉树的遍历</h2><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307144720592.png" alt="image-20200307144720592"></p>
</blockquote>
<h3 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h3><ol>
<li><p>先序遍历的实现</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307145408273.png" alt="image-20200307145408273"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">//到达空树，递归边界</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问根节点root，例如将其数据域输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, root-&gt;data);</span><br><span class="line">    <span class="comment">//访问左子树</span></span><br><span class="line">    preorder(root-&gt;lchild);</span><br><span class="line">    <span class="comment">//访问右子树</span></span><br><span class="line">    preorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307145848878.png" alt="image-20200307145848878"></p>
</li>
<li><p>先序遍历的性质</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307150012825.png" alt="image-20200307150012825"></p>
</li>
</ol>
<h3 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2.中序遍历"></a>2.中序遍历</h3><ol>
<li><p>中序遍历的实现</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307150349007.png" alt="image-20200307150349007"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">//到达空树，递归边界</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问左子树</span></span><br><span class="line">    inorder(root-&gt;lchild);</span><br><span class="line">    <span class="comment">//访问根节点root，例如将其数据域输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, root-&gt;data);</span><br><span class="line">    <span class="comment">//访问右子树</span></span><br><span class="line">    inorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307150650993.png" alt="image-20200307150650993"></p>
</li>
<li><p>中序遍历序列的性质</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307150816989.png" alt="image-20200307150816989"></p>
</li>
</ol>
<h3 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="3. 后序遍历"></a>3. 后序遍历</h3><ol>
<li><p>后序遍历的实现</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307150906615.png" alt="image-20200307150906615"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(root-&gt;lchild);	<span class="comment">//左子树</span></span><br><span class="line">    postorder(root-&gt;rchild);	<span class="comment">//右子树</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, root-&gt;data);  <span class="comment">//访问根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307151113125.png" alt="image-20200307151113125"></p>
</li>
<li><p>后序遍历序列的性质</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307151147820.png" alt="image-20200307151147820"></p>
</li>
</ol>
<h3 id="4-层序遍历"><a href="#4-层序遍历" class="headerlink" title="4.层序遍历"></a>4.层序遍历</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307151226836.png" alt="image-20200307151226836"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307151249820.png" alt="image-20200307151249820"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LayerOrder</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt; q; <span class="comment">//注意队列里是存地址</span></span><br><span class="line">    q.push(root);   <span class="comment">//将根节点地址入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        node* now = q.front(); <span class="comment">//取出队首元素</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,now-&gt;data);<span class="comment">//访问队首元素</span></span><br><span class="line">        <span class="keyword">if</span>(now-&gt;lchild != <span class="literal">NULL</span>) q.push(now-&gt;lchild);  <span class="comment">//左子树非空</span></span><br><span class="line">        <span class="keyword">if</span>(now-&gt;rchild != <span class="literal">NULL</span>) q.push(now-&gt;rchild);  <span class="comment">//右子树非空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一个版本，可以记录层号</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> ans;  <span class="comment">// 树为空则直接返回</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; each_level;  <span class="comment">//依次存储每一层从左往右的结点值</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;TreeNode*&gt;q;  <span class="comment">// 队列，先进进出(FIFO)</span></span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = q.<span class="built_in">size</span>();  <span class="comment">// 每层的结点数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            TreeNode* curr = q.front();  <span class="comment">// 将现结点加入each_level</span></span><br><span class="line">            each_level.push_back(curr-&gt;val);</span><br><span class="line">            <span class="comment">// 非空结点不计入答案，所以要判断现结点的左右结点是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;left) q.push(curr-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;right) q.push(curr-&gt;right);</span><br><span class="line">            q.pop();  <span class="comment">//记得弹出之前的头结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(each_level);  <span class="comment">// 把每层的结点存入ans</span></span><br><span class="line">        each_level.<span class="built_in">clear</span>();  <span class="comment">//  清除每层的结点，以便添加下一层的非空结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307152220208.png" alt="image-20200307152220208"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307152235199.png" alt="image-20200307152235199"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">    node* lchild;</span><br><span class="line">    node* rchild;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307152335752.png" alt="image-20200307152335752"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LayerOrder</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt; q;  <span class="comment">//注意队列里是存地址</span></span><br><span class="line">    root-&gt;layer = <span class="number">1</span>;  <span class="comment">//根节点的层号为1</span></span><br><span class="line">    q.push(root);   <span class="comment">//将根节点地址入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node* now = q.front();  <span class="comment">//取出队首元素</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, now-&gt;data); <span class="comment">//访问队首元素</span></span><br><span class="line">        <span class="keyword">if</span>(now-&gt;lchild != <span class="literal">NULL</span>) &#123; <span class="comment">//左子树非空</span></span><br><span class="line">            now-&gt;lchild-&gt;layer = now-&gt;layer + <span class="number">1</span>;  <span class="comment">//层数加一</span></span><br><span class="line">       		q.push(now-&gt;lchild); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            now-&gt;rchild-&gt;layer = now-&gt;layer + <span class="number">1</span>;  <span class="comment">//层数加一</span></span><br><span class="line">            q.push(now-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>最后解决一个重要问题</code></p>
<p><strong>给定一棵二叉树的先序遍历序列和中序遍历序列，重建这棵二叉树</strong></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307155510996.png" alt="image-20200307155510996"></p>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307155555680.png" alt="image-20200307155555680" style="zoom:50%;" />

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307155629482.png" alt="image-20200307155629482"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前先序序列区间为[preL, preR]，中序序列区间为[inL, inR]，返回根节点地址</span></span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preL &gt; preR) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">//先序序列长度小于等于0时，直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    node* root = <span class="keyword">new</span> node; <span class="comment">//新建一个新的节点，用来存放当前二叉树的根节点</span></span><br><span class="line">    root-&gt;data = pre[preL];  <span class="comment">//新结点的数据域为根节点的值</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k = inL; k &lt;= inR; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(in[k] == pre[preL]) &#123;  <span class="comment">//在中序序列中找到in[k] == pre[L]的结点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numLeft = k - inL; <span class="comment">//左子树的结点个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//左子树的先序区间为[preL+1, preL+numLeft]，中序区间为[inL, k-1]</span></span><br><span class="line">    <span class="comment">//返回左子树的根节点地址，赋值给root的左指针</span></span><br><span class="line">    root-&gt;lchild = create(preL + <span class="number">1</span>, preL + numLeft, inL, k - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//右子树的先序区间为[preL + numLeft + 1, preR],中序区间为[k+1, inR]</span></span><br><span class="line">    <span class="comment">//返回右子树的根节点地址，赋值给root的右指针</span></span><br><span class="line">    root-&gt;rchild = create(preL + numLeft + <span class="number">1</span>, preR, k + <span class="number">1</span>, inR);</span><br><span class="line">    <span class="keyword">return</span> root;  <span class="comment">//返回根节点地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307155915838.png" alt="image-20200307155915838">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200307155927325.png" alt="image-20200307155927325"></p>
<h3 id="5-二叉树的静态实现"><a href="#5-二叉树的静态实现" class="headerlink" title="5. 二叉树的静态实现"></a>5. 二叉树的静态实现</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308093652561.png" alt="image-20200308093652561"></p>
<p>在定义二叉树时，采用的是二叉链表的结构，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">typename</span> data;   <span class="comment">//数据域</span></span><br><span class="line">    node* lchild;   <span class="comment">//指向左子树根节点的指针</span></span><br><span class="line">    node* rchild;   <span class="comment">//指向右子树根节点的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308093930826.png" alt="image-20200308093930826"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">typename</span> data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">int</span> lchild;   <span class="comment">//指向左子树根节点的指针</span></span><br><span class="line">    <span class="keyword">int</span> rchild;   <span class="comment">//指向右子树根节点的指针</span></span><br><span class="line">&#125;Node[maxn];</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308094328966.png" alt="image-20200308094328966">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308094350792.png" alt="image-20200308094350792">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308094524916.png" alt="image-20200308094524916">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308094558729.png" alt="image-20200308094558729">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308094621253.png" alt="image-20200308094621253"></p>
<h2 id="三、树的遍历"><a href="#三、树的遍历" class="headerlink" title="三、树的遍历"></a>三、树的遍历</h2><h3 id="1-树的静态写法"><a href="#1-树的静态写法" class="headerlink" title="1. 树的静态写法"></a>1. 树的静态写法</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308095112457.png" alt="image-20200308095112457"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">typename</span> data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">int</span> child[maxn];   <span class="comment">//指针域，存放所有子节点的下标</span></span><br><span class="line">&#125;Node[maxn];   <span class="comment">//结点数组，maxn为节点上限个数</span></span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308095500406.png" alt="image-20200308095500406"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">typename</span> data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="built_in">vector</span> child;   <span class="comment">//指针域，存放所有子节点的下标</span></span><br><span class="line">&#125;Node[maxn];   <span class="comment">//结点数组，maxn为节点上限个数</span></span><br></pre></td></tr></table></figure>

<p>与二叉树的静态实现类似，当需要新建一个节点时，就按顺序从数组中取出一个下标即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    Node[index].data = v;</span><br><span class="line">    Node[index].child.<span class="built_in">clear</span>(); <span class="comment">//清空子节点</span></span><br><span class="line">    <span class="keyword">return</span> index++;  <span class="comment">//返回节点下标，并令index自增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308101402859.png" alt="image-20200308101402859"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308101418083.png" alt="image-20200308101418083"></p>
<h3 id="2-树的先根遍历"><a href="#2-树的先根遍历" class="headerlink" title="2. 树的先根遍历"></a>2. 树的先根遍历</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308101535973.png" alt="image-20200308101535973"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, Node[root].data); <span class="comment">//访问当前节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Node[root].child.<span class="built_in">size</span>(), i++) &#123;</span><br><span class="line">        PreOrder(Node[root].child[i]);   <span class="comment">//递归访问节点root的所有子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308101742559.png" alt="image-20200308101742559"></p>
<h3 id="3-树的层序遍历"><a href="#3-树的层序遍历" class="headerlink" title="3. 树的层序遍历"></a>3. 树的层序遍历</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308102741865.png" alt="image-20200308102741865"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LayerOrder</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(root);  <span class="comment">//将根节点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty) &#123;</span><br><span class="line">        <span class="keyword">int</span> front = Q.front();  <span class="comment">//取出队首元素</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, Node[front].data);  <span class="comment">//访问队首元素的数据</span></span><br><span class="line">        Q.pop();  <span class="comment">//对首元素出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Node[front].child.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            Q.push(Node[front].child[i]);  <span class="comment">//队首元素的所有子结点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，如果需要对节点的层号进行求解，只需要在结构体node的定义中增加变量来记录节点的层号</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">    <span class="keyword">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="built_in">vector</span> child;   <span class="comment">//指针域，存放所有子节点的下标</span></span><br><span class="line">&#125;Node[maxn];   <span class="comment">//结点数组，maxn为节点上限个数</span></span><br></pre></td></tr></table></figure>

<p>于是树的层序遍历就可以写成下面这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LayerOrder</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(root);  <span class="comment">//将根节点入队</span></span><br><span class="line">    Node[root].layer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty) &#123;</span><br><span class="line">        <span class="keyword">int</span> front = Q.front();  <span class="comment">//取出队首元素</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, Node[front].data);  <span class="comment">//访问队首元素的数据</span></span><br><span class="line">        Q.pop();  <span class="comment">//对首元素出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Node[front].child.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> child = Node[front].child[i];</span><br><span class="line">            Node[child].layer = Node[front].layer+<span class="number">1</span>;</span><br><span class="line">            Q.push(child);  <span class="comment">//队首元素的所有子结点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-从树的遍历看DFS与BFS"><a href="#4-从树的遍历看DFS与BFS" class="headerlink" title="4. 从树的遍历看DFS与BFS"></a>4. 从树的遍历看DFS与BFS</h3><ol>
<li><p>深度优先搜索（DFS）与先根遍历</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308104359748.png" alt="image-20200308104359748"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308104556834.png" alt="image-20200308104556834"></p>
<ol start="2">
<li><p>广度优先搜索（BFS）与层序遍历</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308104656114.png" alt="image-20200308104656114"></p>
<p>此处一例题：</p>
<p>[1053 Path of Equal Weight (30分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1053 Path of Equal Weight (30分).md)</p>
</li>
</ol>
</li>
</ol>
<h2 id="四、二叉查找树"><a href="#四、二叉查找树" class="headerlink" title="四、二叉查找树"></a>四、二叉查找树</h2><h3 id="1-二叉查找树的定义"><a href="#1-二叉查找树的定义" class="headerlink" title="1.二叉查找树的定义"></a>1.二叉查找树的定义</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308171056282.png" alt="image-20200308171056282"></p>
<h3 id="2-二叉查找树的基本操作"><a href="#2-二叉查找树的基本操作" class="headerlink" title="2. 二叉查找树的基本操作"></a>2. 二叉查找树的基本操作</h3><ol>
<li><p>查找操作</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308171746056.png" alt="image-20200308171746056"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//search函数查找二叉查找树中数据域的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node* root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;  <span class="comment">//空树，查找失败</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seatch failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == root-&gt;data) &#123;  <span class="comment">//查找成功，访问之</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, root-&gt;data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; root-&gt;data) &#123;  <span class="comment">//如果x比根节点的数据域小，说明x在左子树</span></span><br><span class="line">        search(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        search(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308172301353.png" alt="image-20200308172301353"></p>
</li>
<li><p>插入操作</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308172328619.png" alt="image-20200308172328619"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//insert函数将在二叉树中插入一个数据域为x的新结点（注意参数root要加引用）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123; <span class="comment">//空树，说明查找失败，也即插入位置</span></span><br><span class="line">        root = <span class="keyword">new</span> node(x);  <span class="comment">//新建节点权值为x</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == root-&gt;data) &#123; <span class="comment">//查找成功，说明结点已存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二叉查找树的建立</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308172752383.png" alt="image-20200308172752383"></p>
</li>
<li><p>二叉查找树的删除</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308172810673.png" alt="image-20200308172810673"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308172824818.png" alt="image-20200308172824818"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先要找前驱和后继</span></span><br><span class="line"><span class="comment"> * 这里面给的root分别是所要删节点的左孩子和右孩子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找前驱</span></span><br><span class="line"><span class="function">node* <span class="title">findMax</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = root-&gt;rchild;   <span class="comment">//不断往右，直到没有右孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找后继</span></span><br><span class="line"><span class="function">node* <span class="title">findMin</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = root-&gt;lchild;  <span class="comment">//不断往左，直到没有左孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308174407249.png" alt="image-20200308174407249"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308174520924.png" alt="image-20200308174520924"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除以root为跟姐点的树中权值为x的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(node* &amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;  <span class="comment">//不存在权值为x的结点</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data == x) &#123;  <span class="comment">//找到欲删除结点</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; root-&gt;rchild == <span class="literal">NULL</span>) &#123; <span class="comment">//叶子结点直接删除</span></span><br><span class="line">            root = <span class="literal">NULL</span>;  <span class="comment">//把root地址设为NULL，父节点就引用不到它了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;lchild != <span class="literal">NULL</span>) &#123;  <span class="comment">//左子树不为空时</span></span><br><span class="line">            node* pre = findMax(root-&gt;lchild);  <span class="comment">//找root前驱</span></span><br><span class="line">            root-&gt;data = pre-&gt;data; <span class="comment">//用前驱覆盖root</span></span><br><span class="line">            deleteNode(root-&gt;lchild, pre-&gt;data);  <span class="comment">//往左子树中删除结点pre</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node* next = findMin(root-&gt;rchild); <span class="comment">//找root后继</span></span><br><span class="line">            root-&gt;data = next-&gt;data; <span class="comment">//用后继覆盖root</span></span><br><span class="line">            deleteNode(root-&gt;rchild, next-&gt;data);  <span class="comment">//在右子树中删除结点next</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;data &gt; x) &#123;</span><br><span class="line">        deleteNode(root-&gt;lchild, x); <span class="comment">//在左子树中删除x</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deleteNode(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308175557725.png" alt="image-20200308175557725"></p>
</li>
</ol>
<h3 id="3-二叉查找树的性质"><a href="#3-二叉查找树的性质" class="headerlink" title="3. 二叉查找树的性质"></a>3. 二叉查找树的性质</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308171305978.png" alt="image-20200308171305978">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200308171316885.png" alt="image-20200308171316885"></p>
<p>下面是一个例题：</p>
<p>[1043 Is It a Binary Search Tree (25分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1043 Is It a Binary Search Tree (25分).md)</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构专题--线性结构</title>
    <url>/2020/03/03/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%93%E9%A2%98--%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数据结构专题–线性结构"><a href="#数据结构专题–线性结构" class="headerlink" title="数据结构专题–线性结构"></a>数据结构专题–线性结构</h1><h2 id="一、栈的应用（逻辑结构）"><a href="#一、栈的应用（逻辑结构）" class="headerlink" title="一、栈的应用（逻辑结构）"></a>一、栈的应用（逻辑结构）</h2><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303151832342.png" alt="image-20200303151832342"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303151925302.png" alt="image-20200303151925302"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303152002665.png" alt="image-20200303152002665">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303152118653.png" alt="image-20200303152118653"></p>
<h2 id="二、队列的应用（逻辑结构）"><a href="#二、队列的应用（逻辑结构）" class="headerlink" title="二、队列的应用（逻辑结构）"></a>二、队列的应用（逻辑结构）</h2><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303152145379.png" alt="image-20200303152145379"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303152213956.png" alt="image-20200303152213956">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303152225046.png" alt="image-20200303152225046">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200303152237078.png" alt="image-20200303152237078"></p>
<h2 id="三、链表处理（物理结构）"><a href="#三、链表处理（物理结构）" class="headerlink" title="三、链表处理（物理结构）"></a>三、链表处理（物理结构）</h2><h3 id="1-链表的概念"><a href="#1-链表的概念" class="headerlink" title="1. 链表的概念"></a>1. 链表的概念</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304105034120.png" alt="image-20200304105034120"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  	<span class="keyword">typename</span> data;</span><br><span class="line">  	node *next;  <span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304105336563.png" alt="image-20200304105336563"></p>
<h3 id="2-使用malloc函数或者new运算符为链表节点分配内存空间"><a href="#2-使用malloc函数或者new运算符为链表节点分配内存空间" class="headerlink" title="2. 使用malloc函数或者new运算符为链表节点分配内存空间"></a>2. 使用malloc函数或者new运算符为链表节点分配内存空间</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304105355025.png" alt="image-20200304105355025"></p>
<ol>
<li><p><code>malloc</code>函数</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304105657845.png" alt="image-20200304105657845"></p>
<p> <code>typename* p = (typename*)malloc(sizeof(typename));</code></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304105920753.png" alt="image-20200304105920753"></p>
</li>
<li><p><code>new</code>运算符</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110013680.png" alt="image-20200304110013680"></p>
</li>
<li><p>内存泄漏</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110110179.png" alt="image-20200304110110179"></p>
</blockquote>
<ol>
<li><p><code>free</code>函数</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110214838.png" alt="image-20200304110214838"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110327899.png" alt="image-20200304110327899"></p>
</li>
<li><p><code>delete</code>运算符</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110413970.png" alt="image-20200304110413970"></p>
</li>
</ol>
</li>
</ol>
<h3 id="3-链表的基本操作"><a href="#3-链表的基本操作" class="headerlink" title="3.链表的基本操作"></a>3.链表的基本操作</h3><ol>
<li><p>创建链表</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110621574.png" alt="image-20200304110621574"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304110659058.png" alt="image-20200304110659058"></p>
</li>
<li><p>查找元素</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111134693.png" alt="image-20200304111134693">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111143861.png" alt="image-20200304111143861"></p>
</li>
<li><p>插入元素</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111444573.png" alt="image-20200304111444573">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111456531.png" alt="image-20200304111456531"></p>
</li>
</ol>
<ol start="4">
<li><p>删除元素</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111519036.png" alt="image-20200304111519036">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111528725.png" alt="image-20200304111528725"></p>
</li>
</ol>
<h3 id="4-静态链表"><a href="#4-静态链表" class="headerlink" title="4. 静态链表"></a>4. 静态链表</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111620670.png" alt="image-20200304111620670"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200304111741941.png" alt="image-20200304111741941"></p>
<p>来看一个静态链表的例题：</p>
<p>[1032 Sharing](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1032 Sharing (25分).md)</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305090217621.png" alt="image-20200305090217621"></p>
<ol>
<li><p>定义静态链表。</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  	<span class="keyword">int</span> address; <span class="comment">//结点地址</span></span><br><span class="line">  	<span class="keyword">typename</span> data；  <span class="comment">//数据域</span></span><br><span class="line">     <span class="keyword">int</span> next；  <span class="comment">//指针域</span></span><br><span class="line">     XXX；  结点的某个性质，不同题目会有不同设置</span><br><span class="line">&#125;node[<span class="number">100010</span>];</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305090738897.png" alt="image-20200305090738897"></p>
</li>
<li><p>程序开始时，初始化。</p>
<p> 一般来说，需要对定义中XXX进行初始化，将其定义为正常情况达不到的数字（一般来说需要小于所有能达到的数字，理由第四步说明），例如对节点是否在链表上这个性质来说，我们可以初始化为0（即false），表示结点不在链表上。</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;maxn;  i++)&#123;</span><br><span class="line">	  node[i].XXX = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>题目一般都会给出一条链表的首结点的地址，那么我们就可以一句这个地址来遍历得到整条链表。</p>
<p> 需要注意的是，这一步同时也是我们对节点性质XXX进行标记、并对有效节点的个数进行计数的时候，例如对节点是否在链表上这个性质来说，就可以吧XXX置为1（即true）</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p = <span class="built_in">begin</span>(), count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="number">-1</span>)&#123;</span><br><span class="line">  	XXX = <span class="number">1</span>;</span><br><span class="line">     count++;</span><br><span class="line">  	p = node[p]-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于使用静态莲表示，是直接从业地址映射（hash）的方式，转就会使得数组下标的不连续，而很多时候题目给出的节点并不都是有效节点。为了能够可控的访问有效节点，一般都需要用对数组进行排序以把有效节点一道数组左端，这样就可以用步骤3得到count来访问它们。</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200305092408391.png" alt="image-20200305092408391"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">(Node a, Node b)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(a.XXX == <span class="number">-1</span> || b.XXX == <span class="number">-1</span>)&#123;</span><br><span class="line">      	<span class="comment">//至少一个节点是无效节点，就把它放到数组后面</span></span><br><span class="line">      	<span class="keyword">return</span> a.XXX &gt; b.XXX;   <span class="comment">//学到！！</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	      <span class="comment">//第二级排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在经历步骤4后，链表的有效结点就都在数组走断了，且已经按节点的性质进行了排序，接下来就要看题目在排序之后具体要求做什么了。</p>
</li>
</ol>
<p>再看一道例题：</p>
<p>[1052 Linked List Sorting (25分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1052 Linked List Sorting (25分).md)</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>线性结构</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径和拓扑排序</title>
    <url>/2020/03/26/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84&amp;%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="最短路径和拓扑排序"><a href="#最短路径和拓扑排序" class="headerlink" title="最短路径和拓扑排序"></a>最短路径和拓扑排序</h1><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>解决的问题：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200331204944554.png" alt="image-20200331204944554"></p>
</blockquote>
<h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><blockquote>
<p>直接把算法笔记上的例子看一下吧以下是截图。</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403165214078.png" alt="image-20200403165214078"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403165304552.png" alt="image-20200403165304552"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403165412638.png" alt="image-20200403165412638"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403165433888.png" alt="image-20200403165433888"></p>
</blockquote>
<p>好的，这里是伪代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//G为图，一般设为全局变量，数组d为源点到达各点的最短路径长度，s为起点</span></span><br><span class="line">Dijkstra(G, d[], s) &#123;</span><br><span class="line">    初始化;</span><br><span class="line">    <span class="keyword">for</span>(循环n次) &#123;</span><br><span class="line">        u = 是d[u]最小的还未被访问的顶点的标号;</span><br><span class="line">        记u已被访问;</span><br><span class="line">        <span class="keyword">for</span>(从u出发能到达的所有顶点v)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v未被访问 &amp;&amp; 以u为中介点使s到顶点v的最短距离d[v]更优) &#123;</span><br><span class="line">                优化d[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403170001655.png" alt="image-20200403170001655"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1000</span>;  <span class="comment">//最大顶点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;  <span class="comment">//设INF为一个很大的数</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>邻接矩阵版—-有向图（无向图相当于有向图每条边都变为两条方向的边，边权值相同）</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> G[MAXV][MAXV]; <span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> d[MAXV]; <span class="comment">//存放由s点到其他各点的距离</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;  <span class="comment">//访问数组,表示此节点已被访问（最小距离已经确定）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123; <span class="comment">//s为起点</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d, d + MAXV, INF);  <span class="comment">//先都设置不可达</span></span><br><span class="line">    d[s] = <span class="number">0</span>;  <span class="comment">//自己为0</span></span><br><span class="line">    <span class="comment">//vis[s] = true;不可设置为true，必须第一次循环为s，这样才是从s往其他结点</span></span><br><span class="line">    <span class="comment">//核心算法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">//i为节点大小</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;<span class="comment">//用来标记</span></span><br><span class="line">        <span class="comment">//得到路径最小的且没有访问过的节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				<span class="comment">//之所以要用MIN和u组合，是因为如果直接用u</span></span><br><span class="line">                <span class="comment">//并不存在d[-1],也不能直接等于其中一个，因为不知道有没有访问过</span></span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u = <span class="number">-1</span>) <span class="keyword">return</span>;  <span class="comment">//说明找不到</span></span><br><span class="line">        vis[u] = <span class="literal">true</span>;      <span class="comment">//找得到，标记为true</span></span><br><span class="line">        <span class="comment">//更新由该节点出发的更优最短路径</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">//未访问&amp;&amp;由u可到达&amp;&amp;比距离表里更优</span></span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF &amp;&amp; d[u] + G[u][j] &lt; d[j]) &#123;</span><br><span class="line">                d[j] = d[u] + G[u][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>邻接表版</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v; <span class="comment">//点的下标</span></span><br><span class="line">    <span class="keyword">int</span> w; <span class="comment">//边权</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; Adj[MAXV];  <span class="comment">//之所以采用这种形式，而不是二重vector，是因为第一层只需要一个数字标识下标</span></span><br><span class="line"><span class="keyword">int</span> d[MAXV];  <span class="comment">//距离</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//访问数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d, d + MAXN, INF);</span><br><span class="line">    <span class="comment">//vis[s] = true;不可设置为true，必须第一次循环为s，这样才是从s往其他结点</span></span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//最外层循环每一次必有一个结点访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//找最小的未访问结点</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">  				u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">//邻接表写法和邻接矩阵写法的不同之处：</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[Adj[u][j].v] == <span class="literal">false</span> </span><br><span class="line">               <span class="comment">//&amp;&amp; Adj[u][j].w != INF //这个不用判断，因为邻接表特性！</span></span><br><span class="line">               &amp;&amp; Adj[u][j].w + d[u] &lt; d[Adj[u][j].v])&#123;</span><br><span class="line">                d[Adj[u][j].v] = Adj[u][j].w + d[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<pre><code>但是以上只是求出了最短距离，而非最短路径，如果要得到最短路径，还需要一些措施：

&gt; ![image-20200403204421924](https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403204421924.png)

所以很容易实现：

邻接矩阵为例：

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> G[MAXV][MAXV]; <span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> d[MAXV]; <span class="comment">//存放由s点到其他各点的距离</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;  <span class="comment">//访问数组,表示此节点已被访问（最小距离已经确定）</span></span><br><span class="line"><span class="keyword">int</span> pre[MAXV];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123; <span class="comment">//s为起点</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d, d + MAXV, INF);  <span class="comment">//先都设置不可达</span></span><br><span class="line">    d[s] = <span class="number">0</span>;  <span class="comment">//自己为0</span></span><br><span class="line">    <span class="comment">//vis[s] = true;不可设置为true，必须第一次循环为s，这样才是从s往其他结点</span></span><br><span class="line">    <span class="comment">//核心算法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">//i为节点大小</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;<span class="comment">//用来标记</span></span><br><span class="line">        <span class="comment">//得到路径最小的且没有访问过的节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				<span class="comment">//之所以要用MIN和u组合，是因为如果直接用u</span></span><br><span class="line">                <span class="comment">//并不存在d[-1],也不能直接等于其中一个，因为不知道有没有访问过</span></span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u = <span class="number">-1</span>) <span class="keyword">return</span>;  <span class="comment">//说明找不到</span></span><br><span class="line">        vis[u] = <span class="literal">true</span>;      <span class="comment">//找得到，标记为true</span></span><br><span class="line">        <span class="comment">//更新由该节点出发的更优最短路径</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">//未访问&amp;&amp;由u可到达&amp;&amp;比距离表里更优</span></span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF &amp;&amp; d[u] + G[u][j] &lt; d[j]) &#123;</span><br><span class="line">                d[j] = d[u] + G[u][j];</span><br><span class="line">                pre[j] = u;(新添加。。。。。。。。。。。。就这一行)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

那么想拿到一组路径呢？

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不断向前即可</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == e)&#123;<span class="comment">//到起点，输出并返回，这是因为pre[s]本身是不存在的，所以进行特判</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(pre[e]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>前面是Dijkstra的基本形式，但是考试可能会更难：(第二标尺)</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403211036400.png" alt="image-20200403211036400">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200403211611022.png" alt="image-20200403211611022"></p>
</blockquote>
<ul>
<li>新增边权</li>
</ul>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200405215812768.png" alt="image-20200405215812768"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实际上需要改的只有最后一个for循环处，但是我想把所有的再默写一遍</span></span><br><span class="line"><span class="keyword">int</span> G[MAXV][MAXV]; <span class="comment">//存每条边的距离</span></span><br><span class="line"><span class="keyword">int</span> d[MAXV];  <span class="comment">//存最短距离，核心算法便是在维护这个数组，目前s到u的最短距离为d[u]</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;  <span class="comment">//是否访问过</span></span><br><span class="line"><span class="keyword">int</span> pre[MAXV];  <span class="comment">//前一个</span></span><br><span class="line"><span class="keyword">int</span> cost[MAXV][MAXV];  <span class="comment">//存每条边的花费</span></span><br><span class="line"><span class="keyword">int</span> c[MAXV]; <span class="comment">//s到u的最小花费为c[u]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">    <span class="built_in">fill</span>(c, c + MAXV, INF); <span class="comment">/*注意看区别点！！！！！*/</span></span><br><span class="line">    d[s] = <span class="number">0</span>;	</span><br><span class="line">    c[s] = <span class="number">0</span>;	<span class="comment">/*注意看区别点！！！！！*/</span></span><br><span class="line">    <span class="comment">//核心算法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//先找到未访问过的且最短距离的那个节点</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>; <span class="comment">//没有连接点了</span></span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//再访问该点所连接的点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;   <span class="comment">/*注意看区别点！！！！！*/</span></span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[u][j] + d[u] &lt; d[j]) &#123;</span><br><span class="line">                    d[j] = G[u][j] + d[u];</span><br><span class="line">                    c[j] = cost[u][j] + c[u];</span><br><span class="line">                    pre[j] = u;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(G[u][j] + d[u] == d[j] &amp;&amp; cost[u][j] + c[u] &lt; c[j]) &#123; </span><br><span class="line">                    <span class="comment">//只用更新c[j],因为d[j]同，但是如果要存结点顺序，可以不用这么写，两个if可以放一起！</span></span><br><span class="line">                    c[j] = cost[u][j] + c[u];</span><br><span class="line">                    pre[j] = u;   <span class="comment">//以下两个例子我不会写这部分，这里写了是为了复习一下</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>新增点权</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200405222518924.png" alt="image-20200405222518924"></p>
</blockquote>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下为不完整代码，只写了改动处，对照前面的来理解</span></span><br><span class="line"><span class="keyword">int</span> weight[MAXV];</span><br><span class="line"><span class="keyword">int</span> w[MAXV];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">fill</span>(w, w + MAXV, <span class="number">0</span>);</span><br><span class="line">w[s] = weight[s];</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心--对连接结点进行更新</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][j] + d[u] &lt; d[j]) &#123;</span><br><span class="line">            d[j] = d[u] + G[u][j];</span><br><span class="line">            w[j] = w[u] + weight[j];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(G[u][j] + d[u] == d[j] &amp;&amp; w[u] + weight[j] &gt; w[j])&#123;</span><br><span class="line">            w[j] = w[u] + weight[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>求最短路径条数</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200405223739577.png" alt="image-20200405223739577"></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[MAXV];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">fill</span>(num, num + MAXV, <span class="number">0</span>);</span><br><span class="line">num[s] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心--访问邻接点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][j] + d[u] &lt; d[j]) &#123;</span><br><span class="line">            d[j] = G[u][j] + d[u];</span><br><span class="line">            num[j] = num[u];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(G[u][j] + d[u] == d[j]) &#123;</span><br><span class="line">            num[j] += num[u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//不是简单的ans++，千万别想错了，网状是最复杂的！</span></span><br></pre></td></tr></table></figure>



<p>看一题：</p>
<p>[1003 Emergency (25分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1003 Emergency (25分).md)</p>
<p>再来一道</p>
<p>[1018 Public Bike Management (30分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/A组/1018 Public Bike Management (30分).md)</p>
<p>然而，我发现自己无法用单纯的Dijkstra做出第二道题，解析说Dijkstra不能做出来，要用Dijkstra+DFS来做，我简直想哭，当时想着，哪怕是多一个属性，我也可以想出来，顶多是复杂一点，背下Dijkstra出了负数环怕一点，其他都不怕，而这次不同了，这次Dijkstra无法处理。。。</p>
<p>哎，还是不要偷懒的好，下面恶补一下DFS+Dijkstra的方法：</p>
<blockquote>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200414102153377.png" alt="image-20200414102153377"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200414103009429.png" alt="image-20200414103009429"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200414103213661.png" alt="image-20200414103213661"></p>
</blockquote>
<p>为此，我再默写一遍：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> G[MAXV][MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV];</span><br><span class="line"><span class="comment">//这样Dijkstra的作用也更加纯粹，求最短路径，并记录所有最短路径，其余的附加条件在DFS中解决</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d, d + n, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//核心代码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//查找最小</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//对该节点连接结点的d进行更新</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[u][j] + d[u] &lt; d[j]) &#123;</span><br><span class="line">                    pre[j].<span class="built_in">clear</span>();<span class="comment">//更优则清</span></span><br><span class="line">                    pre[j].push_back(u);</span><br><span class="line">                    d[j] = G[u][j] + d[u];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(G[u][j] + d[u] == d[j]) &#123;</span><br><span class="line">                    pre[j].push_back(u); <span class="comment">//同优添加</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200414104326841.png" alt="image-20200414104326841"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200414105020615.png" alt="image-20200414105020615"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> optValue; <span class="comment">//第二标尺最优值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV]; <span class="comment">//最短路径集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path, temp;  <span class="comment">//一个存第二标尺最优路径，一个存当前路径</span></span><br><span class="line"><span class="keyword">int</span> st;  <span class="comment">//起点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;  <span class="comment">//v为当前访问节点</span></span><br><span class="line">    <span class="keyword">if</span>(v == st) &#123;  <span class="comment">//到达起点，即叶子结点</span></span><br><span class="line">        temp.push_back(v);  <span class="comment">//入数组</span></span><br><span class="line">        <span class="keyword">int</span> value;  <span class="comment">//存放当前路径第二标尺的值</span></span><br><span class="line">        计算temp路径上第二标尺value的值;</span><br><span class="line">        <span class="keyword">if</span>(value优于optValue) &#123;</span><br><span class="line">			optValue = value;</span><br><span class="line">            path = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.pop_back();  <span class="comment">//将刚刚加入的结点删除，相当于撤销操作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.push_back(v); <span class="comment">//将当前访问的结点加入临时路径temp最后面</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123; <span class="comment">//可以进行的选择</span></span><br><span class="line">        DFS(pre[v][i]);  </span><br><span class="line">    &#125;</span><br><span class="line">    temp.pop_back(); <span class="comment">//遍历完所有前驱结点，删除当前节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说实话，这个temp搞得算法好难理解，我可以用加大空间复杂度，来换取脑力复杂度降低</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> optValue; <span class="comment">//第二标尺最优值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV]; <span class="comment">//最短路径集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;  <span class="comment">//存第二标尺最优路径</span></span><br><span class="line"><span class="keyword">int</span> st;  <span class="comment">//起点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp)</span> </span>&#123;  <span class="comment">//v为当前访问节点</span></span><br><span class="line">	<span class="comment">//相当于先序遍历，但是由于存储的方式是用栈，所以每条路径都是自底向上</span></span><br><span class="line">    temp.push_back(v);<span class="comment">//根</span></span><br><span class="line">    <span class="keyword">if</span>(v == st) &#123;  <span class="comment">//到达起点，即叶子结点</span></span><br><span class="line">        <span class="keyword">int</span> value;  <span class="comment">//存放当前路径第二标尺的值</span></span><br><span class="line">        计算temp路径上第二标尺value的值;</span><br><span class="line">        <span class="keyword">if</span>(value优于optValue) &#123;</span><br><span class="line">			optValue = value;</span><br><span class="line">            path = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//孩子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123; <span class="comment">//可以进行的选择        </span></span><br><span class="line">        DFS(pre[v][i], temp);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>之后我又默写了一遍</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须稳固一下一些代码的记忆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Dijkstra + DFS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">G</span><span class="params">(MAXV, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(MAXV, INF))</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">vis</span><span class="params">(MAXV, <span class="literal">false</span>)</span></span>;  <span class="comment">//记录结点是否访问过,访问过的结点就是已经确定了最短距离</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">pre</span><span class="params">(MAXV)</span></span>;  </span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(MAXV)</span></span>;</span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//结点数</span></span><br><span class="line"><span class="keyword">int</span> optValue;  <span class="comment">//第二标尺最优值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path; <span class="comment">//第二标尺的最优路径</span></span><br><span class="line"><span class="keyword">int</span> s; <span class="comment">//起点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra, s为源点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//核心代码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//先找d中最小</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] == <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//对u所有邻近结点更新d数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[u][j] + d[u] &lt; d[j]) &#123;</span><br><span class="line">                    d[j] = G[u][j] + d[u];</span><br><span class="line">                    pre[j].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[j].push_back(u);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(G[u][j] + d[u] == d[j]) &#123;</span><br><span class="line">                    pre[j].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS---个人写法,更加容易理解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp)</span></span>&#123;  <span class="comment">//第一次输入的v是目标结点, 在递归中的含义是当前访问节点,temp是当前路径</span></span><br><span class="line">    <span class="comment">//先序遍历,放入</span></span><br><span class="line">    temp.push_back(v);</span><br><span class="line">    <span class="comment">//判断是否到达叶子结点</span></span><br><span class="line">    <span class="keyword">if</span>(v == s) &#123;</span><br><span class="line">        <span class="keyword">int</span> value; <span class="comment">//存放当前路径第二标尺的值</span></span><br><span class="line">        <span class="comment">//todo </span></span><br><span class="line">        计算value;</span><br><span class="line">        <span class="keyword">if</span>(value 优于 optValue) &#123;</span><br><span class="line">            optValue = value;</span><br><span class="line">            path = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行选择</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        DFS(pre[v][i], temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有默写了一遍！！！！ DFS做出了优化！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先要明白Dijkstra是用来解决什么问题的:</span></span><br><span class="line"><span class="comment"> * Dijkstra用于解决单源最短路径问题, 就是一点出发,到其他各点的最短路径</span></span><br><span class="line"><span class="comment"> * 所以Dijkstra函数的输入一定是出发节点</span></span><br><span class="line"><span class="comment"> * 而DFS作为由回溯路径的函数,传入的是终点</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra+DFS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据的定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>; <span class="comment">//设为距离最大值即不可达</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1000</span>; <span class="comment">//结点最大值,用于初始化</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">G</span><span class="params">(MAXV, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(MAXV, INF))</span></span>; <span class="comment">//邻接矩阵,存距离</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">vis</span><span class="params">(MAXV, <span class="literal">false</span>)</span></span>; <span class="comment">//记录节点是否被访问过,凡是被访问过即确定了最终距离</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(MAXV)</span></span>; <span class="comment">//距离数据,存储s到达每个结点的最短距离</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">pre</span><span class="params">(MAXV)</span></span>; <span class="comment">//用于记录路径,pre[i]代表了最短路径中,结点i的前一个结点的集合</span></span><br><span class="line"><span class="keyword">int</span> n; <span class="comment">//结点数</span></span><br><span class="line"><span class="keyword">int</span> optValue; <span class="comment">//第二标尺最优值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path; <span class="comment">//第二标尺最优路径</span></span><br><span class="line"><span class="keyword">int</span> s; <span class="comment">//起点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//核心算法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//外层循环,每一次确定一个结点的最短距离</span></span><br><span class="line">        <span class="comment">//寻找最短距离</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF, u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>; <span class="comment">//如果都访问过了,则跳出</span></span><br><span class="line">        vis[u] = <span class="literal">true</span>; <span class="comment">//设置该结点访问,即该节点的最短距离已经算出</span></span><br><span class="line">        <span class="comment">//然后以该节点进行更新附近结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; G[u][j] != INF) &#123; <span class="comment">//未访问,且相连</span></span><br><span class="line">                <span class="keyword">if</span>(d[u] + G[u][j] &lt; d[j]) &#123; <span class="comment">//更新</span></span><br><span class="line">                    d[j] = d[u] + G[u][j];</span><br><span class="line">                    pre[j].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[j].push_back(u);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][j] == d[j]) &#123;</span><br><span class="line">                    pre[j].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS,优化版本!</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp)</span></span>&#123;  <span class="comment">//第一次使用时要在temp中放目的结点</span></span><br><span class="line">    <span class="keyword">int</span> v = temp.front();</span><br><span class="line">    <span class="comment">//先序遍历,直接访问,放入   </span></span><br><span class="line">    <span class="keyword">if</span>(v == s) &#123; <span class="comment">//如果到达了终点</span></span><br><span class="line">        <span class="keyword">int</span> value;<span class="comment">//value记录第二标尺值</span></span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">        计算value值;</span><br><span class="line">        <span class="keyword">if</span>(value 优于 optValue) &#123;</span><br><span class="line">            optValue = value;</span><br><span class="line">            path = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行选择</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        temp.push_back(pre[v][i]); <span class="comment">// 选择</span></span><br><span class="line">        DFS(temp);</span><br><span class="line">        temp.pop_back();  <span class="comment">//撤销</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="拓扑排序–判环"><a href="#拓扑排序–判环" class="headerlink" title="拓扑排序–判环"></a>拓扑排序–判环</h2><h3 id="1-有向无环图"><a href="#1-有向无环图" class="headerlink" title="1.有向无环图"></a>1.有向无环图</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200406210445011.png" alt="image-20200406210445011"></p>
</blockquote>
<h3 id="2-拓扑排序"><a href="#2-拓扑排序" class="headerlink" title="2.拓扑排序"></a>2.拓扑排序</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200406211123526.png" alt="image-20200406211123526"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200406211138761.png" alt="image-20200406211138761"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXV];  <span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">int</span> n, m, inDegree[MAXV];  <span class="comment">//顶点数，边数，入度数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拓扑排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;  <span class="comment">//记录加入拓扑排序的顶点数，最后用来验证结果</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;  <span class="comment">//队列为核心，利用队列特性解决</span></span><br><span class="line">    <span class="comment">//先把入度为0的入队</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) <span class="built_in">queue</span>.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//核心算法，不断出队，减入度（去出边），如果减了之后为0就入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); <span class="comment">//得队首</span></span><br><span class="line">        <span class="comment">//此时可以输出队首元素：printf("%d\n", u);</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">//减u对应结点所连接结点的入度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i];<span class="comment">//所连接的结点号，后面重复用到，所以记录一下</span></span><br><span class="line">            inDegree[v]--;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[v] == <span class="number">0</span>) q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        G[u].<span class="built_in">clear</span>(); <span class="comment">//除去u所有出边</span></span><br><span class="line">        num++;  <span class="comment">//每出一个记录一下</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == n) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//拓扑排序成功，无环</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//拓扑排序成功，有环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200406214036081.png" alt="image-20200406214036081"></p>
</blockquote>
<blockquote>
<p>拓扑排序的本质实现应该是贪心算法，当然，如果判断有无环，用DFS和BFS也可以做到</p>
</blockquote>
<p>默写了一遍：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须稳固一下一些代码的记忆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">G</span><span class="params">(MAXV)</span></span>; <span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">int</span> n, inDegree[MAXV]; <span class="comment">//顶点数, 边数, 入度数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拓扑排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span></span>&#123;  <span class="comment">//return的结果是是否为有向无环图</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;  <span class="comment">//记录入队数,用于验证结果</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="comment">//先把入度为0的点入队</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//核心算法, 不断出队, 对其邻接结点的入度--,然后去出边, 如果减了之后入度为0便入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); <span class="comment">// 得队首</span></span><br><span class="line">        <span class="comment">//这里可以print(), 用于得到排序顺序 </span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;  <span class="comment">//遍历所有邻接点,入队减1</span></span><br><span class="line">            <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">            inDegree[v]--;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[v] == <span class="number">0</span>) q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        G[u].<span class="built_in">clear</span>();  <span class="comment">//除去u的出边</span></span><br><span class="line">        num++; <span class="comment">//每一个记录一下</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>又双默写了一遍：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓扑排序的核心思想是用队列存入度为0的结点,每次都将这个结点从整个图中去掉,然后更新结点入度,同时将更新后入度为0的结点入队,最后结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">G</span><span class="params">(MAXV)</span></span>; <span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">int</span> n, inDegree[MAXV]; <span class="comment">// 顶点数, 边数, 入度数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拓扑排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123; <span class="comment">//return结果用于判断是否为有向无环图</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">//记录出队数,用于验证结果</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="comment">//入度为0入队</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//核心算法</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); <span class="comment">//取首</span></span><br><span class="line">        <span class="comment">//to do sth. 这里可以打印队首,用以显示拓扑排序的结果</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123; <span class="comment">//将u以出度连接的结点的入度都减一</span></span><br><span class="line">            inDegree[G[u][i]]--;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[G[u][i]] == <span class="number">0</span>) q.push(G[u][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        G[u].<span class="built_in">clear</span>(); <span class="comment">//去出边</span></span><br><span class="line">        num++; <span class="comment">//每出队一个,记录一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>最短路径&amp;拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>树-2</title>
    <url>/2020/03/13/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%93%E9%A2%98--%E6%A0%91-2/</url>
    <content><![CDATA[<h1 id="树-2"><a href="#树-2" class="headerlink" title="树-2"></a>树-2</h1><h2 id="五、平衡二叉树"><a href="#五、平衡二叉树" class="headerlink" title="五、平衡二叉树"></a>五、平衡二叉树</h2><h3 id="1-平衡二叉树的定义"><a href="#1-平衡二叉树的定义" class="headerlink" title="1. 平衡二叉树的定义"></a>1. 平衡二叉树的定义</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309165559556.png" alt="image-20200309165559556"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309165614378.png" alt="image-20200309165614378"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ndoe</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, <span class="built_in">height</span>; <span class="comment">//v为节点权值，height为当前子树高度</span></span><br><span class="line">    node *lchild, *rchild;  <span class="comment">//左右孩子节点地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种定义下，如果需要新建一个节点，就可以采用如下写法:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成一个新结点，v为结点权值</span></span><br><span class="line"><span class="function">node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    node* Node = <span class="keyword">new</span> node;</span><br><span class="line">    Node-&gt;v = v;</span><br><span class="line">    Node-&gt;<span class="built_in">height</span> = <span class="number">1</span>; <span class="comment">//结点高度初始为1</span></span><br><span class="line">    Node-&gt;lchild = Node-&gt;child = <span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">return</span> Node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然，可以通过下面的函数获取结点root所在子树的当前高度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得以root为根节点的子树当前的height</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//空结点高度为0</span></span><br><span class="line">    <span class="keyword">return</span> root-&gt;<span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是根据定义，可以通过下面的函数计算平衡因子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBalanceFactor</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意记录的是高度，而不是平衡因子，应为没办法直接得到平衡因子，根据高度来求更好</span></span><br><span class="line">    <span class="keyword">return</span> getHeight(root-&gt;lchild) - getHeight(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309170441624.png" alt="image-20200309170441624"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新结点root的height</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//max(左孩子的height，右孩子的height) + 1</span></span><br><span class="line">    root-&gt;<span class="built_in">height</span> = <span class="built_in">max</span>(getHeight(root-&gt;lchild), getHeight(root-&gt;rchild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意高度是从下往上数</strong></p>
<h3 id="2-平衡二叉树的基本操作"><a href="#2-平衡二叉树的基本操作" class="headerlink" title="2. 平衡二叉树的基本操作"></a>2. 平衡二叉树的基本操作</h3><p><strong>这里主要看查找、插入和建立（删除操作比较复杂）</strong></p>
<ol>
<li><p>查找操作</p>
 <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309171200163.png" alt="image-20200309171200163" style="zoom:50%;" />

 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//search函数查找二叉查找树中数据域的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node* root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;  <span class="comment">//空树，查找失败</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seatch failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == root-&gt;data) &#123;  <span class="comment">//查找成功，访问之,当然，不一定是打印</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, root-&gt;data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; root-&gt;data) &#123;  <span class="comment">//如果x比根节点的数据域小，说明x在左子树</span></span><br><span class="line">        search(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        search(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>插入操作</p>
<p> <strong>这里我是学过几遍的，自然知道如何操作，但是代码实现却不会。。</strong></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309172049207.png" alt="image-20200309172049207"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309172129790.png" alt="image-20200309172129790"></p>
<p> 对应代码：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L</span><span class="params">(node* &amp;root)</span> </span>&#123;</span><br><span class="line">    node* temp = root-&gt;rchild;  <span class="comment">//root指向结点A，temp指向结点B</span></span><br><span class="line">    root-&gt;rchild = temp-&gt;lchild;  <span class="comment">//步骤1</span></span><br><span class="line">    temp-&gt;lchild = root;  <span class="comment">//步骤2</span></span><br><span class="line">    updateHeight(root);<span class="comment">//更新结点A的高度（一定是先更新A的高度，因为它左右子树根节点高度未变）</span></span><br><span class="line">    updateHeight(temp);<span class="comment">//更新结点B的高度</span></span><br><span class="line">    root = temp;  <span class="comment">//步骤3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309173225180.png" alt="image-20200309173225180"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309173239694.png" alt="image-20200309173239694"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">(Node* &amp;root)</span> </span>&#123;</span><br><span class="line">    temp = root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild = root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309173705676.png" alt="image-20200309173705676"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309173812740.png" alt="image-20200309173812740"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309174014220.png" alt="image-20200309174014220"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309174043287.png" alt="image-20200309174043287"></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309174316231.png" alt="image-20200309174316231"></p>
<p> 现在考虑代码，如果不考虑平衡操作，是这样的：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入权值为v的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123; <span class="comment">//空树，说明查找失败，也即插入位置</span></span><br><span class="line">        root = newNode(v);  <span class="comment">//新建节点权值为x</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == root-&gt;data) &#123; <span class="comment">//查找成功，说明结点已存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309175916668.png" alt="image-20200309175916668"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入权值为v的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;  <span class="comment">//到达空结点</span></span><br><span class="line">        root = newNode(v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v &lt; root-&gt;v) &#123; <span class="comment">//v比根节点的权值小,只能往左走，所以只会有LL型和LR型</span></span><br><span class="line">        insert(root-&gt;lchild, v);<span class="comment">//往左子树插入</span></span><br><span class="line">        updateHeight(root); <span class="comment">//更新树高</span></span><br><span class="line">       <span class="comment">//判断树型 </span></span><br><span class="line">        <span class="keyword">if</span>(getBalanceFactor(root) == <span class="number">2</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(getBalanceFactor(root-&gt;lchild) == <span class="number">1</span>) &#123;  <span class="comment">//LL型</span></span><br><span class="line">                R(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(getBalanceFactor(root-&gt;lchild) == <span class="number">-1</span>) &#123; <span class="comment">//LR型</span></span><br><span class="line">                L(root-&gt;lchild);</span><br><span class="line">                R(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;   <span class="comment">//v比根节点的权值大,只能往右走，所以只会有RR型和RL型</span></span><br><span class="line">        insert(root-&gt;rchild, v);  <span class="comment">//往右子树插入</span></span><br><span class="line">        updateHeight(root);  <span class="comment">//更新树高</span></span><br><span class="line">        <span class="keyword">if</span>(getBalanceFactor(root) == <span class="number">-2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(getBalanceFactor(root-&gt;rchild) == <span class="number">-1</span>) &#123;  <span class="comment">//RR型</span></span><br><span class="line">                L(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(getBalanceFactor(root-&gt;rchild) == <span class="number">1</span>) &#123; <span class="comment">//RL型</span></span><br><span class="line">                R(root-&gt;rchild);</span><br><span class="line">                L(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>AVL树的建立</p>
<p> 有了上面插入操作的基础，AVL树的简历就非常简单了，因为只需依次插入n各节点即可。</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AVL树的建立</span></span><br><span class="line"><span class="function">node* <span class="title">Create</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    node* root = <span class="literal">NULL</span>;  <span class="comment">//新建空根节点root</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        insert(root, data[i]);  <span class="comment">//插入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="六、并查集"><a href="#六、并查集" class="headerlink" title="六、并查集"></a>六、并查集</h2><h3 id="1-并查集的定义"><a href="#1-并查集的定义" class="headerlink" title="1.并查集的定义"></a>1.并查集的定义</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200309203518399.png" alt="image-20200309203518399"></p>
<h3 id="2-并查集的基本操作"><a href="#2-并查集的基本操作" class="headerlink" title="2. 并查集的基本操作"></a>2. 并查集的基本操作</h3><p>总体来说，并查集的使用需要先初始化father数组，然后在根据需要进行查找或合并的操作。</p>
<ol>
<li><p>初始化</p>
<p> 一开始，每个元素都是独立的一个集合，因此需要令所有<code>father[i]</code>等于i</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    father[i] = i;  <span class="comment">//令father[i]为-1也可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310084102813.png" alt="image-20200310084102813"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//findFather函数返回元素x所在集合的根节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != father[x]) &#123;  <span class="comment">//如果不是根节点，继续循环</span></span><br><span class="line">        x = father[x];  <span class="comment">//获得自己的父亲节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310084306432.png" alt="image-20200310084306432"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == father[x]) <span class="keyword">return</span> x;  <span class="comment">//如果找到根节点，则返回根节点编号</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findFather(father[x]);  <span class="comment">//否则，递归判断x的父亲节点是否是根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>合并</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310084717237.png" alt="image-20200310084717237">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310084732116.png" alt="image-20200310084732116"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">    <span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">    <span class="keyword">if</span>(faA != faB) &#123;  <span class="comment">//不是同一集合</span></span><br><span class="line">        father[faA] = faB;  <span class="comment">//合并</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310085259839.png" alt="image-20200310085259839"></p>
<h3 id="3-路径压缩"><a href="#3-路径压缩" class="headerlink" title="3.路径压缩"></a>3.路径压缩</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310085437625.png" alt="image-20200310085437625"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310085543917.png" alt="image-20200310085543917"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//由于x在下面的while中会变成根节点，因此先把原先的x保存一下</span></span><br><span class="line">    <span class="keyword">int</span> a = x;</span><br><span class="line">    <span class="keyword">while</span>(x != father[x]) &#123;<span class="comment">//寻找根节点</span></span><br><span class="line">        x = father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//到这里，x存放的是根节点。下面吧路径上的所有结点的father都改成根节点</span></span><br><span class="line">    <span class="keyword">while</span>(a != father[a]) &#123;</span><br><span class="line">        <span class="keyword">int</span> z = a;</span><br><span class="line">        a = father[a];</span><br><span class="line">        father[z] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;  <span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310090016446.png" alt="image-20200310090016446"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v == father[v]) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> F = findFather(father[v]);</span><br><span class="line">        father[v] = F;</span><br><span class="line">        <span class="keyword">return</span> F;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来一个例子：</p>
</li>
</ol>
</li>
</ol>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310090202856.png" alt="image-20200310090202856">        <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310090217039.png" alt="image-20200310090217039"></p>
<h2 id="七、堆"><a href="#七、堆" class="headerlink" title="七、堆"></a>七、堆</h2><h3 id="1-堆的定义与基本操作"><a href="#1-堆的定义与基本操作" class="headerlink" title="1. 堆的定义与基本操作"></a>1. 堆的定义与基本操作</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310095853126.png" alt="image-20200310095853126"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310100043588.png" alt="image-20200310100043588"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310100106973.png" alt="image-20200310100106973"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//heap为堆，n为元素个数</span></span><br><span class="line"><span class="keyword">int</span> heap[maxn], n = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310100235166.png" alt="image-20200310100235166"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对heap数组在[low，high]范围进行向下调整</span></span><br><span class="line"><span class="comment">//其中low为欲调整节点的数组下标，high一般为对的最后一个元素的数组下标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = i * <span class="number">2</span>;  <span class="comment">//i为欲调整结点，j为其左孩子</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= high) &#123;  <span class="comment">//存在孩子结点</span></span><br><span class="line">        <span class="comment">//如果右孩子存在，且右孩子的值大于左孩子----即从右往左过程</span></span><br><span class="line">        <span class="keyword">if</span>(j + <span class="number">1</span> &lt;= high &amp;&amp; heap[j + <span class="number">1</span>] &gt; heap[j]) &#123;</span><br><span class="line">            j = j + <span class="number">1</span>;  <span class="comment">//让j存储右孩子下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果孩子中最大的权值比欲调节结点i大</span></span><br><span class="line">        <span class="keyword">if</span>(heap[j] &gt; heap[i]) &#123;</span><br><span class="line">            swap(heap[j], heap[i]);</span><br><span class="line">            i = j;  <span class="comment">//保持i为欲调节结点，j为i的左孩子  --- 从上往下</span></span><br><span class="line">            j = i * <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//对于这里的代码我有一个相当大的疑惑，如果孩子结点都小于父节点</span></span><br><span class="line">            <span class="comment">//但是孙子结点有更大的，在这里岂不是直接结束了？</span></span><br><span class="line">            <span class="comment">//看了建堆算法后理解了！这个方法就是我前面说的作用：</span></span><br><span class="line">            <span class="comment">//即只对一个父节点和子节点的孩子进行调节</span></span><br><span class="line">            <span class="comment">//之后的建堆算法，会遍历所有的父节点来做到‘全面覆盖’</span></span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//孩子的权值均比欲调整结点i小，调整结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310105710248.png" alt="image-20200310105710248"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n/<span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        downAdjust(i, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310110133450.png" alt="image-20200310110133450"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除堆顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    heap[<span class="number">1</span>] = heap[n--];</span><br><span class="line">    downAdjust(<span class="number">1</span>, n);  <span class="comment">//向下调整堆顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310111229881.png" alt="image-20200310111229881"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对heap数组在[low,high]范围进行向上调整</span></span><br><span class="line"><span class="comment">//建堆和删除都是向下调整，而插入是向上调整</span></span><br><span class="line"><span class="comment">//其中low一般设置为1， high表示欲调节节点的数组下标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upAdjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = high, j = i / <span class="number">2</span>;  <span class="comment">//i为欲调节结点，j为其父亲</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt;= low) &#123; <span class="comment">//父亲在[low, high]范围内</span></span><br><span class="line">        <span class="comment">//父亲权值小于欲调节结点i的权值</span></span><br><span class="line">        <span class="keyword">if</span>(heap[j] &lt; heap[i]) &#123;</span><br><span class="line">            swap(heap[j], heap[i]);</span><br><span class="line">            i = j;</span><br><span class="line">            j = i / <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此基础上就很容易实现添加元素的代码了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加元素x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    heap[++n] = x;   <span class="comment">//让元素个数加一，然后将数组末位赋值为x</span></span><br><span class="line">    upAdjust(<span class="number">1</span>, n);	 <span class="comment">//向上调整新加入的结点n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-堆排序"><a href="#2-堆排序" class="headerlink" title="2. 堆排序"></a>2. 堆排序</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310112225047.png" alt="image-20200310112225047">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310112337928.png" alt=""></p>
<p>堆排序代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    createHeap();  <span class="comment">//建堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;  <span class="comment">//倒着枚举，直到堆中只有一个元素</span></span><br><span class="line">        swap(heap[i], heap[<span class="number">1</span>]);</span><br><span class="line">        downAdjust(<span class="number">1</span>, i - <span class="number">1</span>);  <span class="comment">//调整堆顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、哈弗曼树"><a href="#八、哈弗曼树" class="headerlink" title="八、哈弗曼树"></a>八、哈弗曼树</h2><h3 id="1-哈夫曼树"><a href="#1-哈夫曼树" class="headerlink" title="1. 哈夫曼树"></a>1. 哈夫曼树</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310114347048.png" alt="image-20200310114347048">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310160809050.png" alt="image-20200310160809050">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310160842179.png" alt="image-20200310160842179"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代表小顶堆的优先队列---数字小的优先级大</span></span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;, greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp, x, y ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, temp);</span><br><span class="line">        q.push(temp);  <span class="comment">//将初始重量压入优先队列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123; <span class="comment">//只要优先队列中至少有两个元素</span></span><br><span class="line">        x = q.top;</span><br><span class="line">        q.pop();</span><br><span class="line">        y = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        q.push(x + y);  <span class="comment">//取出堆顶的两个元素，求和后压入优先队列</span></span><br><span class="line">        ans += x + y;  <span class="comment">//累计求和的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans); <span class="comment">//ans即为消耗的最小体力</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-哈夫曼编码"><a href="#2-哈夫曼编码" class="headerlink" title="2. 哈夫曼编码"></a>2. 哈夫曼编码</h3><p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310163231696.png" alt="image-20200310163231696"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200310163256890.png" alt="image-20200310163256890"></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基本思想</title>
    <url>/2020/01/19/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B%E9%A2%98/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="算法基本思想"><a href="#算法基本思想" class="headerlink" title="算法基本思想"></a>算法基本思想</h1><h2 id="零-杂"><a href="#零-杂" class="headerlink" title="零. 杂"></a>零. 杂</h2><ul>
<li><p>查找类题型,如果数据集不算大,可以直接遍历一遍来找,如果数据集比较大,可以采取先使其有序,然后再二分查找,所以一下知识必须掌握:</p>
<ul>
<li>二分查找</li>
<li>快速排序</li>
<li>归并排序</li>
</ul>
</li>
<li><p>EOF题本地调试的办法:</p>
<ul>
<li>mac的clion: 用debug模式,然后输入后cmd+D</li>
<li>win下: 输入后,直接ctrl+Z然后enter</li>
<li>win下vs: 要最后加个getchar()</li>
</ul>
</li>
<li><p>如果想要把字符串赋值给另一个字符串的话,只能用copy的方式,或者初始化定义,这一点可以说是相当不好了..<br><code>strcpy(DD,week[strs[0][i]-&#39;A&#39;]);</code></p>
</li>
<li><p>以后题目做不出来时,看看解题思路,按照解题思路写分步注释,然后自己根据注释尝试去写,还是写不出来就看看题解,同理,自己做题时也可以先把解题思路的注释分步写好,然后一步一步去实现</p>
</li>
<li><p>PAT不支持<code>gets();</code></p>
</li>
<li><p><code>sprintf</code>可以用来<code>int</code>转<code>string</code></p>
</li>
<li><p><code>std::reverse</code>的用法要记牢,对于字符串处理,有时候取逆是一个很好的做法</p>
</li>
</ul>
<h2 id="一-排序"><a href="#一-排序" class="headerlink" title="一. 排序"></a>一. 排序</h2><ul>
<li><code>stl</code>的<code>sort()</code>算法非常好用,几乎不用去记忆那些算法,方便省事!</li>
<li>但需要注意的是,<code>cmp</code>的写法一定要掌握好</li>
</ul>
<h2 id="二-散列"><a href="#二-散列" class="headerlink" title="二. 散列"></a>二. 散列</h2><h3 id="0-概述"><a href="#0-概述" class="headerlink" title="0. 概述"></a>0. 概述</h3><p><strong>其实就是空间换时间</strong></p>
<ul>
<li>平时的简单用法就是取一个非常大的数组,以数组下标来对应某个元素,数组内容用来记录,极大降低了时间复杂度,对于oj题(空间一般都很大),完全是可以考虑这种做法!</li>
<li>不过上一种做法只适用于那种数值不大,且是数字标识的元素,一旦元素过多,或者是内容是字符串一类的情况,上一种方法就不再适用.</li>
<li>其实第一种方法便是散列只不过–$H(key) = key$</li>
<li>散列的真正精髓是<code>将元素通过一个函数转换为整数,使得该整数可以尽量唯一地代表这个元素</code></li>
</ul>
<h3 id="1-常用的散列函数"><a href="#1-常用的散列函数" class="headerlink" title="1. 常用的散列函数"></a>1. 常用的散列函数</h3><ul>
<li>$H(key) = key$—即第一种方法,最常见最实用</li>
<li>$H(key) = a*key+b$—线性变化</li>
<li>$H(key) = key% mod$—除留余数法</li>
</ul>
<h3 id="2-冲突避免的方法"><a href="#2-冲突避免的方法" class="headerlink" title="2. 冲突避免的方法"></a>2. 冲突避免的方法</h3><ul>
<li>线性探查法</li>
<li>平方探查法</li>
<li>链地址法</li>
</ul>
<h3 id="3-字符串hash初步—key不为整数情况"><a href="#3-字符串hash初步—key不为整数情况" class="headerlink" title="3. 字符串hash初步—key不为整数情况"></a>3. 字符串hash初步—key不为整数情况</h3><ul>
<li><p><strong>例1: 将一个二维整点P的坐标映射为一个整数,使得整点P可以由该整数唯一地代表.</strong><br>  假设一个整点坐标是$(x,y)$,其中$0 \leq x,y \leq Range$,那么可以令hash函数为$H(P) = x \times Range +y$,这样任意两点的hash值都<code>不会相等</code>,可以用$H(P)$来唯一地代表该整点P,接着可以通过hash的方法<code>进一步映射到较小的范围</code><br>  <em>(相当于二级hash,第一级把它转换为整数(唯一表示),第二步通过对应的整数来用hash对应)</em></p>
</li>
<li><p>至于<strong>字符串hash</strong>,就是将<code>一个字符串S映射为一个整数</code>,使得该整数可以尽可能唯一地表示字符串S,该做法的核心是:<strong>进制转换</strong></p>
<ul>
<li><p>如果只有字母<code>A-Z</code>,没有小写,那么<code>A-Z</code>可以对应<code>0-25</code>,相当于<code>26进制</code>数,然后对应的<code>十进制</code>数定是唯一的,只需要将其转换为<code>十进制</code>数即可</p>
</li>
<li><p>如果大写小写都有,那么<code>A-Z</code>对应<code>0-25</code>,<code>a-z</code>对应<code>26-51</code>,相当于<code>52进制</code>数转换为<code>十进制</code>数.</p>
</li>
<li><p>最后一种情况,含有大小写字母和数字:</p>
<ul>
<li>增大进制到62位</li>
<li>如果数字位置确定,可以在字母部分转换为十进制后,将数字部分拼接到后面</li>
</ul>
</li>
<li><p>代码举例:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//52进制转换为10进制</span></span><br><span class="line"><span class="comment">//字符串左位为最高位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashFunc</span><span class="params">(<span class="keyword">char</span> S[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">  			<span class="keyword">if</span>(S[i]&gt;=<span class="string">'A'</span>&amp;&amp;S[i]&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">      	    id = id * <span class="number">52</span> + (S[i] - <span class="string">'A'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(S[i]&lt;=<span class="string">'z'</span>&amp;&amp;S[i]&gt;=<span class="string">'a'</span>)&#123;</span><br><span class="line">        	  id = id * <span class="number">52</span> + (S[i] - <span class="string">'a'</span>)+<span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我必须解释上面那段代码:</p>
<p>它用了另一种我没有用过的转换十进制的方法;</p>
<p>举个简单例子:</p>
<p><code>10进制</code>下:</p>
<p>​         $4321 = 1\times 10^0+2\times 10^1+3 \times 10^2+4\times 10^3$ </p>
<p>同理可以得到:</p>
<p><code>52进制</code>下:</p>
<p>​        $4321 = 1\times 52^0+2\times 52^1+3 \times 52^2+4\times 52^3$</p>
</blockquote>
</li>
<li><p>一个问题:</p>
<p>  <strong>给出N个字符串(由恰好三位大写字母组成),再给出M个查询字符串,问每个查询字符串在N个字符串中出现的次数</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//个人代码:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashFunc</span><span class="params">(<span class="keyword">char</span> S[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        id = id * <span class="number">26</span> + (S[i] - <span class="string">'A'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    <span class="comment">//由于字符串为三个大写字母,所以按26进制算,其十进制最大不超过20000,直接一一对应hash</span></span><br><span class="line">    <span class="keyword">int</span> times[<span class="number">20000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        times[hashFunc(str)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, times[hashFunc(str)]);</span><br><span class="line">        <span class="keyword">if</span> (i != M - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试数据</span></span><br><span class="line"><span class="comment">10 2</span></span><br><span class="line"><span class="comment">ABC ACB DHF VHI DHF CHV FHD ABC ABC ACB</span></span><br><span class="line"><span class="comment">ABC ACB</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="三、递归"><a href="#三、递归" class="headerlink" title="三、递归"></a>三、递归</h2><h3 id="1-分治"><a href="#1-分治" class="headerlink" title="1. 分治"></a>1. 分治</h3><blockquote>
<p>分治法将原问题划分成若干个规模较小而结构与原问题相同或相似的子问题，然后分别解决这些子问题，最后合并子问题的解，即可得到原问题的解。</p>
</blockquote>
<p><code>三个步骤：</code></p>
<ol>
<li>分解：<strong>将原问题划分成若干个规模较小而结构与原问题相同或相似的子问题</strong></li>
<li>解决：<strong>递归求解所有子问题。如果存在子问题的规模小到可以直接解决，就直接解决它。</strong></li>
<li>合并：<strong>将子问题的解合并为原问题的解。</strong></li>
</ol>
<blockquote>
<p>需要指出的是，分治法分解出的子问题应当是相互独立、没有交叉的。如果存在两个子问题有相交部分，那么不应当使用分治法解决。</p>
</blockquote>
<p>最后：</p>
<p><strong>分治法是一种算法思想，既可以使用递归的手段去实现，也可以通过非递归的手段去实现</strong></p>
<h3 id="2-递归"><a href="#2-递归" class="headerlink" title="2. 递归"></a>2. 递归</h3><ol>
<li>定义</li>
</ol>
<p>玩笑定义：</p>
<blockquote>
<p>要理解递归，你要先理解递归，直到你能理解递归</p>
</blockquote>
<p>真实定义：</p>
<blockquote>
<p>递归就在于反复调用自身函数，但是每次把问题范围缩小，直到范围小到可以直接得到边界数据的结果，然后再在返回的路上求出对应的解。</p>
<p>由此：<strong>递归很适合用来实现分治思想</strong></p>
</blockquote>
<ol start="2">
<li><p>两个重要概念</p>
<ol>
<li><p><code>递归边界</code></p>
<p> 即分解的尽头</p>
</li>
<li><p><code>递归式(或称递归调用)</code></p>
<p> 将原问题分解为若干个子问题的手段</p>
</li>
</ol>
</li>
<li><p>重要例子：</p>
<ol>
<li><p>使用递归求解n的阶乘</p>
<ul>
<li><p>递归式：$F(n) = F(n-1)\times n$</p>
</li>
<li><p>递归边界：$F(0) = 1$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//边界</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n*F(n<span class="number">-1</span>);<span class="comment">//递归式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,F(n));<span class="comment">//入口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>递归图</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200218183903222.png" alt="image-20200218183903222"></p>
</li>
</ul>
</li>
<li><p>求斐波那契数列（Fibonacci）数列的第n项：</p>
<blockquote>
<p>斐波那契数列是满足：</p>
<p>$F(0) = 1,F(1) = 1,F(n) = F(n-1)+F(n-2)(n\geq 2)$</p>
<p>的数列，数列前几项为$1,1,2,3,5,8,13,21,…$。</p>
</blockquote>
<ul>
<li>递归式：$F(n) = F(n-1)+F(n-2)(n\geq 2)$</li>
<li>递归边界：$F(0) = 1,F(1) = 1$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>||n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//边界</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F(n<span class="number">-1</span>) + F(n<span class="number">-2</span>);<span class="comment">//递归式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,F(n));<span class="comment">//入口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>递归图：</p>
<p>  <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200218183828757.png" alt="image-20200218183828757"></p>
</li>
</ul>
<blockquote>
<p>处理递归问题时可以画递归图来理清思路</p>
</blockquote>
</li>
<li><p>全排列</p>
<blockquote>
<p>一般吧1~n这n个整数按<code>某个顺序</code>摆放的结果称为这n个整数的一个排列，而全排列指着n个整数能形成的所有排列。</p>
</blockquote>
<p> 现在需要实现按字典序从小到大的顺序输出1~n的全排列，其中<strong>$(a_1,a_2,…,a_n)$的字典序小于$（b_1,b_2,…,b_n）$是指存在一个i，使得$a_1 = b_1, a_2 = b_2, …,a_{i-1} = b_{i-1},a_i&lt;b_i$成立</strong></p>
</li>
</ol>
</li>
</ol>
<pre><code>说实话它的实现对我来说很难，这里我把代码照书敲了一遍，用debug运行了几遍，大致理解思路了，但是要自己做出来，还是有点困难

网上搜的一些解法详解：

&gt;写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。

&gt; 编写递归代码的关键是，只要遇到递归，我们就把它抽象成一个递推公式，**不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。**

* 递归式：$f(1, 2, ... n) = \{ 第一位是 1, f(n-1)\} + \{第一位是 2, f(n-1)\} +...+\{第一位是 n, f(n-1)\}$
*  递归边界：`index == n + 1`

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//困得不行,不明所以,我决定手动敲一下代码来验证</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//P为当前排列, hashTable记录整数x是否已经在P中</span></span><br><span class="line"><span class="keyword">int</span> n, P[maxn], hashTable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">//当前处理排列的第index号位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归边界,已经处理完排列的1~n位</span></span><br><span class="line">    <span class="keyword">if</span>(index == n + <span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, P[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//枚举1~n,试图将x填入P[index]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)&#123;  </span><br><span class="line">        <span class="comment">//如果x不在P[0]~P[index-1]中</span></span><br><span class="line">        <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>) &#123; </span><br><span class="line">            <span class="comment">//令P的第index位为x,即把x加入当前排列</span></span><br><span class="line">            P[index] = x; </span><br><span class="line">            <span class="comment">//记x已在P中</span></span><br><span class="line">            hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//处理排列的第index+1号位</span></span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//已处理完P[index]位x的子问题,状态还原</span></span><br><span class="line">            hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="number">3</span>;</span><br><span class="line">    generateP(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="4">
<li><p>n皇后问题</p>
<blockquote>
<p>n皇后是指在一个$n\times n$的国际象棋棋盘上放置n个皇后，使得这n个皇后两两均不在同一行、同一列、同意对角线上，求合法的方案数。</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200219104254630.png" alt="image-20200219104254630"></p>
</blockquote>
<p> 如果采取组合数来遍历每一种情况，则需要$C_{n\times n}^n$的枚举量，而考虑到每行每列只能有一个，所以每放一个时考虑行号，就只需要$n!$个排列</p>
<p> 于是可以在全排列代码的基础上求解。由于当达到递归边界是生成了一个排列，所以需要在其内部判断是否为合法方案，即遍历每两个皇后，判断他们是否在同一对角线上（不在同一行同一列是显然的），若不是，则累计计数变量count即可。</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//搞了好久才理解，要注意看注释！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//P为当前排列, hashTable记录整数x是否已经在P中</span></span><br><span class="line"><span class="comment">//n为元素数量,即皇后数量</span></span><br><span class="line"><span class="keyword">int</span> n, P[maxn], hashTable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count_h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 即利用上次写的全排列代码来生成一个排列(毕竟所有皇后都要不同行)</span></span><br><span class="line"><span class="comment"> * 然后在边界时(也即得到一个排列时),对里面的元素进行两两逐个判断,看看是否符合不在对角线原则</span></span><br><span class="line"><span class="comment"> * 而我所以困惑的,为何不是二维坐标,实际上就是二维坐标,形式为:(下标,下标所对应的值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; <span class="comment">//index表示从哪个开始,用1即可</span></span><br><span class="line">    <span class="comment">//递归边界,生成一个排列</span></span><br><span class="line">    <span class="keyword">if</span>(index == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//flag为true表示当前排列为一个合法方案</span></span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="comment">//遍历任意两个皇后</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="comment">//如果在同一条对角线上</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 何时为同一对角线上呢?</span></span><br><span class="line"><span class="comment">                 * 由于棋盘对角线为45度,所以定有两子的行之差和列之差相等(等腰直角三角形!)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(i - j) == <span class="built_in">abs</span>(P[i] - P[j]))&#123;</span><br><span class="line">                    <span class="comment">//不合法</span></span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若当前方案合法,令count加一</span></span><br><span class="line">        <span class="keyword">if</span>(flag) count_h++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashTable[x] == <span class="literal">false</span>)&#123;</span><br><span class="line">            P[index] = x;</span><br><span class="line">            hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="number">8</span>;</span><br><span class="line">    generateP(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, count_h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>不过这种枚举所有情况，然后判断每一种情况是否合法的做法是非常朴素的</strong></p>
<blockquote>
<p>因此一般吧不使用优化算法、直接用朴素算法来解决问题的做法称为<code>暴力法</code></p>
</blockquote>
<p> 事实上，当已经放置一部分的皇后是，可能剩余的皇后无论怎样放置都不可能合法，此时就没有必要继续往下递归了，直接返回上层即可，这样可以减少很多计算量。</p>
<p> 一般来说，如果在到达递归边界前的某层，由于一些事实导致不需要往任何一个子问题递归，就可以直接返回上一层。一般把这种做法成为<code>回溯法</code>。</p>
<p> 以下代码采用了回溯的写法：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//P为当前排列, hashTable记录整数x是否已经在P中</span></span><br><span class="line"><span class="comment">//n为元素数量,即皇后数量</span></span><br><span class="line"><span class="keyword">int</span> n, P[maxn], hashTable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count_h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; <span class="comment">//index表示从哪个开始,用1即可</span></span><br><span class="line">    <span class="comment">//递归边界,生成一个合法方案(而不是一个单纯的排列)</span></span><br><span class="line">    <span class="keyword">if</span>(index == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//能到这里一定合法</span></span><br><span class="line">        count_h++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第x行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)&#123;</span><br><span class="line">        <span class="comment">//第x行还没有皇后</span></span><br><span class="line">        <span class="keyword">if</span> (hashTable[x] == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="comment">//flag为true表示当前皇后不会和之前的皇后冲突</span></span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//遍历之前的皇后</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 由于每一个皇后都要与之前的皇后遍历,所以前面的皇后两两之间都合法,所以只需要</span></span><br><span class="line"><span class="comment">             * 将当前皇后与之前所有皇后两两之间判断一次即可,而不需要像上个做法一样,要两个for嵌套</span></span><br><span class="line"><span class="comment">             * 这里就只用到了一个for</span></span><br><span class="line"><span class="comment">             */</span> </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> pre = <span class="number">1</span>; pre &lt; index; pre++)&#123;</span><br><span class="line">                <span class="comment">//第index列皇后的行号为x,第pre列皇后的行号为P[pre]</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(index - pre) == <span class="built_in">abs</span>(x - P[pre]))&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果可以吧皇后放到第x行</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="comment">//令第index列皇后的行号为x</span></span><br><span class="line">                P[index] = x;</span><br><span class="line">                hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">                generateP(index + <span class="number">1</span>);</span><br><span class="line">                hashTable[x] = <span class="literal">false</span>; <span class="comment">//撤销</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="number">8</span>;</span><br><span class="line">    generateP(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, count_h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h2 id="四、贪心"><a href="#四、贪心" class="headerlink" title="四、贪心"></a>四、贪心</h2><h3 id="1-简单贪心"><a href="#1-简单贪心" class="headerlink" title="1.简单贪心"></a>1.简单贪心</h3><p>概述：</p>
<blockquote>
<p>贪心法是求解一类最优化问题的方法，它总是考虑当前状态下<strong>局部最优（或较优）</strong>的策略，来是全局达到最优（或较优）。</p>
</blockquote>
<p>显然，如果采取较优而非最优的策略，得到的全局结果也无法是最优的。而要获得最优结果，则要求中间的每步策略都是最优的，因此严谨使用贪心来求解最优化问题需要对采取策略进行证明。</p>
<p><strong>证明的一般思路是使用反证法及数学归纳法：</strong></p>
<blockquote>
<p>即假设策略不能导致最优解，然后通过一系列推导来得到矛盾，以此证明策略是最优的，最后使用数学归纳法保证全局最优。</p>
</blockquote>
<p>不过对于平常使用来说，也许没有时间或不太容易对想到的策略进行严谨的证明（贪心的证明比贪心本身更难），<strong>因此一般来说，如果在想到某个似乎可行的策略，并且自己无法举出反例，那么久勇敢地实现它</strong></p>
<ul>
<li>例1： [1020 月饼 (25分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/B组/1020 月饼 (25分).md)</li>
<li>例2： [1023 组个最小数 (20分)](/Users/kirito/Documents/Typora–markdown笔记/笔记/复试/机试/PAT刷题/B组/1023 组个最小数 (20分).md)</li>
</ul>
<blockquote>
<p>以上两例均为简单题。。</p>
</blockquote>
<h3 id="2-区间贪心"><a href="#2-区间贪心" class="headerlink" title="2. 区间贪心"></a>2. 区间贪心</h3><p>概述：</p>
<blockquote>
<p>通过上面两个例子，对贪心可以有一个大致的了解。</p>
<p>下面来看一个稍微复杂一点的问题，即<strong>区间不相交问题：</strong></p>
<p><strong>给出$N$个开区间$(x,y)$，从中选择尽可能多的开区间，使得这些开区间两两没有交集。</strong></p>
<p>例如对开区间$(1,3),(2,4),(3,5),(6,7)$来说，可以选择最多三个区间$(1,3),(3,5),(6,7)$，它们互相没有交集</p>
</blockquote>
<p>思路：</p>
<blockquote>
<p>首先考虑最简单的情况，如果开区间$I_1$被开区间$I_2$包含，如图示，那么显然选择$I_1$是最好的选择，因为如果选择$I_1$,那么就有更大的空间去容纳其他开区间。</p>
<p>接下来把所有开区间按左端点x从大到小排序，如果去除掉区间包含的情况，那么一定有$y_1&gt;y_2&gt;…&gt;y_n$成立，如图示。</p>
<p>现在考虑应当如何选取区间。通过观察会发现，$I_1$的右边有一段是一定不会和其他区间重叠的，如果把它去掉，那么$I_1$的左边剩余部分就会被$I_2$包含，由图$a)$的情况可知，应当向选择$I_1$.</p>
<p><strong>因此对这种情况，总是先选择左端点最大的区间。（这是一个相对概念！）</strong></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200220083132445.png" alt="image-20200220083132445"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inteval</span>&#123;</span></span><br><span class="line">    <span class="comment">//开区间左右端点</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;I[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Inteval a, Inteval b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先按左端点从大到小排序</span></span><br><span class="line">    <span class="keyword">if</span> (a.x != b.x) <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.y &lt; b.y; <span class="comment">//左端点相同的按右端点从小到大排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//读数据</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;I[i],x, &amp;I[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(I, I+n, cmp);</span><br><span class="line">        <span class="comment">//ans记录不相交区间个数,lastX记录上一个被选中区间的左端点</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>, lastX = I[<span class="number">0</span>].x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(I[i].y &lt;= lastX)&#123;</span><br><span class="line">                lastX = I[i].x;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n, ans"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值得注意的是，<strong>总是先选择右端点最小的区间</strong>的策略也是可行的。</p>
<blockquote>
<p>与这个问题类似的区间选点问题：<strong>给出N个闭区间$[x,y]$,求最少要确定多少个点，才能使每个闭区间都至少存在一个点</strong>。例如对于闭区间$[1,4],[2,6],[5,7]$来说，需要两个点（如3、5）才能保证每个闭区间内都有至少一个点</p>
<p>事实上，这个问题与区间不相交问题的策略是一致的。首先，对于图$a)$，如果闭区间$I_1$被闭区间$I_2$包含，那么在$I_1$中取点可以保证这个点一定是在$I_2$内。接着把所有左端点按从大到小排列，去除掉区间包含的情况，就可以得到图$b)$。显然由于每个闭区间买最需要存在一个点，因此对左端点最大的区间$I_1$来说，取哪个点可以让他尽可能多地覆盖其他区间？很显然，只需要取左端点即可，这样这个点就可以覆盖到尽可能多的区间。区间选点问题的代码只需要把区间不相交问题代码中的<code>I[i].y &lt;= lastX</code>改为<code>I[i].y &lt; lastX</code>即可。</p>
<p><code>????为何？？？</code></p>
</blockquote>
<p>​    </p>
<p>总的来说，贪心是用来解决一类最优化问题，并希望由<strong>局部最优策略来推得全局最优结果的算法思想。</strong></p>
<p>贪心算法使用的问题一定满足<strong>最优子结构性质</strong>，即一个问题的最优解可以由它的子问题的最优解有效地构造出来。</p>
<p>显然，不是所有问题都适合使用贪心法，但是这并不妨碍贪心算法称为一个简洁、使用、高效的算法。</p>
<h2 id="五、二分"><a href="#五、二分" class="headerlink" title="五、二分"></a>五、二分</h2><h3 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1. 二分查找"></a>1. 二分查找</h3><p>要求：</p>
<ul>
<li>有序</li>
<li>线性表</li>
</ul>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;  <span class="comment">//是小于等于！！！！</span></span><br><span class="line">        mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[mid] == x) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[mid] &gt; x) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = mid +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//查找失败;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,binarySearch(A,<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步的问题：</p>
<blockquote>
<p>如果递增序列A中的元素可能重复，那如何对给定的与查询元素x，<strong>求出序列的中第一个大于等于x的元素的位置L以及第一个大于x元素的位置R，这样x在序列的存在区间就是左闭右开区间$[L,R)$</strong></p>
<p>如：{1,3,3,3,6},对3就是：L=1、R=4（从零起）</p>
</blockquote>
<p>分成两小问做：</p>
<ul>
<li><p>第一问：求序列中的第一个大于等于x的元素的位置</p>
<ol>
<li><p>$A[mid]\geq x$,说明第一个大于等于x的元素一定在mid处或mid左侧，应往左子区间$[left,mid]$继续查</p>
</li>
<li><p>如果$A[mid]&lt;x$,说明第一个大于等于x的元素一定在mid右侧，应往右子区间$[mid+1,right]$继续查询</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123; <span class="comment">//left == right意味着找到唯一位置</span></span><br><span class="line">        mid = (left + right)/<span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span>(A[mid] &gt;= x) right = mid;</span><br><span class="line">        <span class="keyword">else</span> left = mid +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">//返回夹出来的位置;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>第二问：求序列中第一个大于x的元素的位置</p>
<ol>
<li><p>$A[mid] &gt; x$,说明第一个大于x的元素一定在mid处或mid左处</p>
</li>
<li><p>$A[mid]&lt;=x$,说明第一个大于x的元素一定在mid右处</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123; <span class="comment">//left == right意味着找到唯一位置</span></span><br><span class="line">        mid = (left + right)/<span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span>(A[mid] &gt; x) right = mid;</span><br><span class="line">        <span class="keyword">else</span> left = mid +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">//返回夹出来的位置;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>通过思考发现，两个子函数其实都在解决这样一个问题：<strong>寻找有序序列中第一个满足某条件的元素的位置。</strong></p>
<p>  这是一个非常重要且经典的问题，平时可以碰到的大部分二分法问题都可以归结于这个问题。</p>
<blockquote>
<p>此处总结了解决此类问题的固定模板。显然，所谓的“某条件”在序列中一定是从左到右先不满足，然后满足的</p>
</blockquote>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决“寻找有序序列第一个满足某条件的元素的位置”问题的固定模板</span></span><br><span class="line"><span class="comment">//二分区间为左闭右闭，初值必须能覆盖接的所有可能取值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">int</span> mid;</span><br><span class="line">  	<span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(条件成立)&#123;</span><br><span class="line">          right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123; <span class="comment">//条件不成立</span></span><br><span class="line">          left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  综上：如果目的是查找<strong>序列中是否存在满足某条件的元素</strong>，那么用本小节的二分查找的写法最为合适</p>
</li>
</ul>
<h3 id="2-二分法拓展"><a href="#2-二分法拓展" class="headerlink" title="2. 二分法拓展"></a>2. 二分法拓展</h3><p>之前讲解的是整数情况下的二分查询问题，事实上二分法的应用远不止此，下面介绍几个相关的例子。</p>
<ol>
<li><p><strong>如何计算$\sqrt 2$的近似值</strong></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123; <span class="comment">//f(x)</span></span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calSqrt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> left = <span class="number">1</span>,right = <span class="number">2</span>, mid;</span><br><span class="line">    <span class="keyword">while</span>(right - left &gt; eps)&#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(f(mid) &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 事实上，计算$\sqrt 2$的近似值问题其实是这样一个问题的特例：<strong>给定一个在$[L,R]$上的单调函数$f(x)$，求方程$f(x)=0$的根</strong>，对应的代码：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123; <span class="comment">//f(x)---必须是单调的！</span></span><br><span class="line">    <span class="keyword">return</span> ....;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calSqrt</span><span class="params">(<span class="keyword">double</span> L, <span class="keyword">double</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(R - L &gt; eps)&#123;</span><br><span class="line">        mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(f(mid) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            R = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            L = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>装水问题：</strong></p>
<blockquote>
<p>有一个侧面看上去是半圆的储水装置，该半圆的半径为R，要求往里面注入高度为h的水，使其在侧面看去的面积与半圆面积的比例恰好为r，先给定R和r，求高度h。</p>
<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200223142949072.png" alt="image-20200223142949072" style="zoom:50%;" />
</blockquote>
<p> 直接求表达式不现实，可以利用二分法来近似求解：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>); <span class="comment">//PI</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> R, <span class="keyword">double</span> h)</span></span>&#123; <span class="comment">//计算r = f(h),由实际含义可知r关于h递增</span></span><br><span class="line">    <span class="keyword">double</span> alpha = <span class="number">2</span> * <span class="built_in">acos</span>((R-h)/R);</span><br><span class="line">    <span class="keyword">double</span> L = <span class="number">2</span> * <span class="built_in">sqrt</span>(R*R - (R-h)*(R-h));</span><br><span class="line">    <span class="keyword">double</span> S1 = alpha * R * R /<span class="number">2</span> - L * (R - h) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> S2 = PI * R * R / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> S1 / S2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> R, <span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//h的取值范围为[0,R]</span></span><br><span class="line">    <span class="keyword">double</span> left = <span class="number">0</span>, right = R, mid; </span><br><span class="line">    <span class="keyword">while</span>((right-left)&gt;eps)&#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(f(R,mid) &gt; r)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>木棒切割问题：</strong></p>
<blockquote>
<p>给出N根木棒，长度均已知，现在希望通过切割他们来得到至少K段长度相等的木棒（长度必须是整数），问这些长度相等的木棒最长能有多长。</p>
</blockquote>
<p> 对于这个问题来说，首先可以注意到一个结论：<strong>如果长度相等的木棒的长度L越长，那么可以得到的木棒段数k越少。</strong>从这个角度出发便可以想到的算法，即二分答案（最大长度L），根据对当前长度L来说能得到的木棒段数k与K的大小关系来进行二分。由于这个问题可以写成求解最后一个满足条件$k\geq K$的长度L，因此不妨转换为求解第一个满足条件$k&lt;K$的长度L，然后减1即可。</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//len为所有木棒,N为数量,L为目标长度,K为目标数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> len[N];</span><br><span class="line"><span class="keyword">int</span> K;</span><br><span class="line"><span class="comment">//算出k</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        k += len[i] / L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="comment">//为何要+1?????</span></span><br><span class="line">    <span class="comment">//因为.....</span></span><br><span class="line">    <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (f(mid) &lt; K) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    len[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    len[<span class="number">1</span>] = <span class="number">24</span>;</span><br><span class="line">    len[<span class="number">2</span>] = <span class="number">15</span>;</span><br><span class="line">    K = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solve(<span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="3-快速幂"><a href="#3-快速幂" class="headerlink" title="3. 快速幂"></a>3. 快速幂</h3><blockquote>
<p>快速幂就是用二分的思想来做幂积，适用于幂次很大的情况</p>
<p>给定三个正整数$a、b、m(a&lt;10^9,b&lt;10^{18},1&lt;m&lt;10^9)$,求$a^b%m$</p>
</blockquote>
<p>预备知识：</p>
<blockquote>
<p>难怪我有一个地方一直没有懂，我一直想，这么大的数，哪怕是用了快速幂，难道LL能存下？，原来取模还有公式：</p>
<p>模运算规则：<br>模运算与基本四则运算有些相似，但是除法例外。其规则如下：<br>$(a + b) % p = (a % p + b % p) % p$<br>$(a – b) % p = (a % p – b % p) % p$<br>$(a \times b) % p = (a % p \times b % p) % p$ —-尤为重要！！！也是为啥每次都做取模的原因<br>$ab % p = ((a % p)b) % p$<br>结合率：<br>$((a+b) % p + c) % p = (a + (b+c) % p) % p$<br>$((a\times b) % p \times c)% p = (a \times (b \times c) \ p) \ p$</p>
</blockquote>
<p><code>递归写法:</code></p>
<p>快速幂基于以下事实：</p>
<blockquote>
<ol>
<li>如果b是奇数，那么有$a^b = a\times a^{b-1}$</li>
<li>如果b是偶数，那么有$a^b = a^{b/2}\times a^{b/2}$</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="comment">//求a^b % m,的递归写法</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a, LL b, LL m)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归边界</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (b%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        LL mul = binaryPow(a, b/<span class="number">2</span>, m);</span><br><span class="line">        <span class="keyword">return</span> mul * mul % m;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * binaryPow(a, b<span class="number">-1</span>, m)%m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>迭代写法</code></p>
<blockquote>
<p>对于$a^b$来说，如果把b写成二进制，那么b就可以写成若干二次幂之和。</p>
<p>例如：$a^{13} = a^{8+4+1} = a^8\times a^4\times a^1$</p>
<p>所以可以得到大致思路：</p>
<p>令i从0到k枚举b的二进制的每一位，如果当前位为1，那么累积$a^{2i}$。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="comment">//求a^b % m,的迭代写法</span></span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a, LL b, LL m)</span></span>&#123;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//递归边界</span></span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) &#123;<span class="comment">//如果b的二进制末尾为1</span></span><br><span class="line">            ans = ans * a % m; <span class="comment">//令ans累积上a</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//令a平方</span></span><br><span class="line">        a = a * a % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>; <span class="comment">//将b的二进制右移一位,即b = b &gt;&gt; 1或b = b / 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="六、two-pointers"><a href="#六、two-pointers" class="headerlink" title="六、two pointers"></a>六、two pointers</h2><blockquote>
<p>two pointers 是算法编程中的一种非常重要的思想。</p>
</blockquote>
<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>例一：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228105701119.png" alt="image-20200228105701119"></p>
<p>高复杂度的原因：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228105925515.png" alt="image-20200228105925515"></p>
<p>以上体现了一个问题：<strong>i和j的枚举似乎是互相牵制的，而这似乎可以给优化算法带来很大的空间</strong></p>
<p>事实上，本题中two pointers将利用有序序列的枚举特性来有效降低复杂度。</p>
<p>算法如下：（<strong>仔细阅读，看懂这个过程！</strong>）</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228110639057.png" alt="image-20200228110639057"></p>
<p>反复执行上面三个判断，直到$i\geq j$成立，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">  	<span class="keyword">if</span>(a[i] + a[j] == M)&#123;</span><br><span class="line">      	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a[i] + a[j] &lt; M)&#123;</span><br><span class="line">      	i++;  <span class="comment">//i往右走</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      	j--;  <span class="comment">//j往左走 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法复杂度：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228115647733.png" alt="image-20200228115647733"></p>
</blockquote>
<p>例二：</p>
<blockquote>
<p><strong>序列合并问题。假设有两个递增序列A和B，要求他们合并为一个序列C。</strong></p>
<p><code>ps:这个问题好像做过，就是归并里面的归并操作</code></p>
<p>算法思想：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228115948618.png" alt="image-20200228115948618"></p>
<p>上面分支操作直到i、j中的一个到达序列末端为止，然后将另一个序列的所有元素依次加入序列C</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> C[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">  	<span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)&#123;</span><br><span class="line">      	<span class="keyword">if</span>(A[i] &lt;= B[j])&#123;</span><br><span class="line">          	C[index++] = A[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">          	C[index++] = B[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="keyword">while</span>(i &lt; n) C[index++] = A[i++];</span><br><span class="line">  	<span class="keyword">while</span>(j &lt; m) C[index++] = B[j++];</span><br><span class="line">  	<span class="keyword">return</span> index;  <span class="comment">//返回序列C的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>那么，two pointers到底是怎样的一种思想？</p>
<blockquote>
<p>事实上，two pointers最原始的含义就是针对例1而言的，而<strong>广义上的two pointers则是利用问题本身与序列的特性，使用两个下标i，j对序列进行扫描（可以同向，也可以反向），以较低的复杂度解决问题。</strong></p>
</blockquote>
<h3 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2. 归并排序"></a>2. 归并排序</h3><p>概念：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228160521842.png" alt="image-20200228160521842"></p>
</blockquote>
<p>代码实现：</p>
<ol>
<li><p>递归实现</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228160700572.png" alt="image-20200228160700572"></p>
<p> 代码：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组A的[L1, R1]与[L2, R2]区间合并为有序区间,L2实际就是L1+1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> L1, <span class="keyword">int</span> R1, <span class="keyword">int</span> L2, <span class="keyword">int</span> R2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = L1, j = L2;  <span class="comment">//i指向A[L1], j指向A[L2]</span></span><br><span class="line">    <span class="keyword">int</span> temp[maxn], index = <span class="number">0</span>;  <span class="comment">//temp临时存放合并后的数组,index为下标</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= R1 &amp;&amp; j &lt;= R2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &lt;= A[j])&#123;</span><br><span class="line">            temp[index++] = A[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            temp[index++] = A[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= R1) temp[index++] = A[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= R2) temp[index++] = A[j++];</span><br><span class="line">    <span class="comment">//将合并后的序列赋值回数组A</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">        A[L1 + i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(A, left, mid);</span><br><span class="line">        mergeSort(A, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(A, left, mid , mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非递归实现</p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200228165028325.png" alt="image-20200228165028325"></p>
<p> <strong>代码：</strong></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>; <span class="built_in">step</span> / <span class="number">2</span> &lt;= n; <span class="built_in">step</span> *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//每step个元素一组,组内前step/2和后step/2个元素进行合并</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="built_in">step</span>) &#123; <span class="comment">//对每一组</span></span><br><span class="line">            <span class="keyword">int</span> mid  = i + <span class="built_in">step</span> / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">                merge(A, i, mid, mid +<span class="number">1</span>, <span class="built_in">min</span>(i + <span class="built_in">step</span> - <span class="number">1</span>, n));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3.快速排序"></a>3.快速排序</h3><p>概念：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229110201266.png" alt="image-20200229110201266"></p>
<p>思想：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229110714984.png" alt="image-20200229110714984"></p>
<p><strong>ps: 由于第一个元素先前就被存过，所以就不会担心有元素被忽略</strong></p>
<p>例子：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229110921724.png" alt="image-20200229110921724"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229110937753.png" alt="image-20200229110937753"></p>
<p><code>此部分的代码：</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = A[left];</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[right] &gt; temp) right--;  <span class="comment">//左移</span></span><br><span class="line">        A[left] = A[right];</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[left] &lt; temp) left--;  <span class="comment">//右移</span></span><br><span class="line">        A[right] = A[left];</span><br><span class="line">    &#125;</span><br><span class="line">    A[left] = temp;  <span class="comment">//相遇之处</span></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">//返回相遇的下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来正式实现快速排序，思路：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229111909950.png" alt="image-20200229111909950"></p>
<p><strong>递归实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line">      	<span class="keyword">int</span> pos = Partition(A, left, right);</span><br><span class="line">      	quickSort(A, left, pos - <span class="number">1</span>);  <span class="comment">//左子区间快排</span></span><br><span class="line">      	quickSort(A, pos + <span class="number">1</span>, right); <span class="comment">//右子区间快排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229112337845.png" alt="image-20200229112337845"></p>
<p><code>随机数的生成：</code></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229112517272.png" alt="image-20200229112517272"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;  //必要</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成随机数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));  <span class="comment">//生成随机数的种子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 但是rand()的范围是[0,RAND_MAX],其中RAND_MAX是系统给出的</span></span><br><span class="line"><span class="comment">         * 如果想取到任意区间[a,b],则rand()%(b-a+1) + a</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, rand());  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229113242106.png" alt="image-20200229113242106"></p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229113256235.png" alt="image-20200229113256235"></p>
<p><strong>但是，这种做法只对左右端点相差不超过RAND_MAX的区间随机数有效，如果需要生成更大的数，就不行了。</strong></p>
<p>不过想要生成大范围的随机数也有很多方法：</p>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229113659422.png" alt="image-20200229113659422"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;  //必要</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成随机数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));  <span class="comment">//生成随机数的种子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 但是rand()的范围是[0,RAND_MAX],其中RAND_MAX是系统给出的</span></span><br><span class="line"><span class="comment">         * 如果想取到任意区间[a,b],则rand()%(b-a+1) + a</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">      	<span class="keyword">int</span> t = (<span class="keyword">int</span>)(round(<span class="number">1.0</span>*rand() / RAND_MAX)*<span class="number">50000</span> + <span class="number">10000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, rand());  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200229113925565.png" alt="image-20200229113925565"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="comment">//改进版:</span></span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">int</span> p = round(<span class="number">1.0</span>*rand()/RAND_MAX*(right-left) + left);</span><br><span class="line">    swap(A[p], A[left]);  <span class="comment">//换到left,等效于随机拿了一个left</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp = A[left];</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[right] &gt; temp) right--;  <span class="comment">//左移</span></span><br><span class="line">        A[left] = A[right];</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[left] &lt; temp) left--;  <span class="comment">//右移</span></span><br><span class="line">        A[right] = A[left];</span><br><span class="line">    &#125;</span><br><span class="line">    A[left] = temp;  <span class="comment">//相遇之处</span></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">//返回相遇的下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = Partition(A, left, right);</span><br><span class="line">        quickSort(A, left, pos - <span class="number">1</span>);  <span class="comment">//左子区间快排</span></span><br><span class="line">        quickSort(A, pos + <span class="number">1</span>, right); <span class="comment">//右子区间快排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>个人认为，two pointer的核心在于有两个“哨兵”i和j，用两个哨兵对有序进行遍历</strong></p>
<h2 id="七、回溯"><a href="#七、回溯" class="headerlink" title="七、回溯"></a>七、回溯</h2><h2 id="八、其他高效技巧与算法"><a href="#八、其他高效技巧与算法" class="headerlink" title="八、其他高效技巧与算法"></a>八、其他高效技巧与算法</h2><h3 id="1-打表"><a href="#1-打表" class="headerlink" title="1. 打表"></a>1. 打表</h3><blockquote>
<p>打表是一种典型的用空间换时间的技巧，一般指将所有可能需要用到的结果实现计算出来，这样后面需要用到时就可以直接查表获得。</p>
</blockquote>
<p>打表的常见用法：</p>
<ol>
<li><p><strong>在程序中一次性计算出所有需要用到的结果，之后的查询直接取这些结果。</strong></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301210830244.png" alt="image-20200301210830244"></p>
</li>
<li><p><strong>在程序B中分一次或多次计算出所有需要用到的结果，手工把结果写在程序A的数组中，然后在程序A中就可以直接使用这些结果（居然还可以这样！）</strong></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301210947334.png" alt="image-20200301210947334"></p>
</li>
<li><p><strong>对一些感觉不会做的题目，先用暴力程序计算出小范围数据的结果，然后找规律，或许就能发现一些“蛛丝马迹”</strong></p>
<p> <img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301211225875.png" alt="image-20200301211225875"></p>
</li>
</ol>
<h3 id="2-活用递推"><a href="#2-活用递推" class="headerlink" title="2. 活用递推"></a>2. 活用递推</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301211242671.png" alt="image-20200301211242671"></p>
</blockquote>
<h3 id="3-随机选择算法"><a href="#3-随机选择算法" class="headerlink" title="3. 随机选择算法"></a>3. 随机选择算法</h3><blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301211407202.png" alt="image-20200301211407202"></p>
<p><strong>这里的说法有点问题，第几大在这里的意思应该是第几小。。。</strong></p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randSelect</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(left == right) <span class="keyword">return</span> A[left]; <span class="comment">//边界</span></span><br><span class="line">  	<span class="keyword">int</span> p = randPartition(A, left, right); <span class="comment">//划分后主元的位置为p</span></span><br><span class="line">  	<span class="keyword">int</span> M = p - left + <span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">if</span>(K == M) <span class="keyword">return</span> A[p];</span><br><span class="line">  	<span class="keyword">if</span>(K &lt; M)&#123;</span><br><span class="line">      	<span class="keyword">return</span> randSelect(A, left, p - <span class="number">1</span>, K); <span class="comment">//往主元左侧找第K大</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">//往主元右侧找第K - M大（相对而言是总序列的第K大）</span></span><br><span class="line">        <span class="keyword">return</span> randSelect(A, p + <span class="number">1</span>, right, K - M);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301213447440.png" alt="image-20200301213447440"></p>
</blockquote>
<p>下面是其应用：</p>
<blockquote>
<p><img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301220829199.png" alt="image-20200301220829199">)<img src="https://demo-1258985652.cos.ap-guangzhou.myqcloud.com/2020/06/09/image20200301220839119.png" alt="image-20200301220839119"></p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程题</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>基本思想</tag>
      </tags>
  </entry>
</search>
